// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "SCL_BaseTypes-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // tBaseElement_pskel
      //

      void tBaseElement_pskel::
      Text_parser (::IEC61850::SCL::Validation::tText_pskel& p)
      {
        this->Text_parser_ = &p;
      }

      void tBaseElement_pskel::
      Private_parser (::IEC61850::SCL::Validation::tPrivate_pskel& p)
      {
        this->Private_parser_ = &p;
      }

      void tBaseElement_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
      }

      tBaseElement_pskel::
      tBaseElement_pskel ()
      : Text_parser_ (0),
        Private_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tUnNaming_pskel
      //

      void tUnNaming_pskel::
      desc_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->desc_parser_ = &p;
      }

      void tUnNaming_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
      }

      tUnNaming_pskel::
      tUnNaming_pskel ()
      : desc_parser_ (0)
      {
      }

      // tNaming_pskel
      //

      void tNaming_pskel::
      name_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->name_parser_ = &p;
      }

      void tNaming_pskel::
      desc_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->desc_parser_ = &p;
      }

      void tNaming_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& name,
               ::xml_schema::normalized_string_pskel& desc)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->name_parser_ = &name;
        this->desc_parser_ = &desc;
      }

      tNaming_pskel::
      tNaming_pskel ()
      : name_parser_ (0),
        desc_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tIDNaming_pskel
      //

      void tIDNaming_pskel::
      id_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->id_parser_ = &p;
      }

      void tIDNaming_pskel::
      desc_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->desc_parser_ = &p;
      }

      void tIDNaming_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& id,
               ::xml_schema::normalized_string_pskel& desc)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->id_parser_ = &id;
        this->desc_parser_ = &desc;
      }

      tIDNaming_pskel::
      tIDNaming_pskel ()
      : id_parser_ (0),
        desc_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tAnyContentFromOtherNamespace_pskel
      //

      tAnyContentFromOtherNamespace_pskel::
      tAnyContentFromOtherNamespace_pskel ()
      : v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tText_pskel
      //

      void tText_pskel::
      source_parser (::xml_schema::uri_pskel& p)
      {
        this->source_parser_ = &p;
      }

      void tText_pskel::
      parsers (::xml_schema::uri_pskel& source)
      {
        this->source_parser_ = &source;
      }

      tText_pskel::
      tText_pskel ()
      : source_parser_ (0)
      {
      }

      // tPrivate_pskel
      //

      void tPrivate_pskel::
      type_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->type_parser_ = &p;
      }

      void tPrivate_pskel::
      source_parser (::xml_schema::uri_pskel& p)
      {
        this->source_parser_ = &p;
      }

      void tPrivate_pskel::
      parsers (::xml_schema::normalized_string_pskel& type,
               ::xml_schema::uri_pskel& source)
      {
        this->type_parser_ = &type;
        this->source_parser_ = &source;
      }

      tPrivate_pskel::
      tPrivate_pskel ()
      : type_parser_ (0),
        source_parser_ (0)
      {
      }

      // tHeader_pskel
      //

      void tHeader_pskel::
      Text_parser (::IEC61850::SCL::Validation::tText_pskel& p)
      {
        this->Text_parser_ = &p;
      }

      void tHeader_pskel::
      History_parser (::IEC61850::SCL::Validation::History_pskel& p)
      {
        this->History_parser_ = &p;
      }

      void tHeader_pskel::
      id_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->id_parser_ = &p;
      }

      void tHeader_pskel::
      version_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->version_parser_ = &p;
      }

      void tHeader_pskel::
      revision_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->revision_parser_ = &p;
      }

      void tHeader_pskel::
      toolID_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->toolID_parser_ = &p;
      }

      void tHeader_pskel::
      nameStructure_parser (::IEC61850::SCL::Validation::nameStructure_pskel& p)
      {
        this->nameStructure_parser_ = &p;
      }

      void tHeader_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::History_pskel& History,
               ::xml_schema::normalized_string_pskel& id,
               ::xml_schema::normalized_string_pskel& version,
               ::xml_schema::normalized_string_pskel& revision,
               ::xml_schema::normalized_string_pskel& toolID,
               ::IEC61850::SCL::Validation::nameStructure_pskel& nameStructure)
      {
        this->Text_parser_ = &Text;
        this->History_parser_ = &History;
        this->id_parser_ = &id;
        this->version_parser_ = &version;
        this->revision_parser_ = &revision;
        this->toolID_parser_ = &toolID;
        this->nameStructure_parser_ = &nameStructure;
      }

      tHeader_pskel::
      tHeader_pskel ()
      : Text_parser_ (0),
        History_parser_ (0),
        id_parser_ (0),
        version_parser_ (0),
        revision_parser_ (0),
        toolID_parser_ (0),
        nameStructure_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tHitem_pskel
      //

      void tHitem_pskel::
      version_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->version_parser_ = &p;
      }

      void tHitem_pskel::
      revision_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->revision_parser_ = &p;
      }

      void tHitem_pskel::
      when_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->when_parser_ = &p;
      }

      void tHitem_pskel::
      who_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->who_parser_ = &p;
      }

      void tHitem_pskel::
      what_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->what_parser_ = &p;
      }

      void tHitem_pskel::
      why_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->why_parser_ = &p;
      }

      void tHitem_pskel::
      parsers (::xml_schema::normalized_string_pskel& version,
               ::xml_schema::normalized_string_pskel& revision,
               ::xml_schema::normalized_string_pskel& when,
               ::xml_schema::normalized_string_pskel& who,
               ::xml_schema::normalized_string_pskel& what,
               ::xml_schema::normalized_string_pskel& why)
      {
        this->version_parser_ = &version;
        this->revision_parser_ = &revision;
        this->when_parser_ = &when;
        this->who_parser_ = &who;
        this->what_parser_ = &what;
        this->why_parser_ = &why;
      }

      tHitem_pskel::
      tHitem_pskel ()
      : version_parser_ (0),
        revision_parser_ (0),
        when_parser_ (0),
        who_parser_ (0),
        what_parser_ (0),
        why_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tVal_pskel
      //

      void tVal_pskel::
      sGroup_parser (::xml_schema::unsigned_int_pskel& p)
      {
        this->sGroup_parser_ = &p;
      }

      void tVal_pskel::
      parsers (::xml_schema::unsigned_int_pskel& sGroup)
      {
        this->sGroup_parser_ = &sGroup;
      }

      tVal_pskel::
      tVal_pskel ()
      : sGroup_parser_ (0)
      {
      }

      // tValueWithUnit_pskel
      //

      void tValueWithUnit_pskel::
      unit_parser (::IEC61850::SCL::Validation::tSIUnitEnum_pskel& p)
      {
        this->unit_parser_ = &p;
      }

      void tValueWithUnit_pskel::
      multiplier_parser (::IEC61850::SCL::Validation::tUnitMultiplierEnum_pskel& p)
      {
        this->multiplier_parser_ = &p;
      }

      void tValueWithUnit_pskel::
      parsers (::IEC61850::SCL::Validation::tSIUnitEnum_pskel& unit,
               ::IEC61850::SCL::Validation::tUnitMultiplierEnum_pskel& multiplier)
      {
        this->unit_parser_ = &unit;
        this->multiplier_parser_ = &multiplier;
      }

      tValueWithUnit_pskel::
      tValueWithUnit_pskel ()
      : unit_parser_ (0),
        multiplier_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tVoltage_pskel
      //

      tVoltage_pskel::
      tVoltage_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tBitRateInMbPerSec_pskel
      //

      tBitRateInMbPerSec_pskel::
      tBitRateInMbPerSec_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tDurationInSec_pskel
      //

      tDurationInSec_pskel::
      tDurationInSec_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tDurationInMilliSec_pskel
      //

      tDurationInMilliSec_pskel::
      tDurationInMilliSec_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // History_pskel
      //

      void History_pskel::
      Hitem_parser (::IEC61850::SCL::Validation::tHitem_pskel& p)
      {
        this->Hitem_parser_ = &p;
      }

      void History_pskel::
      parsers (::IEC61850::SCL::Validation::tHitem_pskel& Hitem)
      {
        this->Hitem_parser_ = &Hitem;
      }

      History_pskel::
      History_pskel ()
      : Hitem_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // tBaseElement_pskel
      //

      void tBaseElement_pskel::
      Text ()
      {
      }

      void tBaseElement_pskel::
      Private ()
      {
      }

      void tBaseElement_pskel::
      post_tBaseElement ()
      {
      }

      // tUnNaming_pskel
      //

      void tUnNaming_pskel::
      desc (const ::std::string&)
      {
      }

      void tUnNaming_pskel::
      post_tUnNaming ()
      {
        post_tBaseElement ();
      }

      // tNaming_pskel
      //

      void tNaming_pskel::
      name ()
      {
      }

      void tNaming_pskel::
      desc (const ::std::string&)
      {
      }

      void tNaming_pskel::
      post_tNaming ()
      {
        post_tBaseElement ();
      }

      // tIDNaming_pskel
      //

      void tIDNaming_pskel::
      id ()
      {
      }

      void tIDNaming_pskel::
      desc (const ::std::string&)
      {
      }

      void tIDNaming_pskel::
      post_tIDNaming ()
      {
        post_tBaseElement ();
      }

      // tAnyContentFromOtherNamespace_pskel
      //

      void tAnyContentFromOtherNamespace_pskel::
      post_tAnyContentFromOtherNamespace ()
      {
      }

      // tText_pskel
      //

      void tText_pskel::
      source (const ::std::string&)
      {
      }

      void tText_pskel::
      post_tText ()
      {
        post_tAnyContentFromOtherNamespace ();
      }

      // tPrivate_pskel
      //

      void tPrivate_pskel::
      type (const ::std::string&)
      {
      }

      void tPrivate_pskel::
      source (const ::std::string&)
      {
      }

      void tPrivate_pskel::
      post_tPrivate ()
      {
        post_tAnyContentFromOtherNamespace ();
      }

      // tHeader_pskel
      //

      void tHeader_pskel::
      Text ()
      {
      }

      void tHeader_pskel::
      History ()
      {
      }

      void tHeader_pskel::
      id (const ::std::string&)
      {
      }

      void tHeader_pskel::
      version (const ::std::string&)
      {
      }

      void tHeader_pskel::
      revision (const ::std::string&)
      {
      }

      void tHeader_pskel::
      toolID (const ::std::string&)
      {
      }

      void tHeader_pskel::
      nameStructure ()
      {
      }

      void tHeader_pskel::
      post_tHeader ()
      {
      }

      // tHitem_pskel
      //

      void tHitem_pskel::
      version (const ::std::string&)
      {
      }

      void tHitem_pskel::
      revision (const ::std::string&)
      {
      }

      void tHitem_pskel::
      when (const ::std::string&)
      {
      }

      void tHitem_pskel::
      who (const ::std::string&)
      {
      }

      void tHitem_pskel::
      what (const ::std::string&)
      {
      }

      void tHitem_pskel::
      why (const ::std::string&)
      {
      }

      void tHitem_pskel::
      post_tHitem ()
      {
        post_tAnyContentFromOtherNamespace ();
      }

      // tVal_pskel
      //

      void tVal_pskel::
      sGroup (unsigned int)
      {
      }

      void tVal_pskel::
      post_tVal ()
      {
      }

      // tValueWithUnit_pskel
      //

      void tValueWithUnit_pskel::
      unit ()
      {
      }

      void tValueWithUnit_pskel::
      multiplier ()
      {
      }

      void tValueWithUnit_pskel::
      post_tValueWithUnit ()
      {
      }

      // tVoltage_pskel
      //

      void tVoltage_pskel::
      post_tVoltage ()
      {
        post_tValueWithUnit ();
      }

      // tBitRateInMbPerSec_pskel
      //

      void tBitRateInMbPerSec_pskel::
      post_tBitRateInMbPerSec ()
      {
        post_tValueWithUnit ();
      }

      // tDurationInSec_pskel
      //

      void tDurationInSec_pskel::
      post_tDurationInSec ()
      {
        post_tValueWithUnit ();
      }

      // tDurationInMilliSec_pskel
      //

      void tDurationInMilliSec_pskel::
      post_tDurationInMilliSec ()
      {
        post_tValueWithUnit ();
      }

      // History_pskel
      //

      void History_pskel::
      Hitem ()
      {
      }

      void History_pskel::
      post_History ()
      {
      }

      // nameStructure_pskel
      //

      void nameStructure_pskel::
      post_nameStructure ()
      {
      }
    }
  }
}

#include <cassert>

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Element validation and dispatch functions for tBaseElement_pskel.
      //
      bool tBaseElement_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if ((!ns.empty () && ns != "http://www.iec.ch/61850/2003/SCL"))
              s = 0UL;
            else if (n == "Text" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 1UL;
            else if (n == "Private" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 2UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tBaseElement_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tBaseElement_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::xml_schema::complex_content::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tBaseElement_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;
      }

      void tBaseElement_pskel::
      _post_e_validate ()
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tBaseElement_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if ((!ns.empty () && ns != "http://www.iec.ch/61850/2003/SCL"))
            {
              if (start)
              {
                this->_start_any_element (ns, n, t);
                this->::xml_schema::complex_content::context_.top ().any_ = true;
              }
              else
              {
                this->::xml_schema::complex_content::context_.top ().any_ = false;
                this->_end_any_element (ns, n);
                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 1UL;
              // Fall through.
            }
          }
          case 1UL:
          {
            if (n == "Text" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Text_parser_;

                if (this->Text_parser_)
                  this->Text_parser_->pre ();
              }
              else
              {
                if (this->Text_parser_)
                {
                  this->Text_parser_->post_tText ();
                  this->Text ();
                }

                count = 0;
                state = 2UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 2UL;
              // Fall through.
            }
          }
          case 2UL:
          {
            if (n == "Private" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Private_parser_;

                if (this->Private_parser_)
                  this->Private_parser_->pre ();
              }
              else
              {
                if (this->Private_parser_)
                {
                  this->Private_parser_->post_tPrivate ();
                  this->Private ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tAnyContentFromOtherNamespace_pskel.
      //
      bool tAnyContentFromOtherNamespace_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if ((!ns.empty () && ns != "http://www.iec.ch/61850/2003/SCL"))
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;

              vd = vs.data + vs.size++;
              vd->func = &tAnyContentFromOtherNamespace_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tAnyContentFromOtherNamespace_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::xml_schema::complex_content::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tAnyContentFromOtherNamespace_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;
      }

      void tAnyContentFromOtherNamespace_pskel::
      _post_e_validate ()
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tAnyContentFromOtherNamespace_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if ((!ns.empty () && ns != "http://www.iec.ch/61850/2003/SCL"))
            {
              if (start)
              {
                this->_start_any_element (ns, n, t);
                this->::xml_schema::complex_content::context_.top ().any_ = true;
              }
              else
              {
                this->::xml_schema::complex_content::context_.top ().any_ = false;
                this->_end_any_element (ns, n);
                count = 0;
                state = ~0UL;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "##other", "*",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tHeader_pskel.
      //
      bool tHeader_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "Text" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;
            else if (n == "History" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 1UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tHeader_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tHeader_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::xml_schema::complex_content::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tHeader_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;
      }

      void tHeader_pskel::
      _post_e_validate ()
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tHeader_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "Text" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Text_parser_;

                if (this->Text_parser_)
                  this->Text_parser_->pre ();
              }
              else
              {
                if (this->Text_parser_)
                {
                  this->Text_parser_->post_tText ();
                  this->Text ();
                }

                count = 0;
                state = 1UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 1UL;
              // Fall through.
            }
          }
          case 1UL:
          {
            if (n == "History" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->History_parser_;

                if (this->History_parser_)
                  this->History_parser_->pre ();
              }
              else
              {
                if (this->History_parser_)
                {
                  this->History_parser_->post_History ();
                  this->History ();
                }

                count = 0;
                state = ~0UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for History_pskel.
      //
      bool History_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "Hitem" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &History_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "Hitem",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool History_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::xml_schema::complex_content::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void History_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;
      }

      void History_pskel::
      _post_e_validate ()
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "Hitem");

        this->v_state_stack_.pop ();
      }

      void History_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "Hitem" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Hitem_parser_;

                if (this->Hitem_parser_)
                  this->Hitem_parser_->pre ();
              }
              else
              {
                if (this->Hitem_parser_)
                {
                  this->Hitem_parser_->post_tHitem ();
                  this->Hitem ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "Hitem",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Attribute validation and dispatch functions for tBaseElement_pskel.
      //
      bool tBaseElement_pskel::
      _attribute_impl_phase_two (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if ((!ns.empty () && ns != "http://www.iec.ch/61850/2003/SCL"))
        {
          this->_any_attribute (ns, n, s);
          return true;
        }

        return false;
      }

      // Attribute validation and dispatch functions for tUnNaming_pskel.
      //
      bool tUnNaming_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "desc" && ns.empty ())
        {
          if (this->desc_parser_)
          {
            this->desc_parser_->pre ();
            this->desc_parser_->_pre_impl ();
            this->desc_parser_->_characters (s);
            this->desc_parser_->_post_impl ();
            const ::std::string& tmp (this->desc_parser_->post_normalized_string ());
            this->desc (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tBaseElement_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      // Attribute validation and dispatch functions for tNaming_pskel.
      //
      bool tNaming_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "name" && ns.empty ())
        {
          if (this->name_parser_)
          {
            this->name_parser_->pre ();
            this->name_parser_->_pre_impl ();
            this->name_parser_->_characters (s);
            this->name_parser_->_post_impl ();
            this->name_parser_->post_tName ();
            this->name ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
          return true;
        }

        if (n == "desc" && ns.empty ())
        {
          if (this->desc_parser_)
          {
            this->desc_parser_->pre ();
            this->desc_parser_->_pre_impl ();
            this->desc_parser_->_characters (s);
            this->desc_parser_->_post_impl ();
            const ::std::string& tmp (this->desc_parser_->post_normalized_string ());
            this->desc (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tBaseElement_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tNaming_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.name = false;
        this->::IEC61850::SCL::Validation::tBaseElement_pskel::_pre_a_validate ();
      }

      void tNaming_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tBaseElement_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.name)
          this->_expected_attribute (
            "", "name");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tIDNaming_pskel.
      //
      bool tIDNaming_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "id" && ns.empty ())
        {
          if (this->id_parser_)
          {
            this->id_parser_->pre ();
            this->id_parser_->_pre_impl ();
            this->id_parser_->_characters (s);
            this->id_parser_->_post_impl ();
            this->id_parser_->post_tName ();
            this->id ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
          return true;
        }

        if (n == "desc" && ns.empty ())
        {
          if (this->desc_parser_)
          {
            this->desc_parser_->pre ();
            this->desc_parser_->_pre_impl ();
            this->desc_parser_->_characters (s);
            this->desc_parser_->_post_impl ();
            const ::std::string& tmp (this->desc_parser_->post_normalized_string ());
            this->desc (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tBaseElement_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tIDNaming_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.id = false;
        this->::IEC61850::SCL::Validation::tBaseElement_pskel::_pre_a_validate ();
      }

      void tIDNaming_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tBaseElement_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.id)
          this->_expected_attribute (
            "", "id");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tAnyContentFromOtherNamespace_pskel.
      //
      bool tAnyContentFromOtherNamespace_pskel::
      _attribute_impl_phase_two (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if ((!ns.empty () && ns != "http://www.iec.ch/61850/2003/SCL"))
        {
          this->_any_attribute (ns, n, s);
          return true;
        }

        return false;
      }

      // Attribute validation and dispatch functions for tText_pskel.
      //
      bool tText_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "source" && ns.empty ())
        {
          if (this->source_parser_)
          {
            this->source_parser_->pre ();
            this->source_parser_->_pre_impl ();
            this->source_parser_->_characters (s);
            this->source_parser_->_post_impl ();
            const ::std::string& tmp (this->source_parser_->post_uri ());
            this->source (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      // Attribute validation and dispatch functions for tPrivate_pskel.
      //
      bool tPrivate_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            const ::std::string& tmp (this->type_parser_->post_normalized_string ());
            this->type (tmp);
          }

          return true;
        }

        if (n == "source" && ns.empty ())
        {
          if (this->source_parser_)
          {
            this->source_parser_->pre ();
            this->source_parser_->_pre_impl ();
            this->source_parser_->_characters (s);
            this->source_parser_->_post_impl ();
            const ::std::string& tmp (this->source_parser_->post_uri ());
            this->source (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      // Attribute validation and dispatch functions for tHeader_pskel.
      //
      bool tHeader_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "id" && ns.empty ())
        {
          if (this->id_parser_)
          {
            this->id_parser_->pre ();
            this->id_parser_->_pre_impl ();
            this->id_parser_->_characters (s);
            this->id_parser_->_post_impl ();
            const ::std::string& tmp (this->id_parser_->post_normalized_string ());
            this->id (tmp);
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
          return true;
        }

        if (n == "version" && ns.empty ())
        {
          if (this->version_parser_)
          {
            this->version_parser_->pre ();
            this->version_parser_->_pre_impl ();
            this->version_parser_->_characters (s);
            this->version_parser_->_post_impl ();
            const ::std::string& tmp (this->version_parser_->post_normalized_string ());
            this->version (tmp);
          }

          return true;
        }

        if (n == "revision" && ns.empty ())
        {
          if (this->revision_parser_)
          {
            this->revision_parser_->pre ();
            this->revision_parser_->_pre_impl ();
            this->revision_parser_->_characters (s);
            this->revision_parser_->_post_impl ();
            const ::std::string& tmp (this->revision_parser_->post_normalized_string ());
            this->revision (tmp);
          }

          return true;
        }

        if (n == "toolID" && ns.empty ())
        {
          if (this->toolID_parser_)
          {
            this->toolID_parser_->pre ();
            this->toolID_parser_->_pre_impl ();
            this->toolID_parser_->_characters (s);
            this->toolID_parser_->_post_impl ();
            const ::std::string& tmp (this->toolID_parser_->post_normalized_string ());
            this->toolID (tmp);
          }

          return true;
        }

        if (n == "nameStructure" && ns.empty ())
        {
          if (this->nameStructure_parser_)
          {
            this->nameStructure_parser_->pre ();
            this->nameStructure_parser_->_pre_impl ();
            this->nameStructure_parser_->_characters (s);
            this->nameStructure_parser_->_post_impl ();
            this->nameStructure_parser_->post_nameStructure ();
            this->nameStructure ();
          }

          return true;
        }

        return false;
      }

      void tHeader_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.id = false;
      }

      void tHeader_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.id)
          this->_expected_attribute (
            "", "id");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tHitem_pskel.
      //
      bool tHitem_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "version" && ns.empty ())
        {
          if (this->version_parser_)
          {
            this->version_parser_->pre ();
            this->version_parser_->_pre_impl ();
            this->version_parser_->_characters (s);
            this->version_parser_->_post_impl ();
            const ::std::string& tmp (this->version_parser_->post_normalized_string ());
            this->version (tmp);
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->version = true;
          return true;
        }

        if (n == "revision" && ns.empty ())
        {
          if (this->revision_parser_)
          {
            this->revision_parser_->pre ();
            this->revision_parser_->_pre_impl ();
            this->revision_parser_->_characters (s);
            this->revision_parser_->_post_impl ();
            const ::std::string& tmp (this->revision_parser_->post_normalized_string ());
            this->revision (tmp);
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->revision = true;
          return true;
        }

        if (n == "when" && ns.empty ())
        {
          if (this->when_parser_)
          {
            this->when_parser_->pre ();
            this->when_parser_->_pre_impl ();
            this->when_parser_->_characters (s);
            this->when_parser_->_post_impl ();
            const ::std::string& tmp (this->when_parser_->post_normalized_string ());
            this->when (tmp);
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->when = true;
          return true;
        }

        if (n == "who" && ns.empty ())
        {
          if (this->who_parser_)
          {
            this->who_parser_->pre ();
            this->who_parser_->_pre_impl ();
            this->who_parser_->_characters (s);
            this->who_parser_->_post_impl ();
            const ::std::string& tmp (this->who_parser_->post_normalized_string ());
            this->who (tmp);
          }

          return true;
        }

        if (n == "what" && ns.empty ())
        {
          if (this->what_parser_)
          {
            this->what_parser_->pre ();
            this->what_parser_->_pre_impl ();
            this->what_parser_->_characters (s);
            this->what_parser_->_post_impl ();
            const ::std::string& tmp (this->what_parser_->post_normalized_string ());
            this->what (tmp);
          }

          return true;
        }

        if (n == "why" && ns.empty ())
        {
          if (this->why_parser_)
          {
            this->why_parser_->pre ();
            this->why_parser_->_pre_impl ();
            this->why_parser_->_characters (s);
            this->why_parser_->_post_impl ();
            const ::std::string& tmp (this->why_parser_->post_normalized_string ());
            this->why (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tHitem_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.version = false;
        as.revision = false;
        as.when = false;
        this->::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel::_pre_a_validate ();
      }

      void tHitem_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.version)
          this->_expected_attribute (
            "", "version");
        if (!as.revision)
          this->_expected_attribute (
            "", "revision");
        if (!as.when)
          this->_expected_attribute (
            "", "when");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tVal_pskel.
      //
      bool tVal_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "sGroup" && ns.empty ())
        {
          if (this->sGroup_parser_)
          {
            this->sGroup_parser_->pre ();
            this->sGroup_parser_->_pre_impl ();
            this->sGroup_parser_->_characters (s);
            this->sGroup_parser_->_post_impl ();
            unsigned int tmp (this->sGroup_parser_->post_unsigned_int ());
            this->sGroup (tmp);
          }

          return true;
        }

        return this->::xml_schema::normalized_string_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      // Attribute validation and dispatch functions for tValueWithUnit_pskel.
      //
      bool tValueWithUnit_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "unit" && ns.empty ())
        {
          if (this->unit_parser_)
          {
            this->unit_parser_->pre ();
            this->unit_parser_->_pre_impl ();
            this->unit_parser_->_characters (s);
            this->unit_parser_->_post_impl ();
            this->unit_parser_->post_tSIUnitEnum ();
            this->unit ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->unit = true;
          return true;
        }

        if (n == "multiplier" && ns.empty ())
        {
          if (this->multiplier_parser_)
          {
            this->multiplier_parser_->pre ();
            this->multiplier_parser_->_pre_impl ();
            this->multiplier_parser_->_characters (s);
            this->multiplier_parser_->_post_impl ();
            this->multiplier_parser_->post_tUnitMultiplierEnum ();
            this->multiplier ();
          }

          return true;
        }

        return this->::xml_schema::decimal_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tValueWithUnit_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.unit = false;
        this->::xml_schema::decimal_pskel::_pre_a_validate ();
      }

      void tValueWithUnit_pskel::
      _post_a_validate ()
      {
        this->::xml_schema::decimal_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.unit)
          this->_expected_attribute (
            "", "unit");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tVoltage_pskel.
      //
      bool tVoltage_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "unit" && ns.empty ())
        {
          if (this->unit_parser_)
          {
            this->unit_parser_->pre ();
            this->unit_parser_->_pre_impl ();
            this->unit_parser_->_characters (s);
            this->unit_parser_->_post_impl ();
            this->unit_parser_->post_tSIUnitEnum ();
            this->unit ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->unit = true;
          return true;
        }

        if (n == "multiplier" && ns.empty ())
        {
          if (this->multiplier_parser_)
          {
            this->multiplier_parser_->pre ();
            this->multiplier_parser_->_pre_impl ();
            this->multiplier_parser_->_characters (s);
            this->multiplier_parser_->_post_impl ();
            this->multiplier_parser_->post_tUnitMultiplierEnum ();
            this->multiplier ();
          }

          return true;
        }

        return false;
      }

      void tVoltage_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.unit = false;
      }

      void tVoltage_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.unit)
          this->_expected_attribute (
            "", "unit");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tBitRateInMbPerSec_pskel.
      //
      bool tBitRateInMbPerSec_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "unit" && ns.empty ())
        {
          if (this->unit_parser_)
          {
            this->unit_parser_->pre ();
            this->unit_parser_->_pre_impl ();
            this->unit_parser_->_characters (s);
            this->unit_parser_->_post_impl ();
            this->unit_parser_->post_tSIUnitEnum ();
            this->unit ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->unit = true;
          return true;
        }

        if (n == "multiplier" && ns.empty ())
        {
          if (this->multiplier_parser_)
          {
            this->multiplier_parser_->pre ();
            this->multiplier_parser_->_pre_impl ();
            this->multiplier_parser_->_characters (s);
            this->multiplier_parser_->_post_impl ();
            this->multiplier_parser_->post_tUnitMultiplierEnum ();
            this->multiplier ();
          }

          return true;
        }

        return false;
      }

      void tBitRateInMbPerSec_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.unit = false;
      }

      void tBitRateInMbPerSec_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.unit)
          this->_expected_attribute (
            "", "unit");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tDurationInSec_pskel.
      //
      bool tDurationInSec_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "unit" && ns.empty ())
        {
          if (this->unit_parser_)
          {
            this->unit_parser_->pre ();
            this->unit_parser_->_pre_impl ();
            this->unit_parser_->_characters (s);
            this->unit_parser_->_post_impl ();
            this->unit_parser_->post_tSIUnitEnum ();
            this->unit ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->unit = true;
          return true;
        }

        if (n == "multiplier" && ns.empty ())
        {
          if (this->multiplier_parser_)
          {
            this->multiplier_parser_->pre ();
            this->multiplier_parser_->_pre_impl ();
            this->multiplier_parser_->_characters (s);
            this->multiplier_parser_->_post_impl ();
            this->multiplier_parser_->post_tUnitMultiplierEnum ();
            this->multiplier ();
          }

          return true;
        }

        return false;
      }

      void tDurationInSec_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.unit = false;
      }

      void tDurationInSec_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.unit)
          this->_expected_attribute (
            "", "unit");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tDurationInMilliSec_pskel.
      //
      bool tDurationInMilliSec_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "unit" && ns.empty ())
        {
          if (this->unit_parser_)
          {
            this->unit_parser_->pre ();
            this->unit_parser_->_pre_impl ();
            this->unit_parser_->_characters (s);
            this->unit_parser_->_post_impl ();
            this->unit_parser_->post_tSIUnitEnum ();
            this->unit ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->unit = true;
          return true;
        }

        if (n == "multiplier" && ns.empty ())
        {
          if (this->multiplier_parser_)
          {
            this->multiplier_parser_->pre ();
            this->multiplier_parser_->_pre_impl ();
            this->multiplier_parser_->_characters (s);
            this->multiplier_parser_->_post_impl ();
            this->multiplier_parser_->post_tUnitMultiplierEnum ();
            this->multiplier ();
          }

          return true;
        }

        return false;
      }

      void tDurationInMilliSec_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.unit = false;
      }

      void tDurationInMilliSec_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.unit)
          this->_expected_attribute (
            "", "unit");

        this->v_state_attr_stack_.pop ();
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Character validation functions for tAnyContentFromOtherNamespace_pskel.
      //
      bool tAnyContentFromOtherNamespace_pskel::
      _characters_impl (const ::xml_schema::ro_string& s)
      {
        this->_any_characters (s);
        return true;
      }

      // Character validation functions for tText_pskel.
      //
      bool tText_pskel::
      _characters_impl (const ::xml_schema::ro_string& s)
      {
        this->_any_characters (s);
        return true;
      }

      // Character validation functions for tPrivate_pskel.
      //
      bool tPrivate_pskel::
      _characters_impl (const ::xml_schema::ro_string& s)
      {
        this->_any_characters (s);
        return true;
      }

      // Character validation functions for tHitem_pskel.
      //
      bool tHitem_pskel::
      _characters_impl (const ::xml_schema::ro_string& s)
      {
        this->_any_characters (s);
        return true;
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

