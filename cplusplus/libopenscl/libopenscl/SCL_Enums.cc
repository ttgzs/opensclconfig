// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SCL_Enums.h"

namespace IEC61850
{
  namespace SCL
  {
    // tPredefinedPTypeEnum
    // 

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (value v)
    : ::xml_schema::name (_xsd_tPredefinedPTypeEnum_literals_[v])
    {
    }

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (const tPredefinedPTypeEnum& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPredefinedPTypeEnum& tPredefinedPTypeEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPredefinedPTypeEnum_literals_[v]);

      return *this;
    }


    // tExtensionPTypeEnum
    // 


    // tPTypeEnum
    //

    tPTypeEnum::
    tPTypeEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tPTypeEnum::
    tPTypeEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tPTypeEnum::
    tPTypeEnum (const tPTypeEnum& o,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tPredefinedAttributeNameEnum
    // 

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (value v)
    : ::xml_schema::name (_xsd_tPredefinedAttributeNameEnum_literals_[v])
    {
    }

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (const tPredefinedAttributeNameEnum& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPredefinedAttributeNameEnum& tPredefinedAttributeNameEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPredefinedAttributeNameEnum_literals_[v]);

      return *this;
    }


    // tExtensionAttributeNameEnum
    // 


    // tAttributeNameEnum
    //

    tAttributeNameEnum::
    tAttributeNameEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tAttributeNameEnum::
    tAttributeNameEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tAttributeNameEnum::
    tAttributeNameEnum (const tAttributeNameEnum& o,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tPredefinedCommonConductingEquipmentEnum
    // 

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (value v)
    : ::xml_schema::name (_xsd_tPredefinedCommonConductingEquipmentEnum_literals_[v])
    {
    }

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (const tPredefinedCommonConductingEquipmentEnum& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPredefinedCommonConductingEquipmentEnum& tPredefinedCommonConductingEquipmentEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPredefinedCommonConductingEquipmentEnum_literals_[v]);

      return *this;
    }


    // tExtensionEquipmentEnum
    // 


    // tCommonConductingEquipmentEnum
    //

    tCommonConductingEquipmentEnum::
    tCommonConductingEquipmentEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tCommonConductingEquipmentEnum::
    tCommonConductingEquipmentEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tCommonConductingEquipmentEnum::
    tCommonConductingEquipmentEnum (const tCommonConductingEquipmentEnum& o,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tPowerTransformerEnum
    // 

    tPowerTransformerEnum::
    tPowerTransformerEnum (value v)
    : ::xml_schema::name (_xsd_tPowerTransformerEnum_literals_[v])
    {
    }

    tPowerTransformerEnum::
    tPowerTransformerEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPowerTransformerEnum::
    tPowerTransformerEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPowerTransformerEnum::
    tPowerTransformerEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPowerTransformerEnum::
    tPowerTransformerEnum (const tPowerTransformerEnum& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPowerTransformerEnum& tPowerTransformerEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPowerTransformerEnum_literals_[v]);

      return *this;
    }


    // tTransformerWindingEnum
    // 

    tTransformerWindingEnum::
    tTransformerWindingEnum (value v)
    : ::xml_schema::name (_xsd_tTransformerWindingEnum_literals_[v])
    {
    }

    tTransformerWindingEnum::
    tTransformerWindingEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tTransformerWindingEnum::
    tTransformerWindingEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tTransformerWindingEnum::
    tTransformerWindingEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tTransformerWindingEnum::
    tTransformerWindingEnum (const tTransformerWindingEnum& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tTransformerWindingEnum& tTransformerWindingEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tTransformerWindingEnum_literals_[v]);

      return *this;
    }


    // tPredefinedEquipmentEnum
    //

    tPredefinedEquipmentEnum::
    tPredefinedEquipmentEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tPredefinedEquipmentEnum::
    tPredefinedEquipmentEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tPredefinedEquipmentEnum::
    tPredefinedEquipmentEnum (const tPredefinedEquipmentEnum& o,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tEquipmentEnum
    //

    tEquipmentEnum::
    tEquipmentEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tEquipmentEnum::
    tEquipmentEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tEquipmentEnum::
    tEquipmentEnum (const tEquipmentEnum& o,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tPredefinedGeneralEquipmentEnum
    // 

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (value v)
    : ::xml_schema::name (_xsd_tPredefinedGeneralEquipmentEnum_literals_[v])
    {
    }

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (const tPredefinedGeneralEquipmentEnum& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPredefinedGeneralEquipmentEnum& tPredefinedGeneralEquipmentEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPredefinedGeneralEquipmentEnum_literals_[v]);

      return *this;
    }


    // tExtensionGeneralEquipmentEnum
    // 


    // tGeneralEquipmentEnum
    //

    tGeneralEquipmentEnum::
    tGeneralEquipmentEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tGeneralEquipmentEnum::
    tGeneralEquipmentEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tGeneralEquipmentEnum::
    tGeneralEquipmentEnum (const tGeneralEquipmentEnum& o,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tServiceSettingsEnum
    // 

    tServiceSettingsEnum::
    tServiceSettingsEnum (value v)
    : ::xml_schema::name (_xsd_tServiceSettingsEnum_literals_[v])
    {
    }

    tServiceSettingsEnum::
    tServiceSettingsEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tServiceSettingsEnum::
    tServiceSettingsEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tServiceSettingsEnum::
    tServiceSettingsEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tServiceSettingsEnum::
    tServiceSettingsEnum (const tServiceSettingsEnum& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tServiceSettingsEnum& tServiceSettingsEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tServiceSettingsEnum_literals_[v]);

      return *this;
    }


    // tPhaseEnum
    // 

    tPhaseEnum::
    tPhaseEnum (value v)
    : ::xml_schema::name (_xsd_tPhaseEnum_literals_[v])
    {
    }

    tPhaseEnum::
    tPhaseEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPhaseEnum::
    tPhaseEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPhaseEnum::
    tPhaseEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPhaseEnum::
    tPhaseEnum (const tPhaseEnum& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPhaseEnum& tPhaseEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPhaseEnum_literals_[v]);

      return *this;
    }


    // tAuthenticationEnum
    // 

    tAuthenticationEnum::
    tAuthenticationEnum (value v)
    : ::xml_schema::name (_xsd_tAuthenticationEnum_literals_[v])
    {
    }

    tAuthenticationEnum::
    tAuthenticationEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tAuthenticationEnum::
    tAuthenticationEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tAuthenticationEnum::
    tAuthenticationEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tAuthenticationEnum::
    tAuthenticationEnum (const tAuthenticationEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tAuthenticationEnum& tAuthenticationEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tAuthenticationEnum_literals_[v]);

      return *this;
    }


    // tAssociationKindEnum
    // 

    tAssociationKindEnum::
    tAssociationKindEnum (value v)
    : ::xml_schema::token (_xsd_tAssociationKindEnum_literals_[v])
    {
    }

    tAssociationKindEnum::
    tAssociationKindEnum (const char* v)
    : ::xml_schema::token (v)
    {
    }

    tAssociationKindEnum::
    tAssociationKindEnum (const ::std::string& v)
    : ::xml_schema::token (v)
    {
    }

    tAssociationKindEnum::
    tAssociationKindEnum (const ::xml_schema::token& v)
    : ::xml_schema::token (v)
    {
    }

    tAssociationKindEnum::
    tAssociationKindEnum (const tAssociationKindEnum& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::token (v, f, c)
    {
    }

    tAssociationKindEnum& tAssociationKindEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::token& > (*this) = 
      ::xml_schema::token (_xsd_tAssociationKindEnum_literals_[v]);

      return *this;
    }


    // tLPHDEnum
    // 

    tLPHDEnum::
    tLPHDEnum (value v)
    : ::xml_schema::name (_xsd_tLPHDEnum_literals_[v])
    {
    }

    tLPHDEnum::
    tLPHDEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tLPHDEnum::
    tLPHDEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tLPHDEnum::
    tLPHDEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tLPHDEnum::
    tLPHDEnum (const tLPHDEnum& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tLPHDEnum& tLPHDEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tLPHDEnum_literals_[v]);

      return *this;
    }


    // tLLN0Enum
    // 

    tLLN0Enum::
    tLLN0Enum (value v)
    : ::xml_schema::name (_xsd_tLLN0Enum_literals_[v])
    {
    }

    tLLN0Enum::
    tLLN0Enum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tLLN0Enum::
    tLLN0Enum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tLLN0Enum::
    tLLN0Enum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tLLN0Enum::
    tLLN0Enum (const tLLN0Enum& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tLLN0Enum& tLLN0Enum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tLLN0Enum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupAEnum
    // 

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupAEnum_literals_[v])
    {
    }

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (const tDomainLNGroupAEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupAEnum& tDomainLNGroupAEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupAEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupCEnum
    // 

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupCEnum_literals_[v])
    {
    }

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (const tDomainLNGroupCEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupCEnum& tDomainLNGroupCEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupCEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupGEnum
    // 

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupGEnum_literals_[v])
    {
    }

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (const tDomainLNGroupGEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupGEnum& tDomainLNGroupGEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupGEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupIEnum
    // 

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupIEnum_literals_[v])
    {
    }

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (const tDomainLNGroupIEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupIEnum& tDomainLNGroupIEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupIEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupMEnum
    // 

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupMEnum_literals_[v])
    {
    }

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (const tDomainLNGroupMEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupMEnum& tDomainLNGroupMEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupMEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupPEnum
    // 

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupPEnum_literals_[v])
    {
    }

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (const tDomainLNGroupPEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupPEnum& tDomainLNGroupPEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupPEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupREnum
    // 

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupREnum_literals_[v])
    {
    }

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (const tDomainLNGroupREnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupREnum& tDomainLNGroupREnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupREnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupSEnum
    // 

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupSEnum_literals_[v])
    {
    }

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (const tDomainLNGroupSEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupSEnum& tDomainLNGroupSEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupSEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupTEnum
    // 

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupTEnum_literals_[v])
    {
    }

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (const tDomainLNGroupTEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupTEnum& tDomainLNGroupTEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupTEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupXEnum
    // 

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupXEnum_literals_[v])
    {
    }

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (const tDomainLNGroupXEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupXEnum& tDomainLNGroupXEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupXEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupYEnum
    // 

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupYEnum_literals_[v])
    {
    }

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (const tDomainLNGroupYEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupYEnum& tDomainLNGroupYEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupYEnum_literals_[v]);

      return *this;
    }


    // tDomainLNGroupZEnum
    // 

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (value v)
    : ::xml_schema::name (_xsd_tDomainLNGroupZEnum_literals_[v])
    {
    }

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (const tDomainLNGroupZEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tDomainLNGroupZEnum& tDomainLNGroupZEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tDomainLNGroupZEnum_literals_[v]);

      return *this;
    }


    // tDomainLNEnum
    //

    tDomainLNEnum::
    tDomainLNEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tDomainLNEnum::
    tDomainLNEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tDomainLNEnum::
    tDomainLNEnum (const tDomainLNEnum& o,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tPredefinedLNClassEnum
    //

    tPredefinedLNClassEnum::
    tPredefinedLNClassEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tPredefinedLNClassEnum::
    tPredefinedLNClassEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tPredefinedLNClassEnum::
    tPredefinedLNClassEnum (const tPredefinedLNClassEnum& o,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tExtensionLNClassEnum
    // 


    // tLNClassEnum
    //

    tLNClassEnum::
    tLNClassEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tLNClassEnum::
    tLNClassEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tLNClassEnum::
    tLNClassEnum (const tLNClassEnum& o,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tPredefinedCDCEnum
    // 

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (value v)
    : ::xml_schema::name (_xsd_tPredefinedCDCEnum_literals_[v])
    {
    }

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (const tPredefinedCDCEnum& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPredefinedCDCEnum& tPredefinedCDCEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPredefinedCDCEnum_literals_[v]);

      return *this;
    }


    // tExtensionCDCEnum
    // 


    // tCDCEnum
    //

    tCDCEnum::
    tCDCEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tCDCEnum::
    tCDCEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tCDCEnum::
    tCDCEnum (const tCDCEnum& o,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tTrgOptEnum
    // 

    tTrgOptEnum::
    tTrgOptEnum (value v)
    : ::xml_schema::name (_xsd_tTrgOptEnum_literals_[v])
    {
    }

    tTrgOptEnum::
    tTrgOptEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tTrgOptEnum::
    tTrgOptEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tTrgOptEnum::
    tTrgOptEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tTrgOptEnum::
    tTrgOptEnum (const tTrgOptEnum& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tTrgOptEnum& tTrgOptEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tTrgOptEnum_literals_[v]);

      return *this;
    }


    // tTrgOptControlEnum
    // 

    tTrgOptControlEnum::
    tTrgOptControlEnum (value v)
    : ::xml_schema::name (_xsd_tTrgOptControlEnum_literals_[v])
    {
    }

    tTrgOptControlEnum::
    tTrgOptControlEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tTrgOptControlEnum::
    tTrgOptControlEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tTrgOptControlEnum::
    tTrgOptControlEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tTrgOptControlEnum::
    tTrgOptControlEnum (const tTrgOptControlEnum& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tTrgOptControlEnum& tTrgOptControlEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tTrgOptControlEnum_literals_[v]);

      return *this;
    }


    // tFCEnum
    // 

    tFCEnum::
    tFCEnum (value v)
    : ::xml_schema::name (_xsd_tFCEnum_literals_[v])
    {
    }

    tFCEnum::
    tFCEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tFCEnum::
    tFCEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tFCEnum::
    tFCEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tFCEnum::
    tFCEnum (const tFCEnum& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tFCEnum& tFCEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tFCEnum_literals_[v]);

      return *this;
    }


    // tServiceFCEnum
    // 

    tServiceFCEnum::
    tServiceFCEnum (value v)
    : ::xml_schema::name (_xsd_tServiceFCEnum_literals_[v])
    {
    }

    tServiceFCEnum::
    tServiceFCEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tServiceFCEnum::
    tServiceFCEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tServiceFCEnum::
    tServiceFCEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tServiceFCEnum::
    tServiceFCEnum (const tServiceFCEnum& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tServiceFCEnum& tServiceFCEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tServiceFCEnum_literals_[v]);

      return *this;
    }


    // tPredefinedBasicTypeEnum
    // 

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (value v)
    : ::xml_schema::name (_xsd_tPredefinedBasicTypeEnum_literals_[v])
    {
    }

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (const tPredefinedBasicTypeEnum& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tPredefinedBasicTypeEnum& tPredefinedBasicTypeEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tPredefinedBasicTypeEnum_literals_[v]);

      return *this;
    }


    // tExtensionBasicTypeEnum
    // 


    // tBasicTypeEnum
    //

    tBasicTypeEnum::
    tBasicTypeEnum (const char* s)
    : ::xml_schema::string (s)
    {
    }

    tBasicTypeEnum::
    tBasicTypeEnum (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    tBasicTypeEnum::
    tBasicTypeEnum (const tBasicTypeEnum& o,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // tValKindEnum
    // 

    tValKindEnum::
    tValKindEnum (value v)
    : ::xml_schema::name (_xsd_tValKindEnum_literals_[v])
    {
    }

    tValKindEnum::
    tValKindEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tValKindEnum::
    tValKindEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tValKindEnum::
    tValKindEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tValKindEnum::
    tValKindEnum (const tValKindEnum& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tValKindEnum& tValKindEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tValKindEnum_literals_[v]);

      return *this;
    }


    // tGSEControlTypeEnum
    // 

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (value v)
    : ::xml_schema::name (_xsd_tGSEControlTypeEnum_literals_[v])
    {
    }

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (const char* v)
    : ::xml_schema::name (v)
    {
    }

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (const ::std::string& v)
    : ::xml_schema::name (v)
    {
    }

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (const ::xml_schema::name& v)
    : ::xml_schema::name (v)
    {
    }

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (const tGSEControlTypeEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (v, f, c)
    {
    }

    tGSEControlTypeEnum& tGSEControlTypeEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::name& > (*this) = 
      ::xml_schema::name (_xsd_tGSEControlTypeEnum_literals_[v]);

      return *this;
    }


    // tSIUnitEnum
    // 

    tSIUnitEnum::
    tSIUnitEnum (value v)
    : ::xml_schema::token (_xsd_tSIUnitEnum_literals_[v])
    {
    }

    tSIUnitEnum::
    tSIUnitEnum (const char* v)
    : ::xml_schema::token (v)
    {
    }

    tSIUnitEnum::
    tSIUnitEnum (const ::std::string& v)
    : ::xml_schema::token (v)
    {
    }

    tSIUnitEnum::
    tSIUnitEnum (const ::xml_schema::token& v)
    : ::xml_schema::token (v)
    {
    }

    tSIUnitEnum::
    tSIUnitEnum (const tSIUnitEnum& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::token (v, f, c)
    {
    }

    tSIUnitEnum& tSIUnitEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::token& > (*this) = 
      ::xml_schema::token (_xsd_tSIUnitEnum_literals_[v]);

      return *this;
    }


    // tUnitMultiplierEnum
    // 

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (value v)
    : ::xml_schema::normalized_string (_xsd_tUnitMultiplierEnum_literals_[v])
    {
    }

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (const char* v)
    : ::xml_schema::normalized_string (v)
    {
    }

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (const ::std::string& v)
    : ::xml_schema::normalized_string (v)
    {
    }

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (const ::xml_schema::normalized_string& v)
    : ::xml_schema::normalized_string (v)
    {
    }

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (const tUnitMultiplierEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (v, f, c)
    {
    }

    tUnitMultiplierEnum& tUnitMultiplierEnum::
    operator= (value v)
    {
      static_cast< ::xml_schema::normalized_string& > (*this) = 
      ::xml_schema::normalized_string (_xsd_tUnitMultiplierEnum_literals_[v]);

      return *this;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace IEC61850
{
  namespace SCL
  {
    // tPredefinedPTypeEnum
    //

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPredefinedPTypeEnum_convert ();
    }

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPredefinedPTypeEnum_convert ();
    }

    tPredefinedPTypeEnum::
    tPredefinedPTypeEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPredefinedPTypeEnum_convert ();
    }

    tPredefinedPTypeEnum* tPredefinedPTypeEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedPTypeEnum (*this, f, c);
    }

    tPredefinedPTypeEnum::value tPredefinedPTypeEnum::
    _xsd_tPredefinedPTypeEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedPTypeEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPredefinedPTypeEnum_indexes_,
                        _xsd_tPredefinedPTypeEnum_indexes_ + 15,
                        *this,
                        c));

      if (i == _xsd_tPredefinedPTypeEnum_indexes_ + 15 || _xsd_tPredefinedPTypeEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPredefinedPTypeEnum::
    _xsd_tPredefinedPTypeEnum_literals_[15] =
    {
      "IP",
      "IP-SUBNET",
      "IP-GATEWAY",
      "OSI-NSAP",
      "OSI-TSEL",
      "OSI-SSEL",
      "OSI-PSEL",
      "OSI-AP-Title",
      "OSI-AP-Invoke",
      "OSI-AE-Qualifier",
      "OSI-AE-Invoke",
      "MAC-Address",
      "APPID",
      "VLAN-PRIORITY",
      "VLAN-ID"
    };

    const tPredefinedPTypeEnum::value tPredefinedPTypeEnum::
    _xsd_tPredefinedPTypeEnum_indexes_[15] =
    {
      ::IEC61850::SCL::tPredefinedPTypeEnum::APPID,
      ::IEC61850::SCL::tPredefinedPTypeEnum::IP,
      ::IEC61850::SCL::tPredefinedPTypeEnum::IP_GATEWAY,
      ::IEC61850::SCL::tPredefinedPTypeEnum::IP_SUBNET,
      ::IEC61850::SCL::tPredefinedPTypeEnum::MAC_Address,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_AE_Invoke,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_AE_Qualifier,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_AP_Invoke,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_AP_Title,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_NSAP,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_PSEL,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_SSEL,
      ::IEC61850::SCL::tPredefinedPTypeEnum::OSI_TSEL,
      ::IEC61850::SCL::tPredefinedPTypeEnum::VLAN_ID,
      ::IEC61850::SCL::tPredefinedPTypeEnum::VLAN_PRIORITY
    };

    // tExtensionPTypeEnum
    //

    tExtensionPTypeEnum::
    tExtensionPTypeEnum ()
    : ::xml_schema::normalized_string ()
    {
    }

    tExtensionPTypeEnum::
    tExtensionPTypeEnum (const char* _xsd_normalized_string_base)
    : ::xml_schema::normalized_string (_xsd_normalized_string_base)
    {
    }

    tExtensionPTypeEnum::
    tExtensionPTypeEnum (const ::std::string& _xsd_normalized_string_base)
    : ::xml_schema::normalized_string (_xsd_normalized_string_base)
    {
    }

    tExtensionPTypeEnum::
    tExtensionPTypeEnum (const ::xml_schema::normalized_string& _xsd_normalized_string_base)
    : ::xml_schema::normalized_string (_xsd_normalized_string_base)
    {
    }

    tExtensionPTypeEnum::
    tExtensionPTypeEnum (const tExtensionPTypeEnum& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (x, f, c)
    {
    }

    tExtensionPTypeEnum::
    tExtensionPTypeEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (e, f, c)
    {
    }

    tExtensionPTypeEnum::
    tExtensionPTypeEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (a, f, c)
    {
    }

    tExtensionPTypeEnum::
    tExtensionPTypeEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (s, e, f, c)
    {
    }

    tExtensionPTypeEnum* tExtensionPTypeEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tExtensionPTypeEnum (*this, f, c);
    }

    tExtensionPTypeEnum::
    ~tExtensionPTypeEnum ()
    {
    }

    // tPTypeEnum
    //

    tPTypeEnum::
    tPTypeEnum (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tPTypeEnum::
    tPTypeEnum (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tPTypeEnum::
    tPTypeEnum (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tPTypeEnum* tPTypeEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPTypeEnum (*this, f, c);
    }

    // tPredefinedAttributeNameEnum
    //

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPredefinedAttributeNameEnum_convert ();
    }

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPredefinedAttributeNameEnum_convert ();
    }

    tPredefinedAttributeNameEnum::
    tPredefinedAttributeNameEnum (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPredefinedAttributeNameEnum_convert ();
    }

    tPredefinedAttributeNameEnum* tPredefinedAttributeNameEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedAttributeNameEnum (*this, f, c);
    }

    tPredefinedAttributeNameEnum::value tPredefinedAttributeNameEnum::
    _xsd_tPredefinedAttributeNameEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedAttributeNameEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPredefinedAttributeNameEnum_indexes_,
                        _xsd_tPredefinedAttributeNameEnum_indexes_ + 8,
                        *this,
                        c));

      if (i == _xsd_tPredefinedAttributeNameEnum_indexes_ + 8 || _xsd_tPredefinedAttributeNameEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPredefinedAttributeNameEnum::
    _xsd_tPredefinedAttributeNameEnum_literals_[8] =
    {
      "T",
      "Test",
      "Check",
      "SIUnit",
      "Oper",
      "SBO",
      "SBOw",
      "Cancel"
    };

    const tPredefinedAttributeNameEnum::value tPredefinedAttributeNameEnum::
    _xsd_tPredefinedAttributeNameEnum_indexes_[8] =
    {
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::Cancel,
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::Check,
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::Oper,
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::SBO,
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::SBOw,
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::SIUnit,
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::T,
      ::IEC61850::SCL::tPredefinedAttributeNameEnum::Test
    };

    // tExtensionAttributeNameEnum
    //

    tExtensionAttributeNameEnum::
    tExtensionAttributeNameEnum (const char* _xsd_name_base)
    : ::IEC61850::SCL::tRestrName1stL (_xsd_name_base)
    {
    }

    tExtensionAttributeNameEnum::
    tExtensionAttributeNameEnum (const ::std::string& _xsd_name_base)
    : ::IEC61850::SCL::tRestrName1stL (_xsd_name_base)
    {
    }

    tExtensionAttributeNameEnum::
    tExtensionAttributeNameEnum (const ::xml_schema::name& _xsd_name_base)
    : ::IEC61850::SCL::tRestrName1stL (_xsd_name_base)
    {
    }

    tExtensionAttributeNameEnum::
    tExtensionAttributeNameEnum (const tExtensionAttributeNameEnum& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::IEC61850::SCL::tRestrName1stL (x, f, c)
    {
    }

    tExtensionAttributeNameEnum::
    tExtensionAttributeNameEnum (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::IEC61850::SCL::tRestrName1stL (e, f, c)
    {
    }

    tExtensionAttributeNameEnum::
    tExtensionAttributeNameEnum (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::IEC61850::SCL::tRestrName1stL (a, f, c)
    {
    }

    tExtensionAttributeNameEnum::
    tExtensionAttributeNameEnum (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::IEC61850::SCL::tRestrName1stL (s, e, f, c)
    {
    }

    tExtensionAttributeNameEnum* tExtensionAttributeNameEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tExtensionAttributeNameEnum (*this, f, c);
    }

    tExtensionAttributeNameEnum::
    ~tExtensionAttributeNameEnum ()
    {
    }

    // tAttributeNameEnum
    //

    tAttributeNameEnum::
    tAttributeNameEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tAttributeNameEnum::
    tAttributeNameEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tAttributeNameEnum::
    tAttributeNameEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tAttributeNameEnum* tAttributeNameEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tAttributeNameEnum (*this, f, c);
    }

    // tPredefinedCommonConductingEquipmentEnum
    //

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPredefinedCommonConductingEquipmentEnum_convert ();
    }

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPredefinedCommonConductingEquipmentEnum_convert ();
    }

    tPredefinedCommonConductingEquipmentEnum::
    tPredefinedCommonConductingEquipmentEnum (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPredefinedCommonConductingEquipmentEnum_convert ();
    }

    tPredefinedCommonConductingEquipmentEnum* tPredefinedCommonConductingEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedCommonConductingEquipmentEnum (*this, f, c);
    }

    tPredefinedCommonConductingEquipmentEnum::value tPredefinedCommonConductingEquipmentEnum::
    _xsd_tPredefinedCommonConductingEquipmentEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedCommonConductingEquipmentEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_,
                        _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_ + 21,
                        *this,
                        c));

      if (i == _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_ + 21 || _xsd_tPredefinedCommonConductingEquipmentEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPredefinedCommonConductingEquipmentEnum::
    _xsd_tPredefinedCommonConductingEquipmentEnum_literals_[21] =
    {
      "CBR",
      "DIS",
      "VTR",
      "CTR",
      "GEN",
      "CAP",
      "REA",
      "CON",
      "MOT",
      "EFN",
      "PSH",
      "BAT",
      "BSH",
      "CAB",
      "GIL",
      "LIN",
      "RRC",
      "SAR",
      "TCF",
      "TCR",
      "IFL"
    };

    const tPredefinedCommonConductingEquipmentEnum::value tPredefinedCommonConductingEquipmentEnum::
    _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_[21] =
    {
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::BAT,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::BSH,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::CAB,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::CAP,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::CBR,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::CON,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::CTR,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::DIS,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::EFN,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::GEN,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::GIL,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::IFL,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::LIN,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::MOT,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::PSH,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::REA,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::RRC,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::SAR,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::TCF,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::TCR,
      ::IEC61850::SCL::tPredefinedCommonConductingEquipmentEnum::VTR
    };

    // tExtensionEquipmentEnum
    //

    tExtensionEquipmentEnum::
    tExtensionEquipmentEnum (const char* _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionEquipmentEnum::
    tExtensionEquipmentEnum (const ::std::string& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionEquipmentEnum::
    tExtensionEquipmentEnum (const ::xml_schema::name& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionEquipmentEnum::
    tExtensionEquipmentEnum (const tExtensionEquipmentEnum& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (x, f, c)
    {
    }

    tExtensionEquipmentEnum::
    tExtensionEquipmentEnum (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
    }

    tExtensionEquipmentEnum::
    tExtensionEquipmentEnum (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
    }

    tExtensionEquipmentEnum::
    tExtensionEquipmentEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
    }

    tExtensionEquipmentEnum* tExtensionEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tExtensionEquipmentEnum (*this, f, c);
    }

    tExtensionEquipmentEnum::
    ~tExtensionEquipmentEnum ()
    {
    }

    // tCommonConductingEquipmentEnum
    //

    tCommonConductingEquipmentEnum::
    tCommonConductingEquipmentEnum (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tCommonConductingEquipmentEnum::
    tCommonConductingEquipmentEnum (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tCommonConductingEquipmentEnum::
    tCommonConductingEquipmentEnum (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tCommonConductingEquipmentEnum* tCommonConductingEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tCommonConductingEquipmentEnum (*this, f, c);
    }

    // tPowerTransformerEnum
    //

    tPowerTransformerEnum::
    tPowerTransformerEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPowerTransformerEnum_convert ();
    }

    tPowerTransformerEnum::
    tPowerTransformerEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPowerTransformerEnum_convert ();
    }

    tPowerTransformerEnum::
    tPowerTransformerEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPowerTransformerEnum_convert ();
    }

    tPowerTransformerEnum* tPowerTransformerEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPowerTransformerEnum (*this, f, c);
    }

    tPowerTransformerEnum::value tPowerTransformerEnum::
    _xsd_tPowerTransformerEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPowerTransformerEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPowerTransformerEnum_indexes_,
                        _xsd_tPowerTransformerEnum_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_tPowerTransformerEnum_indexes_ + 1 || _xsd_tPowerTransformerEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPowerTransformerEnum::
    _xsd_tPowerTransformerEnum_literals_[1] =
    {
      "PTR"
    };

    const tPowerTransformerEnum::value tPowerTransformerEnum::
    _xsd_tPowerTransformerEnum_indexes_[1] =
    {
      ::IEC61850::SCL::tPowerTransformerEnum::PTR
    };

    // tTransformerWindingEnum
    //

    tTransformerWindingEnum::
    tTransformerWindingEnum (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tTransformerWindingEnum_convert ();
    }

    tTransformerWindingEnum::
    tTransformerWindingEnum (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tTransformerWindingEnum_convert ();
    }

    tTransformerWindingEnum::
    tTransformerWindingEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tTransformerWindingEnum_convert ();
    }

    tTransformerWindingEnum* tTransformerWindingEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tTransformerWindingEnum (*this, f, c);
    }

    tTransformerWindingEnum::value tTransformerWindingEnum::
    _xsd_tTransformerWindingEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tTransformerWindingEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tTransformerWindingEnum_indexes_,
                        _xsd_tTransformerWindingEnum_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_tTransformerWindingEnum_indexes_ + 1 || _xsd_tTransformerWindingEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tTransformerWindingEnum::
    _xsd_tTransformerWindingEnum_literals_[1] =
    {
      "PTW"
    };

    const tTransformerWindingEnum::value tTransformerWindingEnum::
    _xsd_tTransformerWindingEnum_indexes_[1] =
    {
      ::IEC61850::SCL::tTransformerWindingEnum::PTW
    };

    // tPredefinedEquipmentEnum
    //

    tPredefinedEquipmentEnum::
    tPredefinedEquipmentEnum (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tPredefinedEquipmentEnum::
    tPredefinedEquipmentEnum (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tPredefinedEquipmentEnum::
    tPredefinedEquipmentEnum (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tPredefinedEquipmentEnum* tPredefinedEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedEquipmentEnum (*this, f, c);
    }

    // tEquipmentEnum
    //

    tEquipmentEnum::
    tEquipmentEnum (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tEquipmentEnum::
    tEquipmentEnum (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tEquipmentEnum::
    tEquipmentEnum (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tEquipmentEnum* tEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tEquipmentEnum (*this, f, c);
    }

    // tPredefinedGeneralEquipmentEnum
    //

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPredefinedGeneralEquipmentEnum_convert ();
    }

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPredefinedGeneralEquipmentEnum_convert ();
    }

    tPredefinedGeneralEquipmentEnum::
    tPredefinedGeneralEquipmentEnum (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPredefinedGeneralEquipmentEnum_convert ();
    }

    tPredefinedGeneralEquipmentEnum* tPredefinedGeneralEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedGeneralEquipmentEnum (*this, f, c);
    }

    tPredefinedGeneralEquipmentEnum::value tPredefinedGeneralEquipmentEnum::
    _xsd_tPredefinedGeneralEquipmentEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedGeneralEquipmentEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPredefinedGeneralEquipmentEnum_indexes_,
                        _xsd_tPredefinedGeneralEquipmentEnum_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_tPredefinedGeneralEquipmentEnum_indexes_ + 3 || _xsd_tPredefinedGeneralEquipmentEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPredefinedGeneralEquipmentEnum::
    _xsd_tPredefinedGeneralEquipmentEnum_literals_[3] =
    {
      "AXN",
      "BAT",
      "MOT"
    };

    const tPredefinedGeneralEquipmentEnum::value tPredefinedGeneralEquipmentEnum::
    _xsd_tPredefinedGeneralEquipmentEnum_indexes_[3] =
    {
      ::IEC61850::SCL::tPredefinedGeneralEquipmentEnum::AXN,
      ::IEC61850::SCL::tPredefinedGeneralEquipmentEnum::BAT,
      ::IEC61850::SCL::tPredefinedGeneralEquipmentEnum::MOT
    };

    // tExtensionGeneralEquipmentEnum
    //

    tExtensionGeneralEquipmentEnum::
    tExtensionGeneralEquipmentEnum (const char* _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionGeneralEquipmentEnum::
    tExtensionGeneralEquipmentEnum (const ::std::string& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionGeneralEquipmentEnum::
    tExtensionGeneralEquipmentEnum (const ::xml_schema::name& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionGeneralEquipmentEnum::
    tExtensionGeneralEquipmentEnum (const tExtensionGeneralEquipmentEnum& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::name (x, f, c)
    {
    }

    tExtensionGeneralEquipmentEnum::
    tExtensionGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
    }

    tExtensionGeneralEquipmentEnum::
    tExtensionGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
    }

    tExtensionGeneralEquipmentEnum::
    tExtensionGeneralEquipmentEnum (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
    }

    tExtensionGeneralEquipmentEnum* tExtensionGeneralEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tExtensionGeneralEquipmentEnum (*this, f, c);
    }

    tExtensionGeneralEquipmentEnum::
    ~tExtensionGeneralEquipmentEnum ()
    {
    }

    // tGeneralEquipmentEnum
    //

    tGeneralEquipmentEnum::
    tGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tGeneralEquipmentEnum::
    tGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tGeneralEquipmentEnum::
    tGeneralEquipmentEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tGeneralEquipmentEnum* tGeneralEquipmentEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tGeneralEquipmentEnum (*this, f, c);
    }

    // tServiceSettingsEnum
    //

    tServiceSettingsEnum::
    tServiceSettingsEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tServiceSettingsEnum_convert ();
    }

    tServiceSettingsEnum::
    tServiceSettingsEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tServiceSettingsEnum_convert ();
    }

    tServiceSettingsEnum::
    tServiceSettingsEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tServiceSettingsEnum_convert ();
    }

    tServiceSettingsEnum* tServiceSettingsEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tServiceSettingsEnum (*this, f, c);
    }

    tServiceSettingsEnum::value tServiceSettingsEnum::
    _xsd_tServiceSettingsEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tServiceSettingsEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tServiceSettingsEnum_indexes_,
                        _xsd_tServiceSettingsEnum_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_tServiceSettingsEnum_indexes_ + 3 || _xsd_tServiceSettingsEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tServiceSettingsEnum::
    _xsd_tServiceSettingsEnum_literals_[3] =
    {
      "Dyn",
      "Conf",
      "Fix"
    };

    const tServiceSettingsEnum::value tServiceSettingsEnum::
    _xsd_tServiceSettingsEnum_indexes_[3] =
    {
      ::IEC61850::SCL::tServiceSettingsEnum::Conf,
      ::IEC61850::SCL::tServiceSettingsEnum::Dyn,
      ::IEC61850::SCL::tServiceSettingsEnum::Fix
    };

    // tPhaseEnum
    //

    tPhaseEnum::
    tPhaseEnum (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPhaseEnum_convert ();
    }

    tPhaseEnum::
    tPhaseEnum (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPhaseEnum_convert ();
    }

    tPhaseEnum::
    tPhaseEnum (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPhaseEnum_convert ();
    }

    tPhaseEnum* tPhaseEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPhaseEnum (*this, f, c);
    }

    tPhaseEnum::value tPhaseEnum::
    _xsd_tPhaseEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPhaseEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPhaseEnum_indexes_,
                        _xsd_tPhaseEnum_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_tPhaseEnum_indexes_ + 6 || _xsd_tPhaseEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPhaseEnum::
    _xsd_tPhaseEnum_literals_[6] =
    {
      "A",
      "B",
      "C",
      "N",
      "all",
      "none"
    };

    const tPhaseEnum::value tPhaseEnum::
    _xsd_tPhaseEnum_indexes_[6] =
    {
      ::IEC61850::SCL::tPhaseEnum::A,
      ::IEC61850::SCL::tPhaseEnum::B,
      ::IEC61850::SCL::tPhaseEnum::C,
      ::IEC61850::SCL::tPhaseEnum::N,
      ::IEC61850::SCL::tPhaseEnum::all,
      ::IEC61850::SCL::tPhaseEnum::none
    };

    // tAuthenticationEnum
    //

    tAuthenticationEnum::
    tAuthenticationEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tAuthenticationEnum_convert ();
    }

    tAuthenticationEnum::
    tAuthenticationEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tAuthenticationEnum_convert ();
    }

    tAuthenticationEnum::
    tAuthenticationEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tAuthenticationEnum_convert ();
    }

    tAuthenticationEnum* tAuthenticationEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tAuthenticationEnum (*this, f, c);
    }

    tAuthenticationEnum::value tAuthenticationEnum::
    _xsd_tAuthenticationEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tAuthenticationEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tAuthenticationEnum_indexes_,
                        _xsd_tAuthenticationEnum_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_tAuthenticationEnum_indexes_ + 5 || _xsd_tAuthenticationEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tAuthenticationEnum::
    _xsd_tAuthenticationEnum_literals_[5] =
    {
      "none",
      "password",
      "week",
      "strong",
      "certificate"
    };

    const tAuthenticationEnum::value tAuthenticationEnum::
    _xsd_tAuthenticationEnum_indexes_[5] =
    {
      ::IEC61850::SCL::tAuthenticationEnum::certificate,
      ::IEC61850::SCL::tAuthenticationEnum::none,
      ::IEC61850::SCL::tAuthenticationEnum::password,
      ::IEC61850::SCL::tAuthenticationEnum::strong,
      ::IEC61850::SCL::tAuthenticationEnum::week
    };

    // tAssociationKindEnum
    //

    tAssociationKindEnum::
    tAssociationKindEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::token (e, f, c)
    {
      _xsd_tAssociationKindEnum_convert ();
    }

    tAssociationKindEnum::
    tAssociationKindEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::token (a, f, c)
    {
      _xsd_tAssociationKindEnum_convert ();
    }

    tAssociationKindEnum::
    tAssociationKindEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::token (s, e, f, c)
    {
      _xsd_tAssociationKindEnum_convert ();
    }

    tAssociationKindEnum* tAssociationKindEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tAssociationKindEnum (*this, f, c);
    }

    tAssociationKindEnum::value tAssociationKindEnum::
    _xsd_tAssociationKindEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tAssociationKindEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tAssociationKindEnum_indexes_,
                        _xsd_tAssociationKindEnum_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_tAssociationKindEnum_indexes_ + 2 || _xsd_tAssociationKindEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tAssociationKindEnum::
    _xsd_tAssociationKindEnum_literals_[2] =
    {
      "pre-established",
      "predefined"
    };

    const tAssociationKindEnum::value tAssociationKindEnum::
    _xsd_tAssociationKindEnum_indexes_[2] =
    {
      ::IEC61850::SCL::tAssociationKindEnum::pre_established,
      ::IEC61850::SCL::tAssociationKindEnum::predefined
    };

    // tLPHDEnum
    //

    tLPHDEnum::
    tLPHDEnum (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tLPHDEnum_convert ();
    }

    tLPHDEnum::
    tLPHDEnum (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tLPHDEnum_convert ();
    }

    tLPHDEnum::
    tLPHDEnum (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tLPHDEnum_convert ();
    }

    tLPHDEnum* tLPHDEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tLPHDEnum (*this, f, c);
    }

    tLPHDEnum::value tLPHDEnum::
    _xsd_tLPHDEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tLPHDEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tLPHDEnum_indexes_,
                        _xsd_tLPHDEnum_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_tLPHDEnum_indexes_ + 1 || _xsd_tLPHDEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tLPHDEnum::
    _xsd_tLPHDEnum_literals_[1] =
    {
      "LPHD"
    };

    const tLPHDEnum::value tLPHDEnum::
    _xsd_tLPHDEnum_indexes_[1] =
    {
      ::IEC61850::SCL::tLPHDEnum::LPHD
    };

    // tLLN0Enum
    //

    tLLN0Enum::
    tLLN0Enum (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tLLN0Enum_convert ();
    }

    tLLN0Enum::
    tLLN0Enum (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tLLN0Enum_convert ();
    }

    tLLN0Enum::
    tLLN0Enum (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tLLN0Enum_convert ();
    }

    tLLN0Enum* tLLN0Enum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tLLN0Enum (*this, f, c);
    }

    tLLN0Enum::value tLLN0Enum::
    _xsd_tLLN0Enum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tLLN0Enum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tLLN0Enum_indexes_,
                        _xsd_tLLN0Enum_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_tLLN0Enum_indexes_ + 1 || _xsd_tLLN0Enum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tLLN0Enum::
    _xsd_tLLN0Enum_literals_[1] =
    {
      "LLN0"
    };

    const tLLN0Enum::value tLLN0Enum::
    _xsd_tLLN0Enum_indexes_[1] =
    {
      ::IEC61850::SCL::tLLN0Enum::LLN0
    };

    // tDomainLNGroupAEnum
    //

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupAEnum_convert ();
    }

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupAEnum_convert ();
    }

    tDomainLNGroupAEnum::
    tDomainLNGroupAEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupAEnum_convert ();
    }

    tDomainLNGroupAEnum* tDomainLNGroupAEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupAEnum (*this, f, c);
    }

    tDomainLNGroupAEnum::value tDomainLNGroupAEnum::
    _xsd_tDomainLNGroupAEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupAEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupAEnum_indexes_,
                        _xsd_tDomainLNGroupAEnum_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupAEnum_indexes_ + 4 || _xsd_tDomainLNGroupAEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupAEnum::
    _xsd_tDomainLNGroupAEnum_literals_[4] =
    {
      "ANCR",
      "ARCO",
      "ATCC",
      "AVCO"
    };

    const tDomainLNGroupAEnum::value tDomainLNGroupAEnum::
    _xsd_tDomainLNGroupAEnum_indexes_[4] =
    {
      ::IEC61850::SCL::tDomainLNGroupAEnum::ANCR,
      ::IEC61850::SCL::tDomainLNGroupAEnum::ARCO,
      ::IEC61850::SCL::tDomainLNGroupAEnum::ATCC,
      ::IEC61850::SCL::tDomainLNGroupAEnum::AVCO
    };

    // tDomainLNGroupCEnum
    //

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupCEnum_convert ();
    }

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupCEnum_convert ();
    }

    tDomainLNGroupCEnum::
    tDomainLNGroupCEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupCEnum_convert ();
    }

    tDomainLNGroupCEnum* tDomainLNGroupCEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupCEnum (*this, f, c);
    }

    tDomainLNGroupCEnum::value tDomainLNGroupCEnum::
    _xsd_tDomainLNGroupCEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupCEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupCEnum_indexes_,
                        _xsd_tDomainLNGroupCEnum_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupCEnum_indexes_ + 5 || _xsd_tDomainLNGroupCEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupCEnum::
    _xsd_tDomainLNGroupCEnum_literals_[5] =
    {
      "CILO",
      "CSWI",
      "CALH",
      "CCGR",
      "CPOW"
    };

    const tDomainLNGroupCEnum::value tDomainLNGroupCEnum::
    _xsd_tDomainLNGroupCEnum_indexes_[5] =
    {
      ::IEC61850::SCL::tDomainLNGroupCEnum::CALH,
      ::IEC61850::SCL::tDomainLNGroupCEnum::CCGR,
      ::IEC61850::SCL::tDomainLNGroupCEnum::CILO,
      ::IEC61850::SCL::tDomainLNGroupCEnum::CPOW,
      ::IEC61850::SCL::tDomainLNGroupCEnum::CSWI
    };

    // tDomainLNGroupGEnum
    //

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupGEnum_convert ();
    }

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupGEnum_convert ();
    }

    tDomainLNGroupGEnum::
    tDomainLNGroupGEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupGEnum_convert ();
    }

    tDomainLNGroupGEnum* tDomainLNGroupGEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupGEnum (*this, f, c);
    }

    tDomainLNGroupGEnum::value tDomainLNGroupGEnum::
    _xsd_tDomainLNGroupGEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupGEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupGEnum_indexes_,
                        _xsd_tDomainLNGroupGEnum_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupGEnum_indexes_ + 3 || _xsd_tDomainLNGroupGEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupGEnum::
    _xsd_tDomainLNGroupGEnum_literals_[3] =
    {
      "GAPC",
      "GGIO",
      "GSAL"
    };

    const tDomainLNGroupGEnum::value tDomainLNGroupGEnum::
    _xsd_tDomainLNGroupGEnum_indexes_[3] =
    {
      ::IEC61850::SCL::tDomainLNGroupGEnum::GAPC,
      ::IEC61850::SCL::tDomainLNGroupGEnum::GGIO,
      ::IEC61850::SCL::tDomainLNGroupGEnum::GSAL
    };

    // tDomainLNGroupIEnum
    //

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupIEnum_convert ();
    }

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupIEnum_convert ();
    }

    tDomainLNGroupIEnum::
    tDomainLNGroupIEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupIEnum_convert ();
    }

    tDomainLNGroupIEnum* tDomainLNGroupIEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupIEnum (*this, f, c);
    }

    tDomainLNGroupIEnum::value tDomainLNGroupIEnum::
    _xsd_tDomainLNGroupIEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupIEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupIEnum_indexes_,
                        _xsd_tDomainLNGroupIEnum_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupIEnum_indexes_ + 4 || _xsd_tDomainLNGroupIEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupIEnum::
    _xsd_tDomainLNGroupIEnum_literals_[4] =
    {
      "IHMI",
      "IARC",
      "ITCI",
      "ITMI"
    };

    const tDomainLNGroupIEnum::value tDomainLNGroupIEnum::
    _xsd_tDomainLNGroupIEnum_indexes_[4] =
    {
      ::IEC61850::SCL::tDomainLNGroupIEnum::IARC,
      ::IEC61850::SCL::tDomainLNGroupIEnum::IHMI,
      ::IEC61850::SCL::tDomainLNGroupIEnum::ITCI,
      ::IEC61850::SCL::tDomainLNGroupIEnum::ITMI
    };

    // tDomainLNGroupMEnum
    //

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupMEnum_convert ();
    }

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupMEnum_convert ();
    }

    tDomainLNGroupMEnum::
    tDomainLNGroupMEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupMEnum_convert ();
    }

    tDomainLNGroupMEnum* tDomainLNGroupMEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupMEnum (*this, f, c);
    }

    tDomainLNGroupMEnum::value tDomainLNGroupMEnum::
    _xsd_tDomainLNGroupMEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupMEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupMEnum_indexes_,
                        _xsd_tDomainLNGroupMEnum_indexes_ + 8,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupMEnum_indexes_ + 8 || _xsd_tDomainLNGroupMEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupMEnum::
    _xsd_tDomainLNGroupMEnum_literals_[8] =
    {
      "MMXU",
      "MDIF",
      "MHAI",
      "MHAN",
      "MMTR",
      "MMXN",
      "MSQI",
      "MSTA"
    };

    const tDomainLNGroupMEnum::value tDomainLNGroupMEnum::
    _xsd_tDomainLNGroupMEnum_indexes_[8] =
    {
      ::IEC61850::SCL::tDomainLNGroupMEnum::MDIF,
      ::IEC61850::SCL::tDomainLNGroupMEnum::MHAI,
      ::IEC61850::SCL::tDomainLNGroupMEnum::MHAN,
      ::IEC61850::SCL::tDomainLNGroupMEnum::MMTR,
      ::IEC61850::SCL::tDomainLNGroupMEnum::MMXN,
      ::IEC61850::SCL::tDomainLNGroupMEnum::MMXU,
      ::IEC61850::SCL::tDomainLNGroupMEnum::MSQI,
      ::IEC61850::SCL::tDomainLNGroupMEnum::MSTA
    };

    // tDomainLNGroupPEnum
    //

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupPEnum_convert ();
    }

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupPEnum_convert ();
    }

    tDomainLNGroupPEnum::
    tDomainLNGroupPEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupPEnum_convert ();
    }

    tDomainLNGroupPEnum* tDomainLNGroupPEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupPEnum (*this, f, c);
    }

    tDomainLNGroupPEnum::value tDomainLNGroupPEnum::
    _xsd_tDomainLNGroupPEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupPEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupPEnum_indexes_,
                        _xsd_tDomainLNGroupPEnum_indexes_ + 28,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupPEnum_indexes_ + 28 || _xsd_tDomainLNGroupPEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupPEnum::
    _xsd_tDomainLNGroupPEnum_literals_[28] =
    {
      "PDIF",
      "PDIS",
      "PDIR",
      "PDOP",
      "PDUP",
      "PFRC",
      "PHAR",
      "PHIZ",
      "PIOC",
      "PMRI",
      "PMSS",
      "POPF",
      "PPAM",
      "PSCH",
      "PSDE",
      "PTEF",
      "PTOC",
      "PTOF",
      "PTOV",
      "PTRC",
      "PTTR",
      "PTUC",
      "PTUV",
      "PUPF",
      "PTUF",
      "PVOC",
      "PVPH",
      "PZSU"
    };

    const tDomainLNGroupPEnum::value tDomainLNGroupPEnum::
    _xsd_tDomainLNGroupPEnum_indexes_[28] =
    {
      ::IEC61850::SCL::tDomainLNGroupPEnum::PDIF,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PDIR,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PDIS,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PDOP,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PDUP,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PFRC,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PHAR,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PHIZ,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PIOC,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PMRI,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PMSS,
      ::IEC61850::SCL::tDomainLNGroupPEnum::POPF,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PPAM,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PSCH,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PSDE,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTEF,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTOC,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTOF,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTOV,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTRC,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTTR,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTUC,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTUF,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PTUV,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PUPF,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PVOC,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PVPH,
      ::IEC61850::SCL::tDomainLNGroupPEnum::PZSU
    };

    // tDomainLNGroupREnum
    //

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupREnum_convert ();
    }

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupREnum_convert ();
    }

    tDomainLNGroupREnum::
    tDomainLNGroupREnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupREnum_convert ();
    }

    tDomainLNGroupREnum* tDomainLNGroupREnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupREnum (*this, f, c);
    }

    tDomainLNGroupREnum::value tDomainLNGroupREnum::
    _xsd_tDomainLNGroupREnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupREnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupREnum_indexes_,
                        _xsd_tDomainLNGroupREnum_indexes_ + 10,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupREnum_indexes_ + 10 || _xsd_tDomainLNGroupREnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupREnum::
    _xsd_tDomainLNGroupREnum_literals_[10] =
    {
      "RSYN",
      "RDRE",
      "RADR",
      "RBDR",
      "RDRS",
      "RBRF",
      "RDIR",
      "RFLO",
      "RPSB",
      "RREC"
    };

    const tDomainLNGroupREnum::value tDomainLNGroupREnum::
    _xsd_tDomainLNGroupREnum_indexes_[10] =
    {
      ::IEC61850::SCL::tDomainLNGroupREnum::RADR,
      ::IEC61850::SCL::tDomainLNGroupREnum::RBDR,
      ::IEC61850::SCL::tDomainLNGroupREnum::RBRF,
      ::IEC61850::SCL::tDomainLNGroupREnum::RDIR,
      ::IEC61850::SCL::tDomainLNGroupREnum::RDRE,
      ::IEC61850::SCL::tDomainLNGroupREnum::RDRS,
      ::IEC61850::SCL::tDomainLNGroupREnum::RFLO,
      ::IEC61850::SCL::tDomainLNGroupREnum::RPSB,
      ::IEC61850::SCL::tDomainLNGroupREnum::RREC,
      ::IEC61850::SCL::tDomainLNGroupREnum::RSYN
    };

    // tDomainLNGroupSEnum
    //

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupSEnum_convert ();
    }

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupSEnum_convert ();
    }

    tDomainLNGroupSEnum::
    tDomainLNGroupSEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupSEnum_convert ();
    }

    tDomainLNGroupSEnum* tDomainLNGroupSEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupSEnum (*this, f, c);
    }

    tDomainLNGroupSEnum::value tDomainLNGroupSEnum::
    _xsd_tDomainLNGroupSEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupSEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupSEnum_indexes_,
                        _xsd_tDomainLNGroupSEnum_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupSEnum_indexes_ + 4 || _xsd_tDomainLNGroupSEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupSEnum::
    _xsd_tDomainLNGroupSEnum_literals_[4] =
    {
      "SARC",
      "SIMG",
      "SIML",
      "SPDC"
    };

    const tDomainLNGroupSEnum::value tDomainLNGroupSEnum::
    _xsd_tDomainLNGroupSEnum_indexes_[4] =
    {
      ::IEC61850::SCL::tDomainLNGroupSEnum::SARC,
      ::IEC61850::SCL::tDomainLNGroupSEnum::SIMG,
      ::IEC61850::SCL::tDomainLNGroupSEnum::SIML,
      ::IEC61850::SCL::tDomainLNGroupSEnum::SPDC
    };

    // tDomainLNGroupTEnum
    //

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupTEnum_convert ();
    }

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupTEnum_convert ();
    }

    tDomainLNGroupTEnum::
    tDomainLNGroupTEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupTEnum_convert ();
    }

    tDomainLNGroupTEnum* tDomainLNGroupTEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupTEnum (*this, f, c);
    }

    tDomainLNGroupTEnum::value tDomainLNGroupTEnum::
    _xsd_tDomainLNGroupTEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupTEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupTEnum_indexes_,
                        _xsd_tDomainLNGroupTEnum_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupTEnum_indexes_ + 2 || _xsd_tDomainLNGroupTEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupTEnum::
    _xsd_tDomainLNGroupTEnum_literals_[2] =
    {
      "TCTR",
      "TVTR"
    };

    const tDomainLNGroupTEnum::value tDomainLNGroupTEnum::
    _xsd_tDomainLNGroupTEnum_indexes_[2] =
    {
      ::IEC61850::SCL::tDomainLNGroupTEnum::TCTR,
      ::IEC61850::SCL::tDomainLNGroupTEnum::TVTR
    };

    // tDomainLNGroupXEnum
    //

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupXEnum_convert ();
    }

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupXEnum_convert ();
    }

    tDomainLNGroupXEnum::
    tDomainLNGroupXEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupXEnum_convert ();
    }

    tDomainLNGroupXEnum* tDomainLNGroupXEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupXEnum (*this, f, c);
    }

    tDomainLNGroupXEnum::value tDomainLNGroupXEnum::
    _xsd_tDomainLNGroupXEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupXEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupXEnum_indexes_,
                        _xsd_tDomainLNGroupXEnum_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupXEnum_indexes_ + 2 || _xsd_tDomainLNGroupXEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupXEnum::
    _xsd_tDomainLNGroupXEnum_literals_[2] =
    {
      "XCBR",
      "XSWI"
    };

    const tDomainLNGroupXEnum::value tDomainLNGroupXEnum::
    _xsd_tDomainLNGroupXEnum_indexes_[2] =
    {
      ::IEC61850::SCL::tDomainLNGroupXEnum::XCBR,
      ::IEC61850::SCL::tDomainLNGroupXEnum::XSWI
    };

    // tDomainLNGroupYEnum
    //

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupYEnum_convert ();
    }

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupYEnum_convert ();
    }

    tDomainLNGroupYEnum::
    tDomainLNGroupYEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupYEnum_convert ();
    }

    tDomainLNGroupYEnum* tDomainLNGroupYEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupYEnum (*this, f, c);
    }

    tDomainLNGroupYEnum::value tDomainLNGroupYEnum::
    _xsd_tDomainLNGroupYEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupYEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupYEnum_indexes_,
                        _xsd_tDomainLNGroupYEnum_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupYEnum_indexes_ + 4 || _xsd_tDomainLNGroupYEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupYEnum::
    _xsd_tDomainLNGroupYEnum_literals_[4] =
    {
      "YPTR",
      "YEFN",
      "YLTC",
      "YPSH"
    };

    const tDomainLNGroupYEnum::value tDomainLNGroupYEnum::
    _xsd_tDomainLNGroupYEnum_indexes_[4] =
    {
      ::IEC61850::SCL::tDomainLNGroupYEnum::YEFN,
      ::IEC61850::SCL::tDomainLNGroupYEnum::YLTC,
      ::IEC61850::SCL::tDomainLNGroupYEnum::YPSH,
      ::IEC61850::SCL::tDomainLNGroupYEnum::YPTR
    };

    // tDomainLNGroupZEnum
    //

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tDomainLNGroupZEnum_convert ();
    }

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tDomainLNGroupZEnum_convert ();
    }

    tDomainLNGroupZEnum::
    tDomainLNGroupZEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tDomainLNGroupZEnum_convert ();
    }

    tDomainLNGroupZEnum* tDomainLNGroupZEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNGroupZEnum (*this, f, c);
    }

    tDomainLNGroupZEnum::value tDomainLNGroupZEnum::
    _xsd_tDomainLNGroupZEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupZEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tDomainLNGroupZEnum_indexes_,
                        _xsd_tDomainLNGroupZEnum_indexes_ + 15,
                        *this,
                        c));

      if (i == _xsd_tDomainLNGroupZEnum_indexes_ + 15 || _xsd_tDomainLNGroupZEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tDomainLNGroupZEnum::
    _xsd_tDomainLNGroupZEnum_literals_[15] =
    {
      "ZAXN",
      "ZBAT",
      "ZBSH",
      "ZCAB",
      "ZCAP",
      "ZCON",
      "ZGEN",
      "ZGIL",
      "ZLIN",
      "ZMOT",
      "ZREA",
      "ZRRC",
      "ZSAR",
      "ZTCF",
      "ZTCR"
    };

    const tDomainLNGroupZEnum::value tDomainLNGroupZEnum::
    _xsd_tDomainLNGroupZEnum_indexes_[15] =
    {
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZAXN,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZBAT,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZBSH,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZCAB,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZCAP,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZCON,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZGEN,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZGIL,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZLIN,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZMOT,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZREA,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZRRC,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZSAR,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZTCF,
      ::IEC61850::SCL::tDomainLNGroupZEnum::ZTCR
    };

    // tDomainLNEnum
    //

    tDomainLNEnum::
    tDomainLNEnum (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tDomainLNEnum::
    tDomainLNEnum (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tDomainLNEnum::
    tDomainLNEnum (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tDomainLNEnum* tDomainLNEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tDomainLNEnum (*this, f, c);
    }

    // tPredefinedLNClassEnum
    //

    tPredefinedLNClassEnum::
    tPredefinedLNClassEnum (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tPredefinedLNClassEnum::
    tPredefinedLNClassEnum (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tPredefinedLNClassEnum::
    tPredefinedLNClassEnum (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tPredefinedLNClassEnum* tPredefinedLNClassEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedLNClassEnum (*this, f, c);
    }

    // tExtensionLNClassEnum
    //

    tExtensionLNClassEnum::
    tExtensionLNClassEnum (const char* _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionLNClassEnum::
    tExtensionLNClassEnum (const ::std::string& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionLNClassEnum::
    tExtensionLNClassEnum (const ::xml_schema::name& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionLNClassEnum::
    tExtensionLNClassEnum (const tExtensionLNClassEnum& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (x, f, c)
    {
    }

    tExtensionLNClassEnum::
    tExtensionLNClassEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
    }

    tExtensionLNClassEnum::
    tExtensionLNClassEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
    }

    tExtensionLNClassEnum::
    tExtensionLNClassEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
    }

    tExtensionLNClassEnum* tExtensionLNClassEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tExtensionLNClassEnum (*this, f, c);
    }

    tExtensionLNClassEnum::
    ~tExtensionLNClassEnum ()
    {
    }

    // tLNClassEnum
    //

    tLNClassEnum::
    tLNClassEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tLNClassEnum::
    tLNClassEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tLNClassEnum::
    tLNClassEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tLNClassEnum* tLNClassEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tLNClassEnum (*this, f, c);
    }

    // tPredefinedCDCEnum
    //

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPredefinedCDCEnum_convert ();
    }

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPredefinedCDCEnum_convert ();
    }

    tPredefinedCDCEnum::
    tPredefinedCDCEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPredefinedCDCEnum_convert ();
    }

    tPredefinedCDCEnum* tPredefinedCDCEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedCDCEnum (*this, f, c);
    }

    tPredefinedCDCEnum::value tPredefinedCDCEnum::
    _xsd_tPredefinedCDCEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedCDCEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPredefinedCDCEnum_indexes_,
                        _xsd_tPredefinedCDCEnum_indexes_ + 29,
                        *this,
                        c));

      if (i == _xsd_tPredefinedCDCEnum_indexes_ + 29 || _xsd_tPredefinedCDCEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPredefinedCDCEnum::
    _xsd_tPredefinedCDCEnum_literals_[29] =
    {
      "SPS",
      "DPS",
      "INS",
      "ACT",
      "ACD",
      "SEC",
      "BCR",
      "MV",
      "CMV",
      "SAV",
      "WYE",
      "DEL",
      "SEQ",
      "HMV",
      "HWYE",
      "HDEL",
      "SPC",
      "DPC",
      "INC",
      "BSC",
      "ISC",
      "APC",
      "SPG",
      "ING",
      "ASG",
      "CURVE",
      "DPL",
      "LPL",
      "CSD"
    };

    const tPredefinedCDCEnum::value tPredefinedCDCEnum::
    _xsd_tPredefinedCDCEnum_indexes_[29] =
    {
      ::IEC61850::SCL::tPredefinedCDCEnum::ACD,
      ::IEC61850::SCL::tPredefinedCDCEnum::ACT,
      ::IEC61850::SCL::tPredefinedCDCEnum::APC,
      ::IEC61850::SCL::tPredefinedCDCEnum::ASG,
      ::IEC61850::SCL::tPredefinedCDCEnum::BCR,
      ::IEC61850::SCL::tPredefinedCDCEnum::BSC,
      ::IEC61850::SCL::tPredefinedCDCEnum::CMV,
      ::IEC61850::SCL::tPredefinedCDCEnum::CSD,
      ::IEC61850::SCL::tPredefinedCDCEnum::CURVE,
      ::IEC61850::SCL::tPredefinedCDCEnum::DEL,
      ::IEC61850::SCL::tPredefinedCDCEnum::DPC,
      ::IEC61850::SCL::tPredefinedCDCEnum::DPL,
      ::IEC61850::SCL::tPredefinedCDCEnum::DPS,
      ::IEC61850::SCL::tPredefinedCDCEnum::HDEL,
      ::IEC61850::SCL::tPredefinedCDCEnum::HMV,
      ::IEC61850::SCL::tPredefinedCDCEnum::HWYE,
      ::IEC61850::SCL::tPredefinedCDCEnum::INC,
      ::IEC61850::SCL::tPredefinedCDCEnum::ING,
      ::IEC61850::SCL::tPredefinedCDCEnum::INS,
      ::IEC61850::SCL::tPredefinedCDCEnum::ISC,
      ::IEC61850::SCL::tPredefinedCDCEnum::LPL,
      ::IEC61850::SCL::tPredefinedCDCEnum::MV,
      ::IEC61850::SCL::tPredefinedCDCEnum::SAV,
      ::IEC61850::SCL::tPredefinedCDCEnum::SEC,
      ::IEC61850::SCL::tPredefinedCDCEnum::SEQ,
      ::IEC61850::SCL::tPredefinedCDCEnum::SPC,
      ::IEC61850::SCL::tPredefinedCDCEnum::SPG,
      ::IEC61850::SCL::tPredefinedCDCEnum::SPS,
      ::IEC61850::SCL::tPredefinedCDCEnum::WYE
    };

    // tExtensionCDCEnum
    //

    tExtensionCDCEnum::
    tExtensionCDCEnum (const char* _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionCDCEnum::
    tExtensionCDCEnum (const ::std::string& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionCDCEnum::
    tExtensionCDCEnum (const ::xml_schema::name& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionCDCEnum::
    tExtensionCDCEnum (const tExtensionCDCEnum& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::name (x, f, c)
    {
    }

    tExtensionCDCEnum::
    tExtensionCDCEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
    }

    tExtensionCDCEnum::
    tExtensionCDCEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
    }

    tExtensionCDCEnum::
    tExtensionCDCEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
    }

    tExtensionCDCEnum* tExtensionCDCEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tExtensionCDCEnum (*this, f, c);
    }

    tExtensionCDCEnum::
    ~tExtensionCDCEnum ()
    {
    }

    // tCDCEnum
    //

    tCDCEnum::
    tCDCEnum (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tCDCEnum::
    tCDCEnum (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tCDCEnum::
    tCDCEnum (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tCDCEnum* tCDCEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tCDCEnum (*this, f, c);
    }

    // tTrgOptEnum
    //

    tTrgOptEnum::
    tTrgOptEnum (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tTrgOptEnum_convert ();
    }

    tTrgOptEnum::
    tTrgOptEnum (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tTrgOptEnum_convert ();
    }

    tTrgOptEnum::
    tTrgOptEnum (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tTrgOptEnum_convert ();
    }

    tTrgOptEnum* tTrgOptEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tTrgOptEnum (*this, f, c);
    }

    tTrgOptEnum::value tTrgOptEnum::
    _xsd_tTrgOptEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tTrgOptEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tTrgOptEnum_indexes_,
                        _xsd_tTrgOptEnum_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_tTrgOptEnum_indexes_ + 4 || _xsd_tTrgOptEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tTrgOptEnum::
    _xsd_tTrgOptEnum_literals_[4] =
    {
      "dchg",
      "qchg",
      "dupd",
      "none"
    };

    const tTrgOptEnum::value tTrgOptEnum::
    _xsd_tTrgOptEnum_indexes_[4] =
    {
      ::IEC61850::SCL::tTrgOptEnum::dchg,
      ::IEC61850::SCL::tTrgOptEnum::dupd,
      ::IEC61850::SCL::tTrgOptEnum::none,
      ::IEC61850::SCL::tTrgOptEnum::qchg
    };

    // tTrgOptControlEnum
    //

    tTrgOptControlEnum::
    tTrgOptControlEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tTrgOptControlEnum_convert ();
    }

    tTrgOptControlEnum::
    tTrgOptControlEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tTrgOptControlEnum_convert ();
    }

    tTrgOptControlEnum::
    tTrgOptControlEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tTrgOptControlEnum_convert ();
    }

    tTrgOptControlEnum* tTrgOptControlEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tTrgOptControlEnum (*this, f, c);
    }

    tTrgOptControlEnum::value tTrgOptControlEnum::
    _xsd_tTrgOptControlEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tTrgOptControlEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tTrgOptControlEnum_indexes_,
                        _xsd_tTrgOptControlEnum_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_tTrgOptControlEnum_indexes_ + 5 || _xsd_tTrgOptControlEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tTrgOptControlEnum::
    _xsd_tTrgOptControlEnum_literals_[5] =
    {
      "dchg",
      "qchg",
      "dupd",
      "period",
      "none"
    };

    const tTrgOptControlEnum::value tTrgOptControlEnum::
    _xsd_tTrgOptControlEnum_indexes_[5] =
    {
      ::IEC61850::SCL::tTrgOptControlEnum::dchg,
      ::IEC61850::SCL::tTrgOptControlEnum::dupd,
      ::IEC61850::SCL::tTrgOptControlEnum::none,
      ::IEC61850::SCL::tTrgOptControlEnum::period,
      ::IEC61850::SCL::tTrgOptControlEnum::qchg
    };

    // tFCEnum
    //

    tFCEnum::
    tFCEnum (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tFCEnum_convert ();
    }

    tFCEnum::
    tFCEnum (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tFCEnum_convert ();
    }

    tFCEnum::
    tFCEnum (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tFCEnum_convert ();
    }

    tFCEnum* tFCEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tFCEnum (*this, f, c);
    }

    tFCEnum::value tFCEnum::
    _xsd_tFCEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tFCEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tFCEnum_indexes_,
                        _xsd_tFCEnum_indexes_ + 10,
                        *this,
                        c));

      if (i == _xsd_tFCEnum_indexes_ + 10 || _xsd_tFCEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tFCEnum::
    _xsd_tFCEnum_literals_[10] =
    {
      "ST",
      "MX",
      "CO",
      "SP",
      "SG",
      "SE",
      "SV",
      "CF",
      "DC",
      "EX"
    };

    const tFCEnum::value tFCEnum::
    _xsd_tFCEnum_indexes_[10] =
    {
      ::IEC61850::SCL::tFCEnum::CF,
      ::IEC61850::SCL::tFCEnum::CO,
      ::IEC61850::SCL::tFCEnum::DC,
      ::IEC61850::SCL::tFCEnum::EX,
      ::IEC61850::SCL::tFCEnum::MX,
      ::IEC61850::SCL::tFCEnum::SE,
      ::IEC61850::SCL::tFCEnum::SG,
      ::IEC61850::SCL::tFCEnum::SP,
      ::IEC61850::SCL::tFCEnum::ST,
      ::IEC61850::SCL::tFCEnum::SV
    };

    // tServiceFCEnum
    //

    tServiceFCEnum::
    tServiceFCEnum (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tServiceFCEnum_convert ();
    }

    tServiceFCEnum::
    tServiceFCEnum (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tServiceFCEnum_convert ();
    }

    tServiceFCEnum::
    tServiceFCEnum (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tServiceFCEnum_convert ();
    }

    tServiceFCEnum* tServiceFCEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tServiceFCEnum (*this, f, c);
    }

    tServiceFCEnum::value tServiceFCEnum::
    _xsd_tServiceFCEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tServiceFCEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tServiceFCEnum_indexes_,
                        _xsd_tServiceFCEnum_indexes_ + 8,
                        *this,
                        c));

      if (i == _xsd_tServiceFCEnum_indexes_ + 8 || _xsd_tServiceFCEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tServiceFCEnum::
    _xsd_tServiceFCEnum_literals_[8] =
    {
      "SG",
      "BR",
      "RP",
      "LG",
      "GO",
      "GS",
      "MS",
      "US"
    };

    const tServiceFCEnum::value tServiceFCEnum::
    _xsd_tServiceFCEnum_indexes_[8] =
    {
      ::IEC61850::SCL::tServiceFCEnum::BR,
      ::IEC61850::SCL::tServiceFCEnum::GO,
      ::IEC61850::SCL::tServiceFCEnum::GS,
      ::IEC61850::SCL::tServiceFCEnum::LG,
      ::IEC61850::SCL::tServiceFCEnum::MS,
      ::IEC61850::SCL::tServiceFCEnum::RP,
      ::IEC61850::SCL::tServiceFCEnum::SG,
      ::IEC61850::SCL::tServiceFCEnum::US
    };

    // tPredefinedBasicTypeEnum
    //

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tPredefinedBasicTypeEnum_convert ();
    }

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tPredefinedBasicTypeEnum_convert ();
    }

    tPredefinedBasicTypeEnum::
    tPredefinedBasicTypeEnum (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tPredefinedBasicTypeEnum_convert ();
    }

    tPredefinedBasicTypeEnum* tPredefinedBasicTypeEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tPredefinedBasicTypeEnum (*this, f, c);
    }

    tPredefinedBasicTypeEnum::value tPredefinedBasicTypeEnum::
    _xsd_tPredefinedBasicTypeEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedBasicTypeEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tPredefinedBasicTypeEnum_indexes_,
                        _xsd_tPredefinedBasicTypeEnum_indexes_ + 26,
                        *this,
                        c));

      if (i == _xsd_tPredefinedBasicTypeEnum_indexes_ + 26 || _xsd_tPredefinedBasicTypeEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tPredefinedBasicTypeEnum::
    _xsd_tPredefinedBasicTypeEnum_literals_[26] =
    {
      "BOOLEAN",
      "INT8",
      "INT16",
      "INT24",
      "INT32",
      "INT128",
      "INT8U",
      "INT16U",
      "INT24U",
      "INT32U",
      "FLOAT32",
      "FLOAT64",
      "Enum",
      "Dbpos",
      "Tcmd",
      "Quality",
      "Timestamp",
      "VisString32",
      "VisString64",
      "VisString129",
      "VisString255",
      "Octet64",
      "Struct",
      "EntryTime",
      "Unicode255",
      "Check"
    };

    const tPredefinedBasicTypeEnum::value tPredefinedBasicTypeEnum::
    _xsd_tPredefinedBasicTypeEnum_indexes_[26] =
    {
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::BOOLEAN,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Check,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Dbpos,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::EntryTime,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Enum,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::FLOAT32,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::FLOAT64,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT128,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT16,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT16U,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT24,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT24U,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT32,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT32U,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT8,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::INT8U,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Octet64,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Quality,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Struct,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Tcmd,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Timestamp,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::Unicode255,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::VisString129,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::VisString255,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::VisString32,
      ::IEC61850::SCL::tPredefinedBasicTypeEnum::VisString64
    };

    // tExtensionBasicTypeEnum
    //

    tExtensionBasicTypeEnum::
    tExtensionBasicTypeEnum (const char* _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionBasicTypeEnum::
    tExtensionBasicTypeEnum (const ::std::string& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionBasicTypeEnum::
    tExtensionBasicTypeEnum (const ::xml_schema::name& _xsd_name_base)
    : ::xml_schema::name (_xsd_name_base)
    {
    }

    tExtensionBasicTypeEnum::
    tExtensionBasicTypeEnum (const tExtensionBasicTypeEnum& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (x, f, c)
    {
    }

    tExtensionBasicTypeEnum::
    tExtensionBasicTypeEnum (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
    }

    tExtensionBasicTypeEnum::
    tExtensionBasicTypeEnum (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
    }

    tExtensionBasicTypeEnum::
    tExtensionBasicTypeEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
    }

    tExtensionBasicTypeEnum* tExtensionBasicTypeEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tExtensionBasicTypeEnum (*this, f, c);
    }

    tExtensionBasicTypeEnum::
    ~tExtensionBasicTypeEnum ()
    {
    }

    // tBasicTypeEnum
    //

    tBasicTypeEnum::
    tBasicTypeEnum (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    tBasicTypeEnum::
    tBasicTypeEnum (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    tBasicTypeEnum::
    tBasicTypeEnum (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    tBasicTypeEnum* tBasicTypeEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tBasicTypeEnum (*this, f, c);
    }

    // tValKindEnum
    //

    tValKindEnum::
    tValKindEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tValKindEnum_convert ();
    }

    tValKindEnum::
    tValKindEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tValKindEnum_convert ();
    }

    tValKindEnum::
    tValKindEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tValKindEnum_convert ();
    }

    tValKindEnum* tValKindEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tValKindEnum (*this, f, c);
    }

    tValKindEnum::value tValKindEnum::
    _xsd_tValKindEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tValKindEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tValKindEnum_indexes_,
                        _xsd_tValKindEnum_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_tValKindEnum_indexes_ + 4 || _xsd_tValKindEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tValKindEnum::
    _xsd_tValKindEnum_literals_[4] =
    {
      "Spec",
      "Conf",
      "RO",
      "Set"
    };

    const tValKindEnum::value tValKindEnum::
    _xsd_tValKindEnum_indexes_[4] =
    {
      ::IEC61850::SCL::tValKindEnum::Conf,
      ::IEC61850::SCL::tValKindEnum::RO,
      ::IEC61850::SCL::tValKindEnum::Set,
      ::IEC61850::SCL::tValKindEnum::Spec
    };

    // tGSEControlTypeEnum
    //

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (e, f, c)
    {
      _xsd_tGSEControlTypeEnum_convert ();
    }

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (a, f, c)
    {
      _xsd_tGSEControlTypeEnum_convert ();
    }

    tGSEControlTypeEnum::
    tGSEControlTypeEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::name (s, e, f, c)
    {
      _xsd_tGSEControlTypeEnum_convert ();
    }

    tGSEControlTypeEnum* tGSEControlTypeEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tGSEControlTypeEnum (*this, f, c);
    }

    tGSEControlTypeEnum::value tGSEControlTypeEnum::
    _xsd_tGSEControlTypeEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tGSEControlTypeEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tGSEControlTypeEnum_indexes_,
                        _xsd_tGSEControlTypeEnum_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_tGSEControlTypeEnum_indexes_ + 2 || _xsd_tGSEControlTypeEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tGSEControlTypeEnum::
    _xsd_tGSEControlTypeEnum_literals_[2] =
    {
      "GSSE",
      "GOOSE"
    };

    const tGSEControlTypeEnum::value tGSEControlTypeEnum::
    _xsd_tGSEControlTypeEnum_indexes_[2] =
    {
      ::IEC61850::SCL::tGSEControlTypeEnum::GOOSE,
      ::IEC61850::SCL::tGSEControlTypeEnum::GSSE
    };

    // tSIUnitEnum
    //

    tSIUnitEnum::
    tSIUnitEnum (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::token (e, f, c)
    {
      _xsd_tSIUnitEnum_convert ();
    }

    tSIUnitEnum::
    tSIUnitEnum (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::token (a, f, c)
    {
      _xsd_tSIUnitEnum_convert ();
    }

    tSIUnitEnum::
    tSIUnitEnum (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::token (s, e, f, c)
    {
      _xsd_tSIUnitEnum_convert ();
    }

    tSIUnitEnum* tSIUnitEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tSIUnitEnum (*this, f, c);
    }

    tSIUnitEnum::value tSIUnitEnum::
    _xsd_tSIUnitEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tSIUnitEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tSIUnitEnum_indexes_,
                        _xsd_tSIUnitEnum_indexes_ + 59,
                        *this,
                        c));

      if (i == _xsd_tSIUnitEnum_indexes_ + 59 || _xsd_tSIUnitEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tSIUnitEnum::
    _xsd_tSIUnitEnum_literals_[59] =
    {
      "none",
      "m",
      "kg",
      "s",
      "A",
      "K",
      "mol",
      "cd",
      "deg",
      "rad",
      "sr",
      "Gy",
      "q",
      "\xC2\xB0""C",
      "Sv",
      "F",
      "C",
      "S",
      "H",
      "V",
      "ohm",
      "J",
      "N",
      "Hz",
      "lx",
      "Lm",
      "Wb",
      "T",
      "W",
      "Pa",
      "m^2",
      "m^3",
      "m/s",
      "m/s^2",
      "m^3/s",
      "m/m^3",
      "M",
      "kg/m^3",
      "m^2/s",
      "W/m K",
      "J/K",
      "ppm",
      "s^-1",
      "rad/s",
      "VA",
      "Watts",
      "VAr",
      "phi",
      "cos_phi",
      "Vs",
      "V^2",
      "As",
      "A^2",
      "A^2 s",
      "VAh",
      "Wh",
      "VArh",
      "V/Hz",
      "b/s"
    };

    const tSIUnitEnum::value tSIUnitEnum::
    _xsd_tSIUnitEnum_indexes_[59] =
    {
      ::IEC61850::SCL::tSIUnitEnum::A,
      ::IEC61850::SCL::tSIUnitEnum::A_2,
      ::IEC61850::SCL::tSIUnitEnum::A_2_s,
      ::IEC61850::SCL::tSIUnitEnum::As,
      ::IEC61850::SCL::tSIUnitEnum::C,
      ::IEC61850::SCL::tSIUnitEnum::F,
      ::IEC61850::SCL::tSIUnitEnum::Gy,
      ::IEC61850::SCL::tSIUnitEnum::H,
      ::IEC61850::SCL::tSIUnitEnum::Hz,
      ::IEC61850::SCL::tSIUnitEnum::J,
      ::IEC61850::SCL::tSIUnitEnum::J_K,
      ::IEC61850::SCL::tSIUnitEnum::K,
      ::IEC61850::SCL::tSIUnitEnum::Lm,
      ::IEC61850::SCL::tSIUnitEnum::M,
      ::IEC61850::SCL::tSIUnitEnum::N,
      ::IEC61850::SCL::tSIUnitEnum::Pa,
      ::IEC61850::SCL::tSIUnitEnum::S,
      ::IEC61850::SCL::tSIUnitEnum::Sv,
      ::IEC61850::SCL::tSIUnitEnum::T,
      ::IEC61850::SCL::tSIUnitEnum::V,
      ::IEC61850::SCL::tSIUnitEnum::V_Hz,
      ::IEC61850::SCL::tSIUnitEnum::VA,
      ::IEC61850::SCL::tSIUnitEnum::VAh,
      ::IEC61850::SCL::tSIUnitEnum::VAr,
      ::IEC61850::SCL::tSIUnitEnum::VArh,
      ::IEC61850::SCL::tSIUnitEnum::V_2,
      ::IEC61850::SCL::tSIUnitEnum::Vs,
      ::IEC61850::SCL::tSIUnitEnum::W,
      ::IEC61850::SCL::tSIUnitEnum::W_m_K,
      ::IEC61850::SCL::tSIUnitEnum::Watts,
      ::IEC61850::SCL::tSIUnitEnum::Wb,
      ::IEC61850::SCL::tSIUnitEnum::Wh,
      ::IEC61850::SCL::tSIUnitEnum::b_s,
      ::IEC61850::SCL::tSIUnitEnum::cd,
      ::IEC61850::SCL::tSIUnitEnum::cos_phi,
      ::IEC61850::SCL::tSIUnitEnum::deg,
      ::IEC61850::SCL::tSIUnitEnum::kg,
      ::IEC61850::SCL::tSIUnitEnum::kg_m_3,
      ::IEC61850::SCL::tSIUnitEnum::lx,
      ::IEC61850::SCL::tSIUnitEnum::m,
      ::IEC61850::SCL::tSIUnitEnum::m_m_3,
      ::IEC61850::SCL::tSIUnitEnum::m_s,
      ::IEC61850::SCL::tSIUnitEnum::m_s_2,
      ::IEC61850::SCL::tSIUnitEnum::m_2,
      ::IEC61850::SCL::tSIUnitEnum::m_2_s,
      ::IEC61850::SCL::tSIUnitEnum::m_3,
      ::IEC61850::SCL::tSIUnitEnum::m_3_s,
      ::IEC61850::SCL::tSIUnitEnum::mol,
      ::IEC61850::SCL::tSIUnitEnum::none,
      ::IEC61850::SCL::tSIUnitEnum::ohm,
      ::IEC61850::SCL::tSIUnitEnum::phi,
      ::IEC61850::SCL::tSIUnitEnum::ppm,
      ::IEC61850::SCL::tSIUnitEnum::q,
      ::IEC61850::SCL::tSIUnitEnum::rad,
      ::IEC61850::SCL::tSIUnitEnum::rad_s,
      ::IEC61850::SCL::tSIUnitEnum::s,
      ::IEC61850::SCL::tSIUnitEnum::s__1,
      ::IEC61850::SCL::tSIUnitEnum::sr,
      ::IEC61850::SCL::tSIUnitEnum::cxx_C
    };

    // tUnitMultiplierEnum
    //

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (e, f, c)
    {
      _xsd_tUnitMultiplierEnum_convert ();
    }

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (a, f, c)
    {
      _xsd_tUnitMultiplierEnum_convert ();
    }

    tUnitMultiplierEnum::
    tUnitMultiplierEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (s, e, f, c)
    {
      _xsd_tUnitMultiplierEnum_convert ();
    }

    tUnitMultiplierEnum* tUnitMultiplierEnum::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class tUnitMultiplierEnum (*this, f, c);
    }

    tUnitMultiplierEnum::value tUnitMultiplierEnum::
    _xsd_tUnitMultiplierEnum_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tUnitMultiplierEnum_literals_);
      const value* i (::std::lower_bound (
                        _xsd_tUnitMultiplierEnum_indexes_,
                        _xsd_tUnitMultiplierEnum_indexes_ + 21,
                        *this,
                        c));

      if (i == _xsd_tUnitMultiplierEnum_indexes_ + 21 || _xsd_tUnitMultiplierEnum_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const tUnitMultiplierEnum::
    _xsd_tUnitMultiplierEnum_literals_[21] =
    {
      "",
      "m",
      "k",
      "M",
      "mu",
      "y",
      "z",
      "a",
      "f",
      "p",
      "n",
      "c",
      "d",
      "da",
      "h",
      "G",
      "T",
      "P",
      "E",
      "Z",
      "Y"
    };

    const tUnitMultiplierEnum::value tUnitMultiplierEnum::
    _xsd_tUnitMultiplierEnum_indexes_[21] =
    {
      ::IEC61850::SCL::tUnitMultiplierEnum::cxx,
      ::IEC61850::SCL::tUnitMultiplierEnum::E,
      ::IEC61850::SCL::tUnitMultiplierEnum::G,
      ::IEC61850::SCL::tUnitMultiplierEnum::M,
      ::IEC61850::SCL::tUnitMultiplierEnum::P,
      ::IEC61850::SCL::tUnitMultiplierEnum::T,
      ::IEC61850::SCL::tUnitMultiplierEnum::Y,
      ::IEC61850::SCL::tUnitMultiplierEnum::Z,
      ::IEC61850::SCL::tUnitMultiplierEnum::a,
      ::IEC61850::SCL::tUnitMultiplierEnum::c,
      ::IEC61850::SCL::tUnitMultiplierEnum::d,
      ::IEC61850::SCL::tUnitMultiplierEnum::da,
      ::IEC61850::SCL::tUnitMultiplierEnum::f,
      ::IEC61850::SCL::tUnitMultiplierEnum::h,
      ::IEC61850::SCL::tUnitMultiplierEnum::k,
      ::IEC61850::SCL::tUnitMultiplierEnum::m,
      ::IEC61850::SCL::tUnitMultiplierEnum::mu,
      ::IEC61850::SCL::tUnitMultiplierEnum::n,
      ::IEC61850::SCL::tUnitMultiplierEnum::p,
      ::IEC61850::SCL::tUnitMultiplierEnum::y,
      ::IEC61850::SCL::tUnitMultiplierEnum::z
    };
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace IEC61850
{
  namespace SCL
  {
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace IEC61850
{
  namespace SCL
  {
    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedPTypeEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedPTypeEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedPTypeEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tExtensionPTypeEnum& i)
    {
      e << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const tExtensionPTypeEnum& i)
    {
      a << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tExtensionPTypeEnum& i)
    {
      l << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPTypeEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPTypeEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPTypeEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedAttributeNameEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedAttributeNameEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedAttributeNameEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tExtensionAttributeNameEnum& i)
    {
      e << static_cast< const ::IEC61850::SCL::tRestrName1stL& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const tExtensionAttributeNameEnum& i)
    {
      a << static_cast< const ::IEC61850::SCL::tRestrName1stL& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tExtensionAttributeNameEnum& i)
    {
      l << static_cast< const ::IEC61850::SCL::tRestrName1stL& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tAttributeNameEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tAttributeNameEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tAttributeNameEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedCommonConductingEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedCommonConductingEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedCommonConductingEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tExtensionEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const tExtensionEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tExtensionEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tCommonConductingEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tCommonConductingEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tCommonConductingEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPowerTransformerEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPowerTransformerEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPowerTransformerEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tTransformerWindingEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tTransformerWindingEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tTransformerWindingEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedGeneralEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedGeneralEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedGeneralEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tExtensionGeneralEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const tExtensionGeneralEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tExtensionGeneralEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tGeneralEquipmentEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tGeneralEquipmentEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tGeneralEquipmentEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tServiceSettingsEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tServiceSettingsEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tServiceSettingsEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPhaseEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPhaseEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPhaseEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tAuthenticationEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tAuthenticationEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tAuthenticationEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tAssociationKindEnum& i)
    {
      e << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tAssociationKindEnum& i)
    {
      a << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tAssociationKindEnum& i)
    {
      l << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tLPHDEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tLPHDEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tLPHDEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tLLN0Enum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tLLN0Enum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tLLN0Enum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupAEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupAEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupAEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupCEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupCEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupCEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupGEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupGEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupGEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupIEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupIEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupIEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupMEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupMEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupMEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupPEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupPEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupPEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupREnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupREnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupREnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupSEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupSEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupSEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupTEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupTEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupTEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupXEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupXEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupXEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupYEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupYEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupYEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNGroupZEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNGroupZEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNGroupZEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tDomainLNEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tDomainLNEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tDomainLNEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedLNClassEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedLNClassEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedLNClassEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tExtensionLNClassEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const tExtensionLNClassEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tExtensionLNClassEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tLNClassEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tLNClassEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tLNClassEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedCDCEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedCDCEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedCDCEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tExtensionCDCEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const tExtensionCDCEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tExtensionCDCEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tCDCEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tCDCEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tCDCEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tTrgOptEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tTrgOptEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tTrgOptEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tTrgOptControlEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tTrgOptControlEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tTrgOptControlEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tFCEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tFCEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tFCEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tServiceFCEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tServiceFCEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tServiceFCEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tPredefinedBasicTypeEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tPredefinedBasicTypeEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tPredefinedBasicTypeEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tExtensionBasicTypeEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const tExtensionBasicTypeEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tExtensionBasicTypeEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tBasicTypeEnum& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tBasicTypeEnum& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tBasicTypeEnum& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tValKindEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tValKindEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tValKindEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tGSEControlTypeEnum& i)
    {
      e << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tGSEControlTypeEnum& i)
    {
      a << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tGSEControlTypeEnum& i)
    {
      l << static_cast< const ::xml_schema::name& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tSIUnitEnum& i)
    {
      e << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tSIUnitEnum& i)
    {
      a << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tSIUnitEnum& i)
    {
      l << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const tUnitMultiplierEnum& i)
    {
      e << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const tUnitMultiplierEnum& i)
    {
      a << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const tUnitMultiplierEnum& i)
    {
      l << static_cast< const ::xml_schema::normalized_string& > (i);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

