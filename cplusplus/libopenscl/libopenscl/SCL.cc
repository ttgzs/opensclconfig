// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SCL.h"

namespace IEC61850
{
  namespace SCL
  {
    // SCL
    // 

    const SCL::Header_type& SCL::
    Header () const
    {
      return this->Header_.get ();
    }

    SCL::Header_type& SCL::
    Header ()
    {
      return this->Header_.get ();
    }

    void SCL::
    Header (const Header_type& x)
    {
      this->Header_.set (x);
    }

    void SCL::
    Header (::std::auto_ptr< Header_type > x)
    {
      this->Header_.set (x);
    }

    const SCL::Substation_sequence& SCL::
    Substation () const
    {
      return this->Substation_;
    }

    SCL::Substation_sequence& SCL::
    Substation ()
    {
      return this->Substation_;
    }

    void SCL::
    Substation (const Substation_sequence& s)
    {
      this->Substation_ = s;
    }

    const SCL::Communication_optional& SCL::
    Communication () const
    {
      return this->Communication_;
    }

    SCL::Communication_optional& SCL::
    Communication ()
    {
      return this->Communication_;
    }

    void SCL::
    Communication (const Communication_type& x)
    {
      this->Communication_.set (x);
    }

    void SCL::
    Communication (const Communication_optional& x)
    {
      this->Communication_ = x;
    }

    void SCL::
    Communication (::std::auto_ptr< Communication_type > x)
    {
      this->Communication_.set (x);
    }

    const SCL::IED_sequence& SCL::
    IED () const
    {
      return this->IED_;
    }

    SCL::IED_sequence& SCL::
    IED ()
    {
      return this->IED_;
    }

    void SCL::
    IED (const IED_sequence& s)
    {
      this->IED_ = s;
    }

    const SCL::DataTypeTemplates_optional& SCL::
    DataTypeTemplates () const
    {
      return this->DataTypeTemplates_;
    }

    SCL::DataTypeTemplates_optional& SCL::
    DataTypeTemplates ()
    {
      return this->DataTypeTemplates_;
    }

    void SCL::
    DataTypeTemplates (const DataTypeTemplates_type& x)
    {
      this->DataTypeTemplates_.set (x);
    }

    void SCL::
    DataTypeTemplates (const DataTypeTemplates_optional& x)
    {
      this->DataTypeTemplates_ = x;
    }

    void SCL::
    DataTypeTemplates (::std::auto_ptr< DataTypeTemplates_type > x)
    {
      this->DataTypeTemplates_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace IEC61850
{
  namespace SCL
  {
    // SCL
    //

    SCL::
    SCL (const Header_type& Header)
    : ::IEC61850::SCL::tBaseElement (),
      Header_ (Header, ::xml_schema::flags (), this),
      Substation_ (::xml_schema::flags (), this),
      Communication_ (::xml_schema::flags (), this),
      IED_ (::xml_schema::flags (), this),
      DataTypeTemplates_ (::xml_schema::flags (), this)
    {
    }

    SCL::
    SCL (::std::auto_ptr< Header_type >& Header)
    : ::IEC61850::SCL::tBaseElement (),
      Header_ (Header, ::xml_schema::flags (), this),
      Substation_ (::xml_schema::flags (), this),
      Communication_ (::xml_schema::flags (), this),
      IED_ (::xml_schema::flags (), this),
      DataTypeTemplates_ (::xml_schema::flags (), this)
    {
    }

    SCL::
    SCL (const SCL& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::IEC61850::SCL::tBaseElement (x, f, c),
      Header_ (x.Header_, f, this),
      Substation_ (x.Substation_, f, this),
      Communication_ (x.Communication_, f, this),
      IED_ (x.IED_, f, this),
      DataTypeTemplates_ (x.DataTypeTemplates_, f, this)
    {
    }

    SCL::
    SCL (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::IEC61850::SCL::tBaseElement (e, f | ::xml_schema::flags::base, c),
      Header_ (f, this),
      Substation_ (f, this),
      Communication_ (f, this),
      IED_ (f, this),
      DataTypeTemplates_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SCL::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::IEC61850::SCL::tBaseElement::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Header
        //
        if (n.name () == "Header" && n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
        {
          ::std::auto_ptr< Header_type > r (
            Header_traits::create (i, f, this));

          if (!Header_.present ())
          {
            this->Header_.set (r);
            continue;
          }
        }

        // Substation
        //
        if (n.name () == "Substation" && n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
        {
          ::std::auto_ptr< Substation_type > r (
            Substation_traits::create (i, f, this));

          this->Substation_.push_back (r);
          continue;
        }

        // Communication
        //
        if (n.name () == "Communication" && n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
        {
          ::std::auto_ptr< Communication_type > r (
            Communication_traits::create (i, f, this));

          if (!this->Communication_)
          {
            this->Communication_.set (r);
            continue;
          }
        }

        // IED
        //
        if (n.name () == "IED" && n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
        {
          ::std::auto_ptr< IED_type > r (
            IED_traits::create (i, f, this));

          this->IED_.push_back (r);
          continue;
        }

        // DataTypeTemplates
        //
        if (n.name () == "DataTypeTemplates" && n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
        {
          ::std::auto_ptr< DataTypeTemplates_type > r (
            DataTypeTemplates_traits::create (i, f, this));

          if (!this->DataTypeTemplates_)
          {
            this->DataTypeTemplates_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Header_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Header",
          "http://www.iec.ch/61850/2003/SCL");
      }
    }

    SCL* SCL::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SCL (*this, f, c);
    }

    SCL::
    ~SCL ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace IEC61850
{
  namespace SCL
  {
    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
        ::IEC61850::SCL::SCL_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
        ::IEC61850::SCL::SCL_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
        ::IEC61850::SCL::SCL_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::IEC61850::SCL::SCL_ (isrc, f, p);
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::IEC61850::SCL::SCL_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::IEC61850::SCL::SCL_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::IEC61850::SCL::SCL_ (isrc, f, p);
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::IEC61850::SCL::SCL_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::IEC61850::SCL::SCL_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
        ::IEC61850::SCL::SCL_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
        ::IEC61850::SCL::SCL_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
        ::IEC61850::SCL::SCL_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
          ::IEC61850::SCL::SCL_ (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SCL" &&
          n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
      {
        ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
          ::xsd::cxx::tree::traits< ::IEC61850::SCL::SCL, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SCL",
        "http://www.iec.ch/61850/2003/SCL");
    }

    ::std::auto_ptr< ::IEC61850::SCL::SCL >
    SCL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SCL" &&
          n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
      {
        ::std::auto_ptr< ::IEC61850::SCL::SCL > r (
          ::xsd::cxx::tree::traits< ::IEC61850::SCL::SCL, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SCL",
        "http://www.iec.ch/61850/2003/SCL");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace IEC61850
{
  namespace SCL
  {
    void
    SCL_ (::std::ostream& o,
          const ::IEC61850::SCL::SCL& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::IEC61850::SCL::SCL_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SCL_ (::std::ostream& o,
          const ::IEC61850::SCL::SCL& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::IEC61850::SCL::SCL_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SCL_ (::std::ostream& o,
          const ::IEC61850::SCL::SCL& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::IEC61850::SCL::SCL_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SCL_ (::xercesc::XMLFormatTarget& t,
          const ::IEC61850::SCL::SCL& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::IEC61850::SCL::SCL_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SCL_ (::xercesc::XMLFormatTarget& t,
          const ::IEC61850::SCL::SCL& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::IEC61850::SCL::SCL_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SCL_ (::xercesc::XMLFormatTarget& t,
          const ::IEC61850::SCL::SCL& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::IEC61850::SCL::SCL_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SCL_ (::xercesc::DOMDocument& d,
          const ::IEC61850::SCL::SCL& s,
          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SCL" &&
          n.namespace_ () == "http://www.iec.ch/61850/2003/SCL")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SCL",
          "http://www.iec.ch/61850/2003/SCL");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SCL_ (const ::IEC61850::SCL::SCL& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SCL",
          "http://www.iec.ch/61850/2003/SCL",
          m, f));

      ::IEC61850::SCL::SCL_ (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const SCL& i)
    {
      e << static_cast< const ::IEC61850::SCL::tBaseElement& > (i);

      // Header
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Header",
            "http://www.iec.ch/61850/2003/SCL",
            e));

        s << i.Header ();
      }

      // Substation
      //
      for (SCL::Substation_const_iterator
           b (i.Substation ().begin ()), n (i.Substation ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Substation",
            "http://www.iec.ch/61850/2003/SCL",
            e));

        s << *b;
      }

      // Communication
      //
      if (i.Communication ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Communication",
            "http://www.iec.ch/61850/2003/SCL",
            e));

        s << *i.Communication ();
      }

      // IED
      //
      for (SCL::IED_const_iterator
           b (i.IED ().begin ()), n (i.IED ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "IED",
            "http://www.iec.ch/61850/2003/SCL",
            e));

        s << *b;
      }

      // DataTypeTemplates
      //
      if (i.DataTypeTemplates ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "DataTypeTemplates",
            "http://www.iec.ch/61850/2003/SCL",
            e));

        s << *i.DataTypeTemplates ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

