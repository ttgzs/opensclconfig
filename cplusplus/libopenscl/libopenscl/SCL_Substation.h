// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCL_SUBSTATION_H
#define SCL_SUBSTATION_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;
  typedef ::xsd::cxx::tree::as_double < double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal < decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace IEC61850
{
  namespace SCL
  {
    class tLNodeContainer;
    class tPowerSystemResource;
    class tEquipmentContainer;
    class tEquipment;
    class tAbstractConductingEquipment;
    class tConductingEquipment;
    class tSubEquipment;
    class tPowerTransformer;
    class tTransformerWinding;
    class tTapChanger;
    class tGeneralEquipment;
    class tSubstation;
    class tVoltageLevel;
    class tBay;
    class tLNode;
    class tFunction;
    class tSubFunction;
    class tConnectivityNode;
    class tTerminal;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "SCL_BaseTypes.h"

namespace IEC61850
{
  namespace SCL
  {
    class tLNodeContainer: public ::IEC61850::SCL::tNaming
    {
      public:
      // LNode
      // 
      typedef ::IEC61850::SCL::tLNode LNode_type;
      typedef ::xsd::cxx::tree::sequence< LNode_type > LNode_sequence;
      typedef LNode_sequence::iterator LNode_iterator;
      typedef LNode_sequence::const_iterator LNode_const_iterator;
      typedef ::xsd::cxx::tree::traits< LNode_type, char > LNode_traits;

      const LNode_sequence&
      LNode () const;

      LNode_sequence&
      LNode ();

      void
      LNode (const LNode_sequence& s);

      // Constructors.
      //
      tLNodeContainer (const name_type&);

      tLNodeContainer (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      tLNodeContainer (const tLNodeContainer& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual tLNodeContainer*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tLNodeContainer ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      LNode_sequence LNode_;
    };

    class tPowerSystemResource: public ::IEC61850::SCL::tLNodeContainer
    {
      public:
      // Constructors.
      //
      tPowerSystemResource (const name_type&);

      tPowerSystemResource (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      tPowerSystemResource (const tPowerSystemResource& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual tPowerSystemResource*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tPowerSystemResource ();
    };

    class tEquipmentContainer: public ::IEC61850::SCL::tPowerSystemResource
    {
      public:
      // PowerTransformer
      // 
      typedef ::IEC61850::SCL::tPowerTransformer PowerTransformer_type;
      typedef ::xsd::cxx::tree::sequence< PowerTransformer_type > PowerTransformer_sequence;
      typedef PowerTransformer_sequence::iterator PowerTransformer_iterator;
      typedef PowerTransformer_sequence::const_iterator PowerTransformer_const_iterator;
      typedef ::xsd::cxx::tree::traits< PowerTransformer_type, char > PowerTransformer_traits;

      const PowerTransformer_sequence&
      PowerTransformer () const;

      PowerTransformer_sequence&
      PowerTransformer ();

      void
      PowerTransformer (const PowerTransformer_sequence& s);

      // GeneralEquipment
      // 
      typedef ::IEC61850::SCL::tGeneralEquipment GeneralEquipment_type;
      typedef ::xsd::cxx::tree::sequence< GeneralEquipment_type > GeneralEquipment_sequence;
      typedef GeneralEquipment_sequence::iterator GeneralEquipment_iterator;
      typedef GeneralEquipment_sequence::const_iterator GeneralEquipment_const_iterator;
      typedef ::xsd::cxx::tree::traits< GeneralEquipment_type, char > GeneralEquipment_traits;

      const GeneralEquipment_sequence&
      GeneralEquipment () const;

      GeneralEquipment_sequence&
      GeneralEquipment ();

      void
      GeneralEquipment (const GeneralEquipment_sequence& s);

      // Constructors.
      //
      tEquipmentContainer (const name_type&);

      tEquipmentContainer (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      tEquipmentContainer (const tEquipmentContainer& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual tEquipmentContainer*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tEquipmentContainer ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PowerTransformer_sequence PowerTransformer_;
      GeneralEquipment_sequence GeneralEquipment_;
    };

    class tEquipment: public ::IEC61850::SCL::tPowerSystemResource
    {
      public:
      // virtual
      // 
      typedef ::xml_schema::boolean virtual_type;
      typedef ::xsd::cxx::tree::traits< virtual_type, char > virtual_traits;

      const virtual_type&
      virtual_ () const;

      virtual_type&
      virtual_ ();

      void
      virtual_ (const virtual_type& x);

      static const virtual_type&
      virtual_default_value ();

      // Constructors.
      //
      tEquipment (const name_type&);

      tEquipment (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      tEquipment (const tEquipment& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual tEquipment*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tEquipment ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< virtual_type > virtual__;
      static const virtual_type virtual__default_value_;
    };

    class tAbstractConductingEquipment: public ::IEC61850::SCL::tEquipment
    {
      public:
      // Terminal
      // 
      typedef ::IEC61850::SCL::tTerminal Terminal_type;
      typedef ::xsd::cxx::tree::sequence< Terminal_type > Terminal_sequence;
      typedef Terminal_sequence::iterator Terminal_iterator;
      typedef Terminal_sequence::const_iterator Terminal_const_iterator;
      typedef ::xsd::cxx::tree::traits< Terminal_type, char > Terminal_traits;

      const Terminal_sequence&
      Terminal () const;

      Terminal_sequence&
      Terminal ();

      void
      Terminal (const Terminal_sequence& s);

      // SubEquipment
      // 
      typedef ::IEC61850::SCL::tSubEquipment SubEquipment_type;
      typedef ::xsd::cxx::tree::sequence< SubEquipment_type > SubEquipment_sequence;
      typedef SubEquipment_sequence::iterator SubEquipment_iterator;
      typedef SubEquipment_sequence::const_iterator SubEquipment_const_iterator;
      typedef ::xsd::cxx::tree::traits< SubEquipment_type, char > SubEquipment_traits;

      const SubEquipment_sequence&
      SubEquipment () const;

      SubEquipment_sequence&
      SubEquipment ();

      void
      SubEquipment (const SubEquipment_sequence& s);

      // Constructors.
      //
      tAbstractConductingEquipment (const name_type&);

      tAbstractConductingEquipment (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      tAbstractConductingEquipment (const tAbstractConductingEquipment& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual tAbstractConductingEquipment*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tAbstractConductingEquipment ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Terminal_sequence Terminal_;
      SubEquipment_sequence SubEquipment_;
    };

    class tConductingEquipment: public ::IEC61850::SCL::tAbstractConductingEquipment
    {
      public:
      // type
      // 
      typedef ::IEC61850::SCL::tCommonConductingEquipmentEnum type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // Constructors.
      //
      tConductingEquipment (const name_type&,
                            const type_type&);

      tConductingEquipment (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      tConductingEquipment (const tConductingEquipment& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual tConductingEquipment*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tConductingEquipment ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
    };

    class tSubEquipment: public ::IEC61850::SCL::tPowerSystemResource
    {
      public:
      // phase
      // 
      typedef ::IEC61850::SCL::tPhaseEnum phase_type;
      typedef ::xsd::cxx::tree::traits< phase_type, char > phase_traits;

      const phase_type&
      phase () const;

      phase_type&
      phase ();

      void
      phase (const phase_type& x);

      void
      phase (::std::auto_ptr< phase_type > p);

      static const phase_type&
      phase_default_value ();

      // virtual
      // 
      typedef ::xml_schema::boolean virtual_type;
      typedef ::xsd::cxx::tree::traits< virtual_type, char > virtual_traits;

      const virtual_type&
      virtual_ () const;

      virtual_type&
      virtual_ ();

      void
      virtual_ (const virtual_type& x);

      static const virtual_type&
      virtual_default_value ();

      // Constructors.
      //
      tSubEquipment (const name_type&);

      tSubEquipment (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      tSubEquipment (const tSubEquipment& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual tSubEquipment*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tSubEquipment ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< phase_type > phase_;
      static const phase_type phase_default_value_;
      ::xsd::cxx::tree::one< virtual_type > virtual__;
      static const virtual_type virtual__default_value_;
    };

    class tPowerTransformer: public ::IEC61850::SCL::tEquipment
    {
      public:
      // TransformerWinding
      // 
      typedef ::IEC61850::SCL::tTransformerWinding TransformerWinding_type;
      typedef ::xsd::cxx::tree::sequence< TransformerWinding_type > TransformerWinding_sequence;
      typedef TransformerWinding_sequence::iterator TransformerWinding_iterator;
      typedef TransformerWinding_sequence::const_iterator TransformerWinding_const_iterator;
      typedef ::xsd::cxx::tree::traits< TransformerWinding_type, char > TransformerWinding_traits;

      const TransformerWinding_sequence&
      TransformerWinding () const;

      TransformerWinding_sequence&
      TransformerWinding ();

      void
      TransformerWinding (const TransformerWinding_sequence& s);

      // type
      // 
      typedef ::IEC61850::SCL::tPowerTransformerEnum type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      static const type_type&
      type_default_value ();

      // Constructors.
      //
      tPowerTransformer (const name_type&);

      tPowerTransformer (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      tPowerTransformer (const tPowerTransformer& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual tPowerTransformer*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tPowerTransformer ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TransformerWinding_sequence TransformerWinding_;
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
    };

    class tTransformerWinding: public ::IEC61850::SCL::tAbstractConductingEquipment
    {
      public:
      // TapChanger
      // 
      typedef ::IEC61850::SCL::tTapChanger TapChanger_type;
      typedef ::xsd::cxx::tree::optional< TapChanger_type > TapChanger_optional;
      typedef ::xsd::cxx::tree::traits< TapChanger_type, char > TapChanger_traits;

      const TapChanger_optional&
      TapChanger () const;

      TapChanger_optional&
      TapChanger ();

      void
      TapChanger (const TapChanger_type& x);

      void
      TapChanger (const TapChanger_optional& x);

      void
      TapChanger (::std::auto_ptr< TapChanger_type > p);

      // type
      // 
      typedef ::IEC61850::SCL::tTransformerWindingEnum type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      static const type_type&
      type_default_value ();

      // Constructors.
      //
      tTransformerWinding (const name_type&);

      tTransformerWinding (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      tTransformerWinding (const tTransformerWinding& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual tTransformerWinding*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tTransformerWinding ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TapChanger_optional TapChanger_;
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
    };

    class tTapChanger: public ::IEC61850::SCL::tPowerSystemResource
    {
      public:
      // type
      // 
      typedef ::xml_schema::name type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      static const type_type&
      type_default_value ();

      // virtual
      // 
      typedef ::xml_schema::boolean virtual_type;
      typedef ::xsd::cxx::tree::traits< virtual_type, char > virtual_traits;

      const virtual_type&
      virtual_ () const;

      virtual_type&
      virtual_ ();

      void
      virtual_ (const virtual_type& x);

      static const virtual_type&
      virtual_default_value ();

      // Constructors.
      //
      tTapChanger (const name_type&);

      tTapChanger (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      tTapChanger (const tTapChanger& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual tTapChanger*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tTapChanger ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
      ::xsd::cxx::tree::one< virtual_type > virtual__;
      static const virtual_type virtual__default_value_;
    };

    class tGeneralEquipment: public ::IEC61850::SCL::tEquipment
    {
      public:
      // type
      // 
      typedef ::IEC61850::SCL::tGeneralEquipmentEnum type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // Constructors.
      //
      tGeneralEquipment (const name_type&,
                         const type_type&);

      tGeneralEquipment (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      tGeneralEquipment (const tGeneralEquipment& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual tGeneralEquipment*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tGeneralEquipment ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< type_type > type_;
    };

    class tSubstation: public ::IEC61850::SCL::tEquipmentContainer
    {
      public:
      // VoltageLevel
      // 
      typedef ::IEC61850::SCL::tVoltageLevel VoltageLevel_type;
      typedef ::xsd::cxx::tree::sequence< VoltageLevel_type > VoltageLevel_sequence;
      typedef VoltageLevel_sequence::iterator VoltageLevel_iterator;
      typedef VoltageLevel_sequence::const_iterator VoltageLevel_const_iterator;
      typedef ::xsd::cxx::tree::traits< VoltageLevel_type, char > VoltageLevel_traits;

      const VoltageLevel_sequence&
      VoltageLevel () const;

      VoltageLevel_sequence&
      VoltageLevel ();

      void
      VoltageLevel (const VoltageLevel_sequence& s);

      // Function
      // 
      typedef ::IEC61850::SCL::tFunction Function_type;
      typedef ::xsd::cxx::tree::sequence< Function_type > Function_sequence;
      typedef Function_sequence::iterator Function_iterator;
      typedef Function_sequence::const_iterator Function_const_iterator;
      typedef ::xsd::cxx::tree::traits< Function_type, char > Function_traits;

      const Function_sequence&
      Function () const;

      Function_sequence&
      Function ();

      void
      Function (const Function_sequence& s);

      // Constructors.
      //
      tSubstation (const name_type&);

      tSubstation (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      tSubstation (const tSubstation& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual tSubstation*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tSubstation ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      VoltageLevel_sequence VoltageLevel_;
      Function_sequence Function_;
    };

    class tVoltageLevel: public ::IEC61850::SCL::tEquipmentContainer
    {
      public:
      // Voltage
      // 
      typedef ::IEC61850::SCL::tVoltage Voltage_type;
      typedef ::xsd::cxx::tree::optional< Voltage_type > Voltage_optional;
      typedef ::xsd::cxx::tree::traits< Voltage_type, char > Voltage_traits;

      const Voltage_optional&
      Voltage () const;

      Voltage_optional&
      Voltage ();

      void
      Voltage (const Voltage_type& x);

      void
      Voltage (const Voltage_optional& x);

      void
      Voltage (::std::auto_ptr< Voltage_type > p);

      // Bay
      // 
      typedef ::IEC61850::SCL::tBay Bay_type;
      typedef ::xsd::cxx::tree::sequence< Bay_type > Bay_sequence;
      typedef Bay_sequence::iterator Bay_iterator;
      typedef Bay_sequence::const_iterator Bay_const_iterator;
      typedef ::xsd::cxx::tree::traits< Bay_type, char > Bay_traits;

      const Bay_sequence&
      Bay () const;

      Bay_sequence&
      Bay ();

      void
      Bay (const Bay_sequence& s);

      // Function
      // 
      typedef ::IEC61850::SCL::tFunction Function_type;
      typedef ::xsd::cxx::tree::sequence< Function_type > Function_sequence;
      typedef Function_sequence::iterator Function_iterator;
      typedef Function_sequence::const_iterator Function_const_iterator;
      typedef ::xsd::cxx::tree::traits< Function_type, char > Function_traits;

      const Function_sequence&
      Function () const;

      Function_sequence&
      Function ();

      void
      Function (const Function_sequence& s);

      // Constructors.
      //
      tVoltageLevel (const name_type&);

      tVoltageLevel (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      tVoltageLevel (const tVoltageLevel& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual tVoltageLevel*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tVoltageLevel ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Voltage_optional Voltage_;
      Bay_sequence Bay_;
      Function_sequence Function_;
    };

    class tBay: public ::IEC61850::SCL::tEquipmentContainer
    {
      public:
      // ConductingEquipment
      // 
      typedef ::IEC61850::SCL::tConductingEquipment ConductingEquipment_type;
      typedef ::xsd::cxx::tree::sequence< ConductingEquipment_type > ConductingEquipment_sequence;
      typedef ConductingEquipment_sequence::iterator ConductingEquipment_iterator;
      typedef ConductingEquipment_sequence::const_iterator ConductingEquipment_const_iterator;
      typedef ::xsd::cxx::tree::traits< ConductingEquipment_type, char > ConductingEquipment_traits;

      const ConductingEquipment_sequence&
      ConductingEquipment () const;

      ConductingEquipment_sequence&
      ConductingEquipment ();

      void
      ConductingEquipment (const ConductingEquipment_sequence& s);

      // ConnectivityNode
      // 
      typedef ::IEC61850::SCL::tConnectivityNode ConnectivityNode_type;
      typedef ::xsd::cxx::tree::sequence< ConnectivityNode_type > ConnectivityNode_sequence;
      typedef ConnectivityNode_sequence::iterator ConnectivityNode_iterator;
      typedef ConnectivityNode_sequence::const_iterator ConnectivityNode_const_iterator;
      typedef ::xsd::cxx::tree::traits< ConnectivityNode_type, char > ConnectivityNode_traits;

      const ConnectivityNode_sequence&
      ConnectivityNode () const;

      ConnectivityNode_sequence&
      ConnectivityNode ();

      void
      ConnectivityNode (const ConnectivityNode_sequence& s);

      // Function
      // 
      typedef ::IEC61850::SCL::tFunction Function_type;
      typedef ::xsd::cxx::tree::sequence< Function_type > Function_sequence;
      typedef Function_sequence::iterator Function_iterator;
      typedef Function_sequence::const_iterator Function_const_iterator;
      typedef ::xsd::cxx::tree::traits< Function_type, char > Function_traits;

      const Function_sequence&
      Function () const;

      Function_sequence&
      Function ();

      void
      Function (const Function_sequence& s);

      // Constructors.
      //
      tBay (const name_type&);

      tBay (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      tBay (const tBay& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual tBay*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tBay ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ConductingEquipment_sequence ConductingEquipment_;
      ConnectivityNode_sequence ConnectivityNode_;
      Function_sequence Function_;
    };

    class tLNode: public ::IEC61850::SCL::tUnNaming
    {
      public:
      // lnInst
      // 
      typedef ::IEC61850::SCL::tAnyName lnInst_type;
      typedef ::xsd::cxx::tree::optional< lnInst_type > lnInst_optional;
      typedef ::xsd::cxx::tree::traits< lnInst_type, char > lnInst_traits;

      const lnInst_optional&
      lnInst () const;

      lnInst_optional&
      lnInst ();

      void
      lnInst (const lnInst_type& x);

      void
      lnInst (const lnInst_optional& x);

      void
      lnInst (::std::auto_ptr< lnInst_type > p);

      // lnClass
      // 
      typedef ::IEC61850::SCL::tLNClassEnum lnClass_type;
      typedef ::xsd::cxx::tree::traits< lnClass_type, char > lnClass_traits;

      const lnClass_type&
      lnClass () const;

      lnClass_type&
      lnClass ();

      void
      lnClass (const lnClass_type& x);

      void
      lnClass (::std::auto_ptr< lnClass_type > p);

      // iedName
      // 
      typedef ::IEC61850::SCL::tName iedName_type;
      typedef ::xsd::cxx::tree::traits< iedName_type, char > iedName_traits;

      const iedName_type&
      iedName () const;

      iedName_type&
      iedName ();

      void
      iedName (const iedName_type& x);

      void
      iedName (::std::auto_ptr< iedName_type > p);

      static const iedName_type&
      iedName_default_value ();

      // ldInst
      // 
      typedef ::IEC61850::SCL::tAnyName ldInst_type;
      typedef ::xsd::cxx::tree::optional< ldInst_type > ldInst_optional;
      typedef ::xsd::cxx::tree::traits< ldInst_type, char > ldInst_traits;

      const ldInst_optional&
      ldInst () const;

      ldInst_optional&
      ldInst ();

      void
      ldInst (const ldInst_type& x);

      void
      ldInst (const ldInst_optional& x);

      void
      ldInst (::std::auto_ptr< ldInst_type > p);

      // prefix
      // 
      typedef ::IEC61850::SCL::tAnyName prefix_type;
      typedef ::xsd::cxx::tree::optional< prefix_type > prefix_optional;
      typedef ::xsd::cxx::tree::traits< prefix_type, char > prefix_traits;

      const prefix_optional&
      prefix () const;

      prefix_optional&
      prefix ();

      void
      prefix (const prefix_type& x);

      void
      prefix (const prefix_optional& x);

      void
      prefix (::std::auto_ptr< prefix_type > p);

      // lnType
      // 
      typedef ::IEC61850::SCL::tName lnType_type;
      typedef ::xsd::cxx::tree::optional< lnType_type > lnType_optional;
      typedef ::xsd::cxx::tree::traits< lnType_type, char > lnType_traits;

      const lnType_optional&
      lnType () const;

      lnType_optional&
      lnType ();

      void
      lnType (const lnType_type& x);

      void
      lnType (const lnType_optional& x);

      void
      lnType (::std::auto_ptr< lnType_type > p);

      // Constructors.
      //
      tLNode (const lnClass_type&);

      tLNode (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      tLNode (const tLNode& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual tLNode*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tLNode ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      lnInst_optional lnInst_;
      ::xsd::cxx::tree::one< lnClass_type > lnClass_;
      ::xsd::cxx::tree::one< iedName_type > iedName_;
      static const iedName_type iedName_default_value_;
      ldInst_optional ldInst_;
      prefix_optional prefix_;
      lnType_optional lnType_;
    };

    class tFunction: public ::IEC61850::SCL::tPowerSystemResource
    {
      public:
      // SubFunction
      // 
      typedef ::IEC61850::SCL::tSubFunction SubFunction_type;
      typedef ::xsd::cxx::tree::sequence< SubFunction_type > SubFunction_sequence;
      typedef SubFunction_sequence::iterator SubFunction_iterator;
      typedef SubFunction_sequence::const_iterator SubFunction_const_iterator;
      typedef ::xsd::cxx::tree::traits< SubFunction_type, char > SubFunction_traits;

      const SubFunction_sequence&
      SubFunction () const;

      SubFunction_sequence&
      SubFunction ();

      void
      SubFunction (const SubFunction_sequence& s);

      // GeneralEquipment
      // 
      typedef ::IEC61850::SCL::tGeneralEquipment GeneralEquipment_type;
      typedef ::xsd::cxx::tree::sequence< GeneralEquipment_type > GeneralEquipment_sequence;
      typedef GeneralEquipment_sequence::iterator GeneralEquipment_iterator;
      typedef GeneralEquipment_sequence::const_iterator GeneralEquipment_const_iterator;
      typedef ::xsd::cxx::tree::traits< GeneralEquipment_type, char > GeneralEquipment_traits;

      const GeneralEquipment_sequence&
      GeneralEquipment () const;

      GeneralEquipment_sequence&
      GeneralEquipment ();

      void
      GeneralEquipment (const GeneralEquipment_sequence& s);

      // Constructors.
      //
      tFunction (const name_type&);

      tFunction (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      tFunction (const tFunction& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual tFunction*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tFunction ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SubFunction_sequence SubFunction_;
      GeneralEquipment_sequence GeneralEquipment_;
    };

    class tSubFunction: public ::IEC61850::SCL::tPowerSystemResource
    {
      public:
      // GeneralEquipment
      // 
      typedef ::IEC61850::SCL::tGeneralEquipment GeneralEquipment_type;
      typedef ::xsd::cxx::tree::sequence< GeneralEquipment_type > GeneralEquipment_sequence;
      typedef GeneralEquipment_sequence::iterator GeneralEquipment_iterator;
      typedef GeneralEquipment_sequence::const_iterator GeneralEquipment_const_iterator;
      typedef ::xsd::cxx::tree::traits< GeneralEquipment_type, char > GeneralEquipment_traits;

      const GeneralEquipment_sequence&
      GeneralEquipment () const;

      GeneralEquipment_sequence&
      GeneralEquipment ();

      void
      GeneralEquipment (const GeneralEquipment_sequence& s);

      // Constructors.
      //
      tSubFunction (const name_type&);

      tSubFunction (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      tSubFunction (const tSubFunction& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual tSubFunction*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tSubFunction ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      GeneralEquipment_sequence GeneralEquipment_;
    };

    class tConnectivityNode: public ::IEC61850::SCL::tLNodeContainer
    {
      public:
      // pathName
      // 
      typedef ::IEC61850::SCL::tRef pathName_type;
      typedef ::xsd::cxx::tree::traits< pathName_type, char > pathName_traits;

      const pathName_type&
      pathName () const;

      pathName_type&
      pathName ();

      void
      pathName (const pathName_type& x);

      void
      pathName (::std::auto_ptr< pathName_type > p);

      // Constructors.
      //
      tConnectivityNode (const name_type&,
                         const pathName_type&);

      tConnectivityNode (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      tConnectivityNode (const tConnectivityNode& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual tConnectivityNode*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tConnectivityNode ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< pathName_type > pathName_;
    };

    class tTerminal: public ::IEC61850::SCL::tUnNaming
    {
      public:
      // name
      // 
      typedef ::IEC61850::SCL::tAnyName name_type;
      typedef ::xsd::cxx::tree::optional< name_type > name_optional;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_optional&
      name () const;

      name_optional&
      name ();

      void
      name (const name_type& x);

      void
      name (const name_optional& x);

      void
      name (::std::auto_ptr< name_type > p);

      // connectivityNode
      // 
      typedef ::IEC61850::SCL::tRef connectivityNode_type;
      typedef ::xsd::cxx::tree::traits< connectivityNode_type, char > connectivityNode_traits;

      const connectivityNode_type&
      connectivityNode () const;

      connectivityNode_type&
      connectivityNode ();

      void
      connectivityNode (const connectivityNode_type& x);

      void
      connectivityNode (::std::auto_ptr< connectivityNode_type > p);

      // substationName
      // 
      typedef ::IEC61850::SCL::tName substationName_type;
      typedef ::xsd::cxx::tree::traits< substationName_type, char > substationName_traits;

      const substationName_type&
      substationName () const;

      substationName_type&
      substationName ();

      void
      substationName (const substationName_type& x);

      void
      substationName (::std::auto_ptr< substationName_type > p);

      // voltageLevelName
      // 
      typedef ::IEC61850::SCL::tName voltageLevelName_type;
      typedef ::xsd::cxx::tree::traits< voltageLevelName_type, char > voltageLevelName_traits;

      const voltageLevelName_type&
      voltageLevelName () const;

      voltageLevelName_type&
      voltageLevelName ();

      void
      voltageLevelName (const voltageLevelName_type& x);

      void
      voltageLevelName (::std::auto_ptr< voltageLevelName_type > p);

      // bayName
      // 
      typedef ::IEC61850::SCL::tName bayName_type;
      typedef ::xsd::cxx::tree::traits< bayName_type, char > bayName_traits;

      const bayName_type&
      bayName () const;

      bayName_type&
      bayName ();

      void
      bayName (const bayName_type& x);

      void
      bayName (::std::auto_ptr< bayName_type > p);

      // cNodeName
      // 
      typedef ::IEC61850::SCL::tName cNodeName_type;
      typedef ::xsd::cxx::tree::traits< cNodeName_type, char > cNodeName_traits;

      const cNodeName_type&
      cNodeName () const;

      cNodeName_type&
      cNodeName ();

      void
      cNodeName (const cNodeName_type& x);

      void
      cNodeName (::std::auto_ptr< cNodeName_type > p);

      // Constructors.
      //
      tTerminal (const connectivityNode_type&,
                 const substationName_type&,
                 const voltageLevelName_type&,
                 const bayName_type&,
                 const cNodeName_type&);

      tTerminal (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      tTerminal (const tTerminal& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual tTerminal*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~tTerminal ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      name_optional name_;
      ::xsd::cxx::tree::one< connectivityNode_type > connectivityNode_;
      ::xsd::cxx::tree::one< substationName_type > substationName_;
      ::xsd::cxx::tree::one< voltageLevelName_type > voltageLevelName_;
      ::xsd::cxx::tree::one< bayName_type > bayName_;
      ::xsd::cxx::tree::one< cNodeName_type > cNodeName_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace IEC61850
{
  namespace SCL
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace IEC61850
{
  namespace SCL
  {
    void
    operator<< (::xercesc::DOMElement&, const tLNodeContainer&);

    void
    operator<< (::xercesc::DOMElement&, const tPowerSystemResource&);

    void
    operator<< (::xercesc::DOMElement&, const tEquipmentContainer&);

    void
    operator<< (::xercesc::DOMElement&, const tEquipment&);

    void
    operator<< (::xercesc::DOMElement&, const tAbstractConductingEquipment&);

    void
    operator<< (::xercesc::DOMElement&, const tConductingEquipment&);

    void
    operator<< (::xercesc::DOMElement&, const tSubEquipment&);

    void
    operator<< (::xercesc::DOMElement&, const tPowerTransformer&);

    void
    operator<< (::xercesc::DOMElement&, const tTransformerWinding&);

    void
    operator<< (::xercesc::DOMElement&, const tTapChanger&);

    void
    operator<< (::xercesc::DOMElement&, const tGeneralEquipment&);

    void
    operator<< (::xercesc::DOMElement&, const tSubstation&);

    void
    operator<< (::xercesc::DOMElement&, const tVoltageLevel&);

    void
    operator<< (::xercesc::DOMElement&, const tBay&);

    void
    operator<< (::xercesc::DOMElement&, const tLNode&);

    void
    operator<< (::xercesc::DOMElement&, const tFunction&);

    void
    operator<< (::xercesc::DOMElement&, const tSubFunction&);

    void
    operator<< (::xercesc::DOMElement&, const tConnectivityNode&);

    void
    operator<< (::xercesc::DOMElement&, const tTerminal&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCL_SUBSTATION_H
