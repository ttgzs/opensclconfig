// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCL_DATA_TYPE_TEMPLATES_PSKEL_H
#define SCL_DATA_TYPE_TEMPLATES_PSKEL_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tAbstractDataAttribute_pskel;
      class tLNodeType_pskel;
      class tDO_pskel;
      class tDOType_pskel;
      class tSDO_pskel;
      class tDA_pskel;
      class tDAType_pskel;
      class tBDA_pskel;
      class tEnumType_pskel;
      class tEnumVal_pskel;
      class tDataTypeTemplates_pskel;
    }
  }
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

#include "SCL_BaseTypes-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tAbstractDataAttribute_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Val ();

        virtual void
        name ();

        virtual void
        sAddr (const ::std::string&);

        virtual void
        bType ();

        virtual void
        valKind ();

        virtual void
        type ();

        virtual void
        count (unsigned int);

        virtual void
        post_tAbstractDataAttribute ();

        // Parser construction API.
        //
        void
        Val_parser (::IEC61850::SCL::Validation::tVal_pskel&);

        void
        name_parser (::IEC61850::SCL::Validation::tAttributeNameEnum_pskel&);

        void
        sAddr_parser (::xml_schema::normalized_string_pskel&);

        void
        bType_parser (::IEC61850::SCL::Validation::tBasicTypeEnum_pskel&);

        void
        valKind_parser (::IEC61850::SCL::Validation::tValKindEnum_pskel&);

        void
        type_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        count_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tVal_pskel& /* Val */,
                 ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* sAddr */,
                 ::IEC61850::SCL::Validation::tBasicTypeEnum_pskel& /* bType */,
                 ::IEC61850::SCL::Validation::tValKindEnum_pskel& /* valKind */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* type */,
                 ::xml_schema::unsigned_int_pskel& /* count */);

        // Constructor.
        //
        tAbstractDataAttribute_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tVal_pskel* Val_parser_;
        ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel* name_parser_;
        ::xml_schema::normalized_string_pskel* sAddr_parser_;
        ::IEC61850::SCL::Validation::tBasicTypeEnum_pskel* bType_parser_;
        ::IEC61850::SCL::Validation::tValKindEnum_pskel* valKind_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* type_parser_;
        ::xml_schema::unsigned_int_pskel* count_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tAbstractDataAttribute_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool name;
          bool bType;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tLNodeType_pskel: public virtual ::IEC61850::SCL::Validation::tIDNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        DO ();

        virtual void
        iedType ();

        virtual void
        lnClass ();

        virtual void
        post_tLNodeType ();

        // Parser construction API.
        //
        void
        DO_parser (::IEC61850::SCL::Validation::tDO_pskel&);

        void
        iedType_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* id */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tDO_pskel& /* DO */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* iedType */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */);

        // Constructor.
        //
        tLNodeType_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tDO_pskel* DO_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* iedType_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tLNodeType_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool lnClass;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDO_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        name ();

        virtual void
        type ();

        virtual void
        accessControl (const ::std::string&);

        virtual void
        transient (bool);

        virtual void
        post_tDO ();

        // Parser construction API.
        //
        void
        name_parser (::IEC61850::SCL::Validation::tRestrName1stU_pskel&);

        void
        type_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        accessControl_parser (::xml_schema::normalized_string_pskel&);

        void
        transient_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tRestrName1stU_pskel& /* name */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* type */,
                 ::xml_schema::normalized_string_pskel& /* accessControl */,
                 ::xml_schema::boolean_pskel& /* transient */);

        // Constructor.
        //
        tDO_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tRestrName1stU_pskel* name_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* type_parser_;
        ::xml_schema::normalized_string_pskel* accessControl_parser_;
        ::xml_schema::boolean_pskel* transient_parser_;

        protected:
        struct v_state_attr_
        {
          bool name;
          bool type;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDOType_pskel: public virtual ::IEC61850::SCL::Validation::tIDNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        SDO ();

        virtual void
        DA ();

        virtual void
        iedType ();

        virtual void
        cdc ();

        virtual void
        post_tDOType ();

        // Parser construction API.
        //
        void
        SDO_parser (::IEC61850::SCL::Validation::tSDO_pskel&);

        void
        DA_parser (::IEC61850::SCL::Validation::tDA_pskel&);

        void
        iedType_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        cdc_parser (::IEC61850::SCL::Validation::tCDCEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* id */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tSDO_pskel& /* SDO */,
                 ::IEC61850::SCL::Validation::tDA_pskel& /* DA */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* iedType */,
                 ::IEC61850::SCL::Validation::tCDCEnum_pskel& /* cdc */);

        // Constructor.
        //
        tDOType_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tSDO_pskel* SDO_parser_;
        ::IEC61850::SCL::Validation::tDA_pskel* DA_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* iedType_parser_;
        ::IEC61850::SCL::Validation::tCDCEnum_pskel* cdc_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tDOType_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        choice_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);

        protected:
        struct v_state_attr_
        {
          bool cdc;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tSDO_pskel: public virtual ::IEC61850::SCL::Validation::tNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        type ();

        virtual void
        post_tSDO ();

        // Parser construction API.
        //
        void
        type_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* type */);

        // Constructor.
        //
        tSDO_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* type_parser_;

        protected:
        struct v_state_attr_
        {
          bool type;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDA_pskel: public virtual ::IEC61850::SCL::Validation::tAbstractDataAttribute_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        dchg (bool);

        virtual void
        qchg (bool);

        virtual void
        dupd (bool);

        virtual void
        fc ();

        virtual void
        post_tDA ();

        // Parser construction API.
        //
        void
        dchg_parser (::xml_schema::boolean_pskel&);

        void
        qchg_parser (::xml_schema::boolean_pskel&);

        void
        dupd_parser (::xml_schema::boolean_pskel&);

        void
        fc_parser (::IEC61850::SCL::Validation::tFCEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tVal_pskel& /* Val */,
                 ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* sAddr */,
                 ::IEC61850::SCL::Validation::tBasicTypeEnum_pskel& /* bType */,
                 ::IEC61850::SCL::Validation::tValKindEnum_pskel& /* valKind */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* type */,
                 ::xml_schema::unsigned_int_pskel& /* count */,
                 ::xml_schema::boolean_pskel& /* dchg */,
                 ::xml_schema::boolean_pskel& /* qchg */,
                 ::xml_schema::boolean_pskel& /* dupd */,
                 ::IEC61850::SCL::Validation::tFCEnum_pskel& /* fc */);

        // Constructor.
        //
        tDA_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* dchg_parser_;
        ::xml_schema::boolean_pskel* qchg_parser_;
        ::xml_schema::boolean_pskel* dupd_parser_;
        ::IEC61850::SCL::Validation::tFCEnum_pskel* fc_parser_;

        protected:
        struct v_state_attr_
        {
          bool fc;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDAType_pskel: public virtual ::IEC61850::SCL::Validation::tIDNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        BDA ();

        virtual void
        iedType ();

        virtual void
        post_tDAType ();

        // Parser construction API.
        //
        void
        BDA_parser (::IEC61850::SCL::Validation::tBDA_pskel&);

        void
        iedType_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* id */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tBDA_pskel& /* BDA */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* iedType */);

        // Constructor.
        //
        tDAType_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tBDA_pskel* BDA_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* iedType_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tDAType_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tBDA_pskel: public virtual ::IEC61850::SCL::Validation::tAbstractDataAttribute_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tBDA ();
      };

      class tEnumType_pskel: public virtual ::IEC61850::SCL::Validation::tIDNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        EnumVal ();

        virtual void
        post_tEnumType ();

        // Parser construction API.
        //
        void
        EnumVal_parser (::IEC61850::SCL::Validation::tEnumVal_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* id */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tEnumVal_pskel& /* EnumVal */);

        // Constructor.
        //
        tEnumType_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tEnumVal_pskel* EnumVal_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tEnumType_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tEnumVal_pskel: public virtual ::xml_schema::normalized_string_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        ord (long long);

        virtual void
        post_tEnumVal ();

        // Parser construction API.
        //
        void
        ord_parser (::xml_schema::integer_pskel&);

        void
        parsers (::xml_schema::integer_pskel& /* ord */);

        // Constructor.
        //
        tEnumVal_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::integer_pskel* ord_parser_;

        protected:
        struct v_state_attr_
        {
          bool ord;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDataTypeTemplates_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        LNodeType ();

        virtual void
        DOType ();

        virtual void
        DAType ();

        virtual void
        EnumType ();

        virtual void
        post_tDataTypeTemplates ();

        // Parser construction API.
        //
        void
        LNodeType_parser (::IEC61850::SCL::Validation::tLNodeType_pskel&);

        void
        DOType_parser (::IEC61850::SCL::Validation::tDOType_pskel&);

        void
        DAType_parser (::IEC61850::SCL::Validation::tDAType_pskel&);

        void
        EnumType_parser (::IEC61850::SCL::Validation::tEnumType_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tLNodeType_pskel& /* LNodeType */,
                 ::IEC61850::SCL::Validation::tDOType_pskel& /* DOType */,
                 ::IEC61850::SCL::Validation::tDAType_pskel& /* DAType */,
                 ::IEC61850::SCL::Validation::tEnumType_pskel& /* EnumType */);

        // Constructor.
        //
        tDataTypeTemplates_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tLNodeType_pskel* LNodeType_parser_;
        ::IEC61850::SCL::Validation::tDOType_pskel* DOType_parser_;
        ::IEC61850::SCL::Validation::tDAType_pskel* DAType_parser_;
        ::IEC61850::SCL::Validation::tEnumType_pskel* EnumType_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tDataTypeTemplates_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCL_DATA_TYPE_TEMPLATES_PSKEL_H
