// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCL_BASE_TYPES_PSKEL_H
#define SCL_BASE_TYPES_PSKEL_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tBaseElement_pskel;
      class tUnNaming_pskel;
      class tNaming_pskel;
      class tIDNaming_pskel;
      class tAnyContentFromOtherNamespace_pskel;
      class tText_pskel;
      class tPrivate_pskel;
      class tHeader_pskel;
      class tHitem_pskel;
      class tVal_pskel;
      class tValueWithUnit_pskel;
      class tVoltage_pskel;
      class tBitRateInMbPerSec_pskel;
      class tDurationInSec_pskel;
      class tDurationInMilliSec_pskel;
      class History_pskel;
      class nameStructure_pskel;
    }
  }
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

#include "SCL_Enums-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tBaseElement_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Text ();

        virtual void
        Private ();

        virtual void
        post_tBaseElement ();

        // Parser construction API.
        //
        void
        Text_parser (::IEC61850::SCL::Validation::tText_pskel&);

        void
        Private_parser (::IEC61850::SCL::Validation::tPrivate_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */);

        // Constructor.
        //
        tBaseElement_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_two (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tText_pskel* Text_parser_;
        ::IEC61850::SCL::Validation::tPrivate_pskel* Private_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tBaseElement_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tUnNaming_pskel: public virtual ::IEC61850::SCL::Validation::tBaseElement_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        desc (const ::std::string&);

        virtual void
        post_tUnNaming ();

        // Parser construction API.
        //
        void
        desc_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */);

        // Constructor.
        //
        tUnNaming_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::normalized_string_pskel* desc_parser_;
      };

      class tNaming_pskel: public virtual ::IEC61850::SCL::Validation::tBaseElement_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        name ();

        virtual void
        desc (const ::std::string&);

        virtual void
        post_tNaming ();

        // Parser construction API.
        //
        void
        name_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        desc_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */);

        // Constructor.
        //
        tNaming_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* name_parser_;
        ::xml_schema::normalized_string_pskel* desc_parser_;

        protected:
        struct v_state_attr_
        {
          bool name;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tIDNaming_pskel: public virtual ::IEC61850::SCL::Validation::tBaseElement_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        id ();

        virtual void
        desc (const ::std::string&);

        virtual void
        post_tIDNaming ();

        // Parser construction API.
        //
        void
        id_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        desc_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* id */,
                 ::xml_schema::normalized_string_pskel& /* desc */);

        // Constructor.
        //
        tIDNaming_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* id_parser_;
        ::xml_schema::normalized_string_pskel* desc_parser_;

        protected:
        struct v_state_attr_
        {
          bool id;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tAnyContentFromOtherNamespace_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tAnyContentFromOtherNamespace ();

        // Constructor.
        //
        tAnyContentFromOtherNamespace_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_two (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);

        virtual bool
        _characters_impl (const ::xml_schema::ro_string&);

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tText_pskel: public virtual ::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        source (const ::std::string&);

        virtual void
        post_tText ();

        // Parser construction API.
        //
        void
        source_parser (::xml_schema::uri_pskel&);

        void
        parsers (::xml_schema::uri_pskel& /* source */);

        // Constructor.
        //
        tText_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        virtual bool
        _characters_impl (const ::xml_schema::ro_string&);

        protected:
        ::xml_schema::uri_pskel* source_parser_;
      };

      class tPrivate_pskel: public virtual ::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        type (const ::std::string&);

        virtual void
        source (const ::std::string&);

        virtual void
        post_tPrivate ();

        // Parser construction API.
        //
        void
        type_parser (::xml_schema::normalized_string_pskel&);

        void
        source_parser (::xml_schema::uri_pskel&);

        void
        parsers (::xml_schema::normalized_string_pskel& /* type */,
                 ::xml_schema::uri_pskel& /* source */);

        // Constructor.
        //
        tPrivate_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        virtual bool
        _characters_impl (const ::xml_schema::ro_string&);

        protected:
        ::xml_schema::normalized_string_pskel* type_parser_;
        ::xml_schema::uri_pskel* source_parser_;
      };

      class tHeader_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Text ();

        virtual void
        History ();

        virtual void
        id (const ::std::string&);

        virtual void
        version (const ::std::string&);

        virtual void
        revision (const ::std::string&);

        virtual void
        toolID (const ::std::string&);

        virtual void
        nameStructure ();

        virtual void
        post_tHeader ();

        // Parser construction API.
        //
        void
        Text_parser (::IEC61850::SCL::Validation::tText_pskel&);

        void
        History_parser (::IEC61850::SCL::Validation::History_pskel&);

        void
        id_parser (::xml_schema::normalized_string_pskel&);

        void
        version_parser (::xml_schema::normalized_string_pskel&);

        void
        revision_parser (::xml_schema::normalized_string_pskel&);

        void
        toolID_parser (::xml_schema::normalized_string_pskel&);

        void
        nameStructure_parser (::IEC61850::SCL::Validation::nameStructure_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::History_pskel& /* History */,
                 ::xml_schema::normalized_string_pskel& /* id */,
                 ::xml_schema::normalized_string_pskel& /* version */,
                 ::xml_schema::normalized_string_pskel& /* revision */,
                 ::xml_schema::normalized_string_pskel& /* toolID */,
                 ::IEC61850::SCL::Validation::nameStructure_pskel& /* nameStructure */);

        // Constructor.
        //
        tHeader_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tText_pskel* Text_parser_;
        ::IEC61850::SCL::Validation::History_pskel* History_parser_;
        ::xml_schema::normalized_string_pskel* id_parser_;
        ::xml_schema::normalized_string_pskel* version_parser_;
        ::xml_schema::normalized_string_pskel* revision_parser_;
        ::xml_schema::normalized_string_pskel* toolID_parser_;
        ::IEC61850::SCL::Validation::nameStructure_pskel* nameStructure_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tHeader_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool id;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tHitem_pskel: public virtual ::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        version (const ::std::string&);

        virtual void
        revision (const ::std::string&);

        virtual void
        when (const ::std::string&);

        virtual void
        who (const ::std::string&);

        virtual void
        what (const ::std::string&);

        virtual void
        why (const ::std::string&);

        virtual void
        post_tHitem ();

        // Parser construction API.
        //
        void
        version_parser (::xml_schema::normalized_string_pskel&);

        void
        revision_parser (::xml_schema::normalized_string_pskel&);

        void
        when_parser (::xml_schema::normalized_string_pskel&);

        void
        who_parser (::xml_schema::normalized_string_pskel&);

        void
        what_parser (::xml_schema::normalized_string_pskel&);

        void
        why_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::xml_schema::normalized_string_pskel& /* version */,
                 ::xml_schema::normalized_string_pskel& /* revision */,
                 ::xml_schema::normalized_string_pskel& /* when */,
                 ::xml_schema::normalized_string_pskel& /* who */,
                 ::xml_schema::normalized_string_pskel& /* what */,
                 ::xml_schema::normalized_string_pskel& /* why */);

        // Constructor.
        //
        tHitem_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        virtual bool
        _characters_impl (const ::xml_schema::ro_string&);

        protected:
        ::xml_schema::normalized_string_pskel* version_parser_;
        ::xml_schema::normalized_string_pskel* revision_parser_;
        ::xml_schema::normalized_string_pskel* when_parser_;
        ::xml_schema::normalized_string_pskel* who_parser_;
        ::xml_schema::normalized_string_pskel* what_parser_;
        ::xml_schema::normalized_string_pskel* why_parser_;

        protected:
        struct v_state_attr_
        {
          bool version;
          bool revision;
          bool when;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tVal_pskel: public virtual ::xml_schema::normalized_string_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        sGroup (unsigned int);

        virtual void
        post_tVal ();

        // Parser construction API.
        //
        void
        sGroup_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::xml_schema::unsigned_int_pskel& /* sGroup */);

        // Constructor.
        //
        tVal_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::unsigned_int_pskel* sGroup_parser_;
      };

      class tValueWithUnit_pskel: public virtual ::xml_schema::decimal_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        unit ();

        virtual void
        multiplier ();

        virtual void
        post_tValueWithUnit ();

        // Parser construction API.
        //
        void
        unit_parser (::IEC61850::SCL::Validation::tSIUnitEnum_pskel&);

        void
        multiplier_parser (::IEC61850::SCL::Validation::tUnitMultiplierEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tSIUnitEnum_pskel& /* unit */,
                 ::IEC61850::SCL::Validation::tUnitMultiplierEnum_pskel& /* multiplier */);

        // Constructor.
        //
        tValueWithUnit_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tSIUnitEnum_pskel* unit_parser_;
        ::IEC61850::SCL::Validation::tUnitMultiplierEnum_pskel* multiplier_parser_;

        protected:
        struct v_state_attr_
        {
          bool unit;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tVoltage_pskel: public virtual ::IEC61850::SCL::Validation::tValueWithUnit_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tVoltage ();

        // Constructor.
        //
        tVoltage_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        struct v_state_attr_
        {
          bool unit;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tBitRateInMbPerSec_pskel: public virtual ::IEC61850::SCL::Validation::tValueWithUnit_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tBitRateInMbPerSec ();

        // Constructor.
        //
        tBitRateInMbPerSec_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        struct v_state_attr_
        {
          bool unit;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDurationInSec_pskel: public virtual ::IEC61850::SCL::Validation::tValueWithUnit_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tDurationInSec ();

        // Constructor.
        //
        tDurationInSec_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        struct v_state_attr_
        {
          bool unit;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDurationInMilliSec_pskel: public virtual ::IEC61850::SCL::Validation::tValueWithUnit_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tDurationInMilliSec ();

        // Constructor.
        //
        tDurationInMilliSec_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        struct v_state_attr_
        {
          bool unit;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class History_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Hitem ();

        virtual void
        post_History ();

        // Parser construction API.
        //
        void
        Hitem_parser (::IEC61850::SCL::Validation::tHitem_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tHitem_pskel& /* Hitem */);

        // Constructor.
        //
        History_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tHitem_pskel* Hitem_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::History_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class nameStructure_pskel: public virtual ::xml_schema::name_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_nameStructure ();
      };
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCL_BASE_TYPES_PSKEL_H
