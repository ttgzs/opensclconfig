// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "SCL_DataTypeTemplates-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // tAbstractDataAttribute_pskel
      //

      void tAbstractDataAttribute_pskel::
      Val_parser (::IEC61850::SCL::Validation::tVal_pskel& p)
      {
        this->Val_parser_ = &p;
      }

      void tAbstractDataAttribute_pskel::
      name_parser (::IEC61850::SCL::Validation::tAttributeNameEnum_pskel& p)
      {
        this->name_parser_ = &p;
      }

      void tAbstractDataAttribute_pskel::
      sAddr_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->sAddr_parser_ = &p;
      }

      void tAbstractDataAttribute_pskel::
      bType_parser (::IEC61850::SCL::Validation::tBasicTypeEnum_pskel& p)
      {
        this->bType_parser_ = &p;
      }

      void tAbstractDataAttribute_pskel::
      valKind_parser (::IEC61850::SCL::Validation::tValKindEnum_pskel& p)
      {
        this->valKind_parser_ = &p;
      }

      void tAbstractDataAttribute_pskel::
      type_parser (::IEC61850::SCL::Validation::tAnyName_pskel& p)
      {
        this->type_parser_ = &p;
      }

      void tAbstractDataAttribute_pskel::
      count_parser (::xml_schema::unsigned_int_pskel& p)
      {
        this->count_parser_ = &p;
      }

      void tAbstractDataAttribute_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tVal_pskel& Val,
               ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel& name,
               ::xml_schema::normalized_string_pskel& sAddr,
               ::IEC61850::SCL::Validation::tBasicTypeEnum_pskel& bType,
               ::IEC61850::SCL::Validation::tValKindEnum_pskel& valKind,
               ::IEC61850::SCL::Validation::tAnyName_pskel& type,
               ::xml_schema::unsigned_int_pskel& count)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
        this->Val_parser_ = &Val;
        this->name_parser_ = &name;
        this->sAddr_parser_ = &sAddr;
        this->bType_parser_ = &bType;
        this->valKind_parser_ = &valKind;
        this->type_parser_ = &type;
        this->count_parser_ = &count;
      }

      tAbstractDataAttribute_pskel::
      tAbstractDataAttribute_pskel ()
      : Val_parser_ (0),
        name_parser_ (0),
        sAddr_parser_ (0),
        bType_parser_ (0),
        valKind_parser_ (0),
        type_parser_ (0),
        count_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tLNodeType_pskel
      //

      void tLNodeType_pskel::
      DO_parser (::IEC61850::SCL::Validation::tDO_pskel& p)
      {
        this->DO_parser_ = &p;
      }

      void tLNodeType_pskel::
      iedType_parser (::IEC61850::SCL::Validation::tAnyName_pskel& p)
      {
        this->iedType_parser_ = &p;
      }

      void tLNodeType_pskel::
      lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel& p)
      {
        this->lnClass_parser_ = &p;
      }

      void tLNodeType_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& id,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tDO_pskel& DO,
               ::IEC61850::SCL::Validation::tAnyName_pskel& iedType,
               ::IEC61850::SCL::Validation::tLNClassEnum_pskel& lnClass)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->id_parser_ = &id;
        this->desc_parser_ = &desc;
        this->DO_parser_ = &DO;
        this->iedType_parser_ = &iedType;
        this->lnClass_parser_ = &lnClass;
      }

      tLNodeType_pskel::
      tLNodeType_pskel ()
      : DO_parser_ (0),
        iedType_parser_ (0),
        lnClass_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tDO_pskel
      //

      void tDO_pskel::
      name_parser (::IEC61850::SCL::Validation::tRestrName1stU_pskel& p)
      {
        this->name_parser_ = &p;
      }

      void tDO_pskel::
      type_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->type_parser_ = &p;
      }

      void tDO_pskel::
      accessControl_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->accessControl_parser_ = &p;
      }

      void tDO_pskel::
      transient_parser (::xml_schema::boolean_pskel& p)
      {
        this->transient_parser_ = &p;
      }

      void tDO_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tRestrName1stU_pskel& name,
               ::IEC61850::SCL::Validation::tName_pskel& type,
               ::xml_schema::normalized_string_pskel& accessControl,
               ::xml_schema::boolean_pskel& transient)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
        this->name_parser_ = &name;
        this->type_parser_ = &type;
        this->accessControl_parser_ = &accessControl;
        this->transient_parser_ = &transient;
      }

      tDO_pskel::
      tDO_pskel ()
      : name_parser_ (0),
        type_parser_ (0),
        accessControl_parser_ (0),
        transient_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tDOType_pskel
      //

      void tDOType_pskel::
      SDO_parser (::IEC61850::SCL::Validation::tSDO_pskel& p)
      {
        this->SDO_parser_ = &p;
      }

      void tDOType_pskel::
      DA_parser (::IEC61850::SCL::Validation::tDA_pskel& p)
      {
        this->DA_parser_ = &p;
      }

      void tDOType_pskel::
      iedType_parser (::IEC61850::SCL::Validation::tAnyName_pskel& p)
      {
        this->iedType_parser_ = &p;
      }

      void tDOType_pskel::
      cdc_parser (::IEC61850::SCL::Validation::tCDCEnum_pskel& p)
      {
        this->cdc_parser_ = &p;
      }

      void tDOType_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& id,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tSDO_pskel& SDO,
               ::IEC61850::SCL::Validation::tDA_pskel& DA,
               ::IEC61850::SCL::Validation::tAnyName_pskel& iedType,
               ::IEC61850::SCL::Validation::tCDCEnum_pskel& cdc)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->id_parser_ = &id;
        this->desc_parser_ = &desc;
        this->SDO_parser_ = &SDO;
        this->DA_parser_ = &DA;
        this->iedType_parser_ = &iedType;
        this->cdc_parser_ = &cdc;
      }

      tDOType_pskel::
      tDOType_pskel ()
      : SDO_parser_ (0),
        DA_parser_ (0),
        iedType_parser_ (0),
        cdc_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tSDO_pskel
      //

      void tSDO_pskel::
      type_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->type_parser_ = &p;
      }

      void tSDO_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& name,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tName_pskel& type)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->name_parser_ = &name;
        this->desc_parser_ = &desc;
        this->type_parser_ = &type;
      }

      tSDO_pskel::
      tSDO_pskel ()
      : type_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tDA_pskel
      //

      void tDA_pskel::
      dchg_parser (::xml_schema::boolean_pskel& p)
      {
        this->dchg_parser_ = &p;
      }

      void tDA_pskel::
      qchg_parser (::xml_schema::boolean_pskel& p)
      {
        this->qchg_parser_ = &p;
      }

      void tDA_pskel::
      dupd_parser (::xml_schema::boolean_pskel& p)
      {
        this->dupd_parser_ = &p;
      }

      void tDA_pskel::
      fc_parser (::IEC61850::SCL::Validation::tFCEnum_pskel& p)
      {
        this->fc_parser_ = &p;
      }

      void tDA_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tVal_pskel& Val,
               ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel& name,
               ::xml_schema::normalized_string_pskel& sAddr,
               ::IEC61850::SCL::Validation::tBasicTypeEnum_pskel& bType,
               ::IEC61850::SCL::Validation::tValKindEnum_pskel& valKind,
               ::IEC61850::SCL::Validation::tAnyName_pskel& type,
               ::xml_schema::unsigned_int_pskel& count,
               ::xml_schema::boolean_pskel& dchg,
               ::xml_schema::boolean_pskel& qchg,
               ::xml_schema::boolean_pskel& dupd,
               ::IEC61850::SCL::Validation::tFCEnum_pskel& fc)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
        this->Val_parser_ = &Val;
        this->name_parser_ = &name;
        this->sAddr_parser_ = &sAddr;
        this->bType_parser_ = &bType;
        this->valKind_parser_ = &valKind;
        this->type_parser_ = &type;
        this->count_parser_ = &count;
        this->dchg_parser_ = &dchg;
        this->qchg_parser_ = &qchg;
        this->dupd_parser_ = &dupd;
        this->fc_parser_ = &fc;
      }

      tDA_pskel::
      tDA_pskel ()
      : dchg_parser_ (0),
        qchg_parser_ (0),
        dupd_parser_ (0),
        fc_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tDAType_pskel
      //

      void tDAType_pskel::
      BDA_parser (::IEC61850::SCL::Validation::tBDA_pskel& p)
      {
        this->BDA_parser_ = &p;
      }

      void tDAType_pskel::
      iedType_parser (::IEC61850::SCL::Validation::tAnyName_pskel& p)
      {
        this->iedType_parser_ = &p;
      }

      void tDAType_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& id,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tBDA_pskel& BDA,
               ::IEC61850::SCL::Validation::tAnyName_pskel& iedType)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->id_parser_ = &id;
        this->desc_parser_ = &desc;
        this->BDA_parser_ = &BDA;
        this->iedType_parser_ = &iedType;
      }

      tDAType_pskel::
      tDAType_pskel ()
      : BDA_parser_ (0),
        iedType_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tEnumType_pskel
      //

      void tEnumType_pskel::
      EnumVal_parser (::IEC61850::SCL::Validation::tEnumVal_pskel& p)
      {
        this->EnumVal_parser_ = &p;
      }

      void tEnumType_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& id,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tEnumVal_pskel& EnumVal)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->id_parser_ = &id;
        this->desc_parser_ = &desc;
        this->EnumVal_parser_ = &EnumVal;
      }

      tEnumType_pskel::
      tEnumType_pskel ()
      : EnumVal_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tEnumVal_pskel
      //

      void tEnumVal_pskel::
      ord_parser (::xml_schema::integer_pskel& p)
      {
        this->ord_parser_ = &p;
      }

      void tEnumVal_pskel::
      parsers (::xml_schema::integer_pskel& ord)
      {
        this->ord_parser_ = &ord;
      }

      tEnumVal_pskel::
      tEnumVal_pskel ()
      : ord_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tDataTypeTemplates_pskel
      //

      void tDataTypeTemplates_pskel::
      LNodeType_parser (::IEC61850::SCL::Validation::tLNodeType_pskel& p)
      {
        this->LNodeType_parser_ = &p;
      }

      void tDataTypeTemplates_pskel::
      DOType_parser (::IEC61850::SCL::Validation::tDOType_pskel& p)
      {
        this->DOType_parser_ = &p;
      }

      void tDataTypeTemplates_pskel::
      DAType_parser (::IEC61850::SCL::Validation::tDAType_pskel& p)
      {
        this->DAType_parser_ = &p;
      }

      void tDataTypeTemplates_pskel::
      EnumType_parser (::IEC61850::SCL::Validation::tEnumType_pskel& p)
      {
        this->EnumType_parser_ = &p;
      }

      void tDataTypeTemplates_pskel::
      parsers (::IEC61850::SCL::Validation::tLNodeType_pskel& LNodeType,
               ::IEC61850::SCL::Validation::tDOType_pskel& DOType,
               ::IEC61850::SCL::Validation::tDAType_pskel& DAType,
               ::IEC61850::SCL::Validation::tEnumType_pskel& EnumType)
      {
        this->LNodeType_parser_ = &LNodeType;
        this->DOType_parser_ = &DOType;
        this->DAType_parser_ = &DAType;
        this->EnumType_parser_ = &EnumType;
      }

      tDataTypeTemplates_pskel::
      tDataTypeTemplates_pskel ()
      : LNodeType_parser_ (0),
        DOType_parser_ (0),
        DAType_parser_ (0),
        EnumType_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // tAbstractDataAttribute_pskel
      //

      void tAbstractDataAttribute_pskel::
      Val ()
      {
      }

      void tAbstractDataAttribute_pskel::
      name ()
      {
      }

      void tAbstractDataAttribute_pskel::
      sAddr (const ::std::string&)
      {
      }

      void tAbstractDataAttribute_pskel::
      bType ()
      {
      }

      void tAbstractDataAttribute_pskel::
      valKind ()
      {
      }

      void tAbstractDataAttribute_pskel::
      type ()
      {
      }

      void tAbstractDataAttribute_pskel::
      count (unsigned int)
      {
      }

      void tAbstractDataAttribute_pskel::
      post_tAbstractDataAttribute ()
      {
        post_tUnNaming ();
      }

      // tLNodeType_pskel
      //

      void tLNodeType_pskel::
      DO ()
      {
      }

      void tLNodeType_pskel::
      iedType ()
      {
      }

      void tLNodeType_pskel::
      lnClass ()
      {
      }

      void tLNodeType_pskel::
      post_tLNodeType ()
      {
        post_tIDNaming ();
      }

      // tDO_pskel
      //

      void tDO_pskel::
      name ()
      {
      }

      void tDO_pskel::
      type ()
      {
      }

      void tDO_pskel::
      accessControl (const ::std::string&)
      {
      }

      void tDO_pskel::
      transient (bool)
      {
      }

      void tDO_pskel::
      post_tDO ()
      {
        post_tUnNaming ();
      }

      // tDOType_pskel
      //

      void tDOType_pskel::
      SDO ()
      {
      }

      void tDOType_pskel::
      DA ()
      {
      }

      void tDOType_pskel::
      iedType ()
      {
      }

      void tDOType_pskel::
      cdc ()
      {
      }

      void tDOType_pskel::
      post_tDOType ()
      {
        post_tIDNaming ();
      }

      // tSDO_pskel
      //

      void tSDO_pskel::
      type ()
      {
      }

      void tSDO_pskel::
      post_tSDO ()
      {
        post_tNaming ();
      }

      // tDA_pskel
      //

      void tDA_pskel::
      dchg (bool)
      {
      }

      void tDA_pskel::
      qchg (bool)
      {
      }

      void tDA_pskel::
      dupd (bool)
      {
      }

      void tDA_pskel::
      fc ()
      {
      }

      void tDA_pskel::
      post_tDA ()
      {
        post_tAbstractDataAttribute ();
      }

      // tDAType_pskel
      //

      void tDAType_pskel::
      BDA ()
      {
      }

      void tDAType_pskel::
      iedType ()
      {
      }

      void tDAType_pskel::
      post_tDAType ()
      {
        post_tIDNaming ();
      }

      // tBDA_pskel
      //

      void tBDA_pskel::
      post_tBDA ()
      {
        post_tAbstractDataAttribute ();
      }

      // tEnumType_pskel
      //

      void tEnumType_pskel::
      EnumVal ()
      {
      }

      void tEnumType_pskel::
      post_tEnumType ()
      {
        post_tIDNaming ();
      }

      // tEnumVal_pskel
      //

      void tEnumVal_pskel::
      ord (long long)
      {
      }

      void tEnumVal_pskel::
      post_tEnumVal ()
      {
      }

      // tDataTypeTemplates_pskel
      //

      void tDataTypeTemplates_pskel::
      LNodeType ()
      {
      }

      void tDataTypeTemplates_pskel::
      DOType ()
      {
      }

      void tDataTypeTemplates_pskel::
      DAType ()
      {
      }

      void tDataTypeTemplates_pskel::
      EnumType ()
      {
      }

      void tDataTypeTemplates_pskel::
      post_tDataTypeTemplates ()
      {
      }
    }
  }
}

#include <cassert>

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Element validation and dispatch functions for tAbstractDataAttribute_pskel.
      //
      bool tAbstractDataAttribute_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tUnNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "Val" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tAbstractDataAttribute_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tAbstractDataAttribute_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tUnNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tAbstractDataAttribute_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_e_validate ();
      }

      void tAbstractDataAttribute_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tUnNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tAbstractDataAttribute_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "Val" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Val_parser_;

                if (this->Val_parser_)
                  this->Val_parser_->pre ();
              }
              else
              {
                if (this->Val_parser_)
                {
                  this->Val_parser_->post_tVal ();
                  this->Val ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tLNodeType_pskel.
      //
      bool tLNodeType_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tIDNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "DO" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tLNodeType_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "DO",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tLNodeType_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tIDNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tLNodeType_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tIDNaming_pskel::_pre_e_validate ();
      }

      void tLNodeType_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tIDNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "DO");

        this->v_state_stack_.pop ();
      }

      void tLNodeType_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "DO" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->DO_parser_;

                if (this->DO_parser_)
                  this->DO_parser_->pre ();
              }
              else
              {
                if (this->DO_parser_)
                {
                  this->DO_parser_->post_tDO ();
                  this->DO ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "DO",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tDOType_pskel.
      //
      bool tDOType_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tIDNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "SDO" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;
            else if (n == "DA" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 1UL;

            if (s != ~0UL)
            {
              vd->count++;

              vd = vs.data + vs.size++;
              vd->func = &tDOType_pskel::choice_0;
              vd->state = s;
              vd->count = 0;

              this->choice_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tDOType_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tIDNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tDOType_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tIDNaming_pskel::_pre_e_validate ();
      }

      void tDOType_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tIDNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tDOType_pskel::
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start)
      {
        XSD_UNUSED (count);
        XSD_UNUSED (ns);
        XSD_UNUSED (n);
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (start)
            {
              this->::xml_schema::complex_content::context_.top ().parser_ = this->SDO_parser_;

              if (this->SDO_parser_)
                this->SDO_parser_->pre ();
            }
            else
            {
              if (this->SDO_parser_)
              {
                this->SDO_parser_->post_tSDO ();
                this->SDO ();
              }

              state = ~0UL;
            }

            break;
          }
          case 1UL:
          {
            if (start)
            {
              this->::xml_schema::complex_content::context_.top ().parser_ = this->DA_parser_;

              if (this->DA_parser_)
                this->DA_parser_->pre ();
            }
            else
            {
              if (this->DA_parser_)
              {
                this->DA_parser_->post_tDA ();
                this->DA ();
              }

              state = ~0UL;
            }

            break;
          }
        }
      }

      // Element validation and dispatch functions for tDAType_pskel.
      //
      bool tDAType_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tIDNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "BDA" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tDAType_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "BDA",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tDAType_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tIDNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tDAType_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tIDNaming_pskel::_pre_e_validate ();
      }

      void tDAType_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tIDNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "BDA");

        this->v_state_stack_.pop ();
      }

      void tDAType_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "BDA" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->BDA_parser_;

                if (this->BDA_parser_)
                  this->BDA_parser_->pre ();
              }
              else
              {
                if (this->BDA_parser_)
                {
                  this->BDA_parser_->post_tBDA ();
                  this->BDA ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "BDA",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tEnumType_pskel.
      //
      bool tEnumType_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tIDNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "EnumVal" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tEnumType_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "EnumVal",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tEnumType_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tIDNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tEnumType_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tIDNaming_pskel::_pre_e_validate ();
      }

      void tEnumType_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tIDNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "EnumVal");

        this->v_state_stack_.pop ();
      }

      void tEnumType_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "EnumVal" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->EnumVal_parser_;

                if (this->EnumVal_parser_)
                  this->EnumVal_parser_->pre ();
              }
              else
              {
                if (this->EnumVal_parser_)
                {
                  this->EnumVal_parser_->post_tEnumVal ();
                  this->EnumVal ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "EnumVal",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tDataTypeTemplates_pskel.
      //
      bool tDataTypeTemplates_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "LNodeType" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tDataTypeTemplates_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "LNodeType",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tDataTypeTemplates_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::xml_schema::complex_content::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tDataTypeTemplates_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;
      }

      void tDataTypeTemplates_pskel::
      _post_e_validate ()
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "LNodeType");

        this->v_state_stack_.pop ();
      }

      void tDataTypeTemplates_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "LNodeType" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->LNodeType_parser_;

                if (this->LNodeType_parser_)
                  this->LNodeType_parser_->pre ();
              }
              else
              {
                if (this->LNodeType_parser_)
                {
                  this->LNodeType_parser_->post_tLNodeType ();
                  this->LNodeType ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "LNodeType",
                  ns, n);
              count = 0;
              state = 1UL;
              // Fall through.
            }
          }
          case 1UL:
          {
            if (n == "DOType" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->DOType_parser_;

                if (this->DOType_parser_)
                  this->DOType_parser_->pre ();
              }
              else
              {
                if (this->DOType_parser_)
                {
                  this->DOType_parser_->post_tDOType ();
                  this->DOType ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "DOType",
                  ns, n);
              count = 0;
              state = 2UL;
              // Fall through.
            }
          }
          case 2UL:
          {
            if (n == "DAType" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->DAType_parser_;

                if (this->DAType_parser_)
                  this->DAType_parser_->pre ();
              }
              else
              {
                if (this->DAType_parser_)
                {
                  this->DAType_parser_->post_tDAType ();
                  this->DAType ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 3UL;
              // Fall through.
            }
          }
          case 3UL:
          {
            if (n == "EnumType" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->EnumType_parser_;

                if (this->EnumType_parser_)
                  this->EnumType_parser_->pre ();
              }
              else
              {
                if (this->EnumType_parser_)
                {
                  this->EnumType_parser_->post_tEnumType ();
                  this->EnumType ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Attribute validation and dispatch functions for tAbstractDataAttribute_pskel.
      //
      bool tAbstractDataAttribute_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "name" && ns.empty ())
        {
          if (this->name_parser_)
          {
            this->name_parser_->pre ();
            this->name_parser_->_pre_impl ();
            this->name_parser_->_characters (s);
            this->name_parser_->_post_impl ();
            this->name_parser_->post_tAttributeNameEnum ();
            this->name ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
          return true;
        }

        if (n == "sAddr" && ns.empty ())
        {
          if (this->sAddr_parser_)
          {
            this->sAddr_parser_->pre ();
            this->sAddr_parser_->_pre_impl ();
            this->sAddr_parser_->_characters (s);
            this->sAddr_parser_->_post_impl ();
            const ::std::string& tmp (this->sAddr_parser_->post_normalized_string ());
            this->sAddr (tmp);
          }

          return true;
        }

        if (n == "bType" && ns.empty ())
        {
          if (this->bType_parser_)
          {
            this->bType_parser_->pre ();
            this->bType_parser_->_pre_impl ();
            this->bType_parser_->_characters (s);
            this->bType_parser_->_post_impl ();
            this->bType_parser_->post_tBasicTypeEnum ();
            this->bType ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->bType = true;
          return true;
        }

        if (n == "valKind" && ns.empty ())
        {
          if (this->valKind_parser_)
          {
            this->valKind_parser_->pre ();
            this->valKind_parser_->_pre_impl ();
            this->valKind_parser_->_characters (s);
            this->valKind_parser_->_post_impl ();
            this->valKind_parser_->post_tValKindEnum ();
            this->valKind ();
          }

          return true;
        }

        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tAnyName ();
            this->type ();
          }

          return true;
        }

        if (n == "count" && ns.empty ())
        {
          if (this->count_parser_)
          {
            this->count_parser_->pre ();
            this->count_parser_->_pre_impl ();
            this->count_parser_->_characters (s);
            this->count_parser_->_post_impl ();
            unsigned int tmp (this->count_parser_->post_unsigned_int ());
            this->count (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tUnNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tAbstractDataAttribute_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.name = false;
        as.bType = false;
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_a_validate ();
      }

      void tAbstractDataAttribute_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.name)
          this->_expected_attribute (
            "", "name");
        if (!as.bType)
          this->_expected_attribute (
            "", "bType");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tLNodeType_pskel.
      //
      bool tLNodeType_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "iedType" && ns.empty ())
        {
          if (this->iedType_parser_)
          {
            this->iedType_parser_->pre ();
            this->iedType_parser_->_pre_impl ();
            this->iedType_parser_->_characters (s);
            this->iedType_parser_->_post_impl ();
            this->iedType_parser_->post_tAnyName ();
            this->iedType ();
          }

          return true;
        }

        if (n == "lnClass" && ns.empty ())
        {
          if (this->lnClass_parser_)
          {
            this->lnClass_parser_->pre ();
            this->lnClass_parser_->_pre_impl ();
            this->lnClass_parser_->_characters (s);
            this->lnClass_parser_->_post_impl ();
            this->lnClass_parser_->post_tLNClassEnum ();
            this->lnClass ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->lnClass = true;
          return true;
        }

        return this->::IEC61850::SCL::Validation::tIDNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tLNodeType_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.lnClass = false;
        this->::IEC61850::SCL::Validation::tIDNaming_pskel::_pre_a_validate ();
      }

      void tLNodeType_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tIDNaming_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.lnClass)
          this->_expected_attribute (
            "", "lnClass");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tDO_pskel.
      //
      bool tDO_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "name" && ns.empty ())
        {
          if (this->name_parser_)
          {
            this->name_parser_->pre ();
            this->name_parser_->_pre_impl ();
            this->name_parser_->_characters (s);
            this->name_parser_->_post_impl ();
            this->name_parser_->post_tRestrName1stU ();
            this->name ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
          return true;
        }

        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tName ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        if (n == "accessControl" && ns.empty ())
        {
          if (this->accessControl_parser_)
          {
            this->accessControl_parser_->pre ();
            this->accessControl_parser_->_pre_impl ();
            this->accessControl_parser_->_characters (s);
            this->accessControl_parser_->_post_impl ();
            const ::std::string& tmp (this->accessControl_parser_->post_normalized_string ());
            this->accessControl (tmp);
          }

          return true;
        }

        if (n == "transient" && ns.empty ())
        {
          if (this->transient_parser_)
          {
            this->transient_parser_->pre ();
            this->transient_parser_->_pre_impl ();
            this->transient_parser_->_characters (s);
            this->transient_parser_->_post_impl ();
            bool tmp (this->transient_parser_->post_boolean ());
            this->transient (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tUnNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tDO_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.name = false;
        as.type = false;
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_a_validate ();
      }

      void tDO_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.name)
          this->_expected_attribute (
            "", "name");
        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tDOType_pskel.
      //
      bool tDOType_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "iedType" && ns.empty ())
        {
          if (this->iedType_parser_)
          {
            this->iedType_parser_->pre ();
            this->iedType_parser_->_pre_impl ();
            this->iedType_parser_->_characters (s);
            this->iedType_parser_->_post_impl ();
            this->iedType_parser_->post_tAnyName ();
            this->iedType ();
          }

          return true;
        }

        if (n == "cdc" && ns.empty ())
        {
          if (this->cdc_parser_)
          {
            this->cdc_parser_->pre ();
            this->cdc_parser_->_pre_impl ();
            this->cdc_parser_->_characters (s);
            this->cdc_parser_->_post_impl ();
            this->cdc_parser_->post_tCDCEnum ();
            this->cdc ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->cdc = true;
          return true;
        }

        return this->::IEC61850::SCL::Validation::tIDNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tDOType_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.cdc = false;
        this->::IEC61850::SCL::Validation::tIDNaming_pskel::_pre_a_validate ();
      }

      void tDOType_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tIDNaming_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.cdc)
          this->_expected_attribute (
            "", "cdc");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tSDO_pskel.
      //
      bool tSDO_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tName ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return this->::IEC61850::SCL::Validation::tNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tSDO_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
        this->::IEC61850::SCL::Validation::tNaming_pskel::_pre_a_validate ();
      }

      void tSDO_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tNaming_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tDA_pskel.
      //
      bool tDA_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "dchg" && ns.empty ())
        {
          if (this->dchg_parser_)
          {
            this->dchg_parser_->pre ();
            this->dchg_parser_->_pre_impl ();
            this->dchg_parser_->_characters (s);
            this->dchg_parser_->_post_impl ();
            bool tmp (this->dchg_parser_->post_boolean ());
            this->dchg (tmp);
          }

          return true;
        }

        if (n == "qchg" && ns.empty ())
        {
          if (this->qchg_parser_)
          {
            this->qchg_parser_->pre ();
            this->qchg_parser_->_pre_impl ();
            this->qchg_parser_->_characters (s);
            this->qchg_parser_->_post_impl ();
            bool tmp (this->qchg_parser_->post_boolean ());
            this->qchg (tmp);
          }

          return true;
        }

        if (n == "dupd" && ns.empty ())
        {
          if (this->dupd_parser_)
          {
            this->dupd_parser_->pre ();
            this->dupd_parser_->_pre_impl ();
            this->dupd_parser_->_characters (s);
            this->dupd_parser_->_post_impl ();
            bool tmp (this->dupd_parser_->post_boolean ());
            this->dupd (tmp);
          }

          return true;
        }

        if (n == "fc" && ns.empty ())
        {
          if (this->fc_parser_)
          {
            this->fc_parser_->pre ();
            this->fc_parser_->_pre_impl ();
            this->fc_parser_->_characters (s);
            this->fc_parser_->_post_impl ();
            this->fc_parser_->post_tFCEnum ();
            this->fc ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->fc = true;
          return true;
        }

        return this->::IEC61850::SCL::Validation::tAbstractDataAttribute_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tDA_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.fc = false;
        this->::IEC61850::SCL::Validation::tAbstractDataAttribute_pskel::_pre_a_validate ();
      }

      void tDA_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tAbstractDataAttribute_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.fc)
          this->_expected_attribute (
            "", "fc");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tDAType_pskel.
      //
      bool tDAType_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "iedType" && ns.empty ())
        {
          if (this->iedType_parser_)
          {
            this->iedType_parser_->pre ();
            this->iedType_parser_->_pre_impl ();
            this->iedType_parser_->_characters (s);
            this->iedType_parser_->_post_impl ();
            this->iedType_parser_->post_tAnyName ();
            this->iedType ();
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tIDNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      // Attribute validation and dispatch functions for tEnumVal_pskel.
      //
      bool tEnumVal_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "ord" && ns.empty ())
        {
          if (this->ord_parser_)
          {
            this->ord_parser_->pre ();
            this->ord_parser_->_pre_impl ();
            this->ord_parser_->_characters (s);
            this->ord_parser_->_post_impl ();
            long long tmp (this->ord_parser_->post_integer ());
            this->ord (tmp);
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->ord = true;
          return true;
        }

        return this->::xml_schema::normalized_string_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tEnumVal_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.ord = false;
        this->::xml_schema::normalized_string_pskel::_pre_a_validate ();
      }

      void tEnumVal_pskel::
      _post_a_validate ()
      {
        this->::xml_schema::normalized_string_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.ord)
          this->_expected_attribute (
            "", "ord");

        this->v_state_attr_stack_.pop ();
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

