// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCL_SUBSTATION_PSKEL_H
#define SCL_SUBSTATION_PSKEL_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tLNodeContainer_pskel;
      class tPowerSystemResource_pskel;
      class tEquipmentContainer_pskel;
      class tEquipment_pskel;
      class tAbstractConductingEquipment_pskel;
      class tConductingEquipment_pskel;
      class tSubEquipment_pskel;
      class tPowerTransformer_pskel;
      class tTransformerWinding_pskel;
      class tTapChanger_pskel;
      class tGeneralEquipment_pskel;
      class tSubstation_pskel;
      class tVoltageLevel_pskel;
      class tBay_pskel;
      class tLNode_pskel;
      class tFunction_pskel;
      class tSubFunction_pskel;
      class tConnectivityNode_pskel;
      class tTerminal_pskel;
    }
  }
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

#include "SCL_BaseTypes-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tLNodeContainer_pskel: public virtual ::IEC61850::SCL::Validation::tNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        LNode ();

        virtual void
        post_tLNodeContainer ();

        // Parser construction API.
        //
        void
        LNode_parser (::IEC61850::SCL::Validation::tLNode_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */);

        // Constructor.
        //
        tLNodeContainer_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tLNode_pskel* LNode_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tLNodeContainer_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tPowerSystemResource_pskel: public virtual ::IEC61850::SCL::Validation::tLNodeContainer_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tPowerSystemResource ();
      };

      class tEquipmentContainer_pskel: public virtual ::IEC61850::SCL::Validation::tPowerSystemResource_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        PowerTransformer ();

        virtual void
        GeneralEquipment ();

        virtual void
        post_tEquipmentContainer ();

        // Parser construction API.
        //
        void
        PowerTransformer_parser (::IEC61850::SCL::Validation::tPowerTransformer_pskel&);

        void
        GeneralEquipment_parser (::IEC61850::SCL::Validation::tGeneralEquipment_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tPowerTransformer_pskel& /* PowerTransformer */,
                 ::IEC61850::SCL::Validation::tGeneralEquipment_pskel& /* GeneralEquipment */);

        // Constructor.
        //
        tEquipmentContainer_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tPowerTransformer_pskel* PowerTransformer_parser_;
        ::IEC61850::SCL::Validation::tGeneralEquipment_pskel* GeneralEquipment_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tEquipmentContainer_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tEquipment_pskel: public virtual ::IEC61850::SCL::Validation::tPowerSystemResource_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        virtual_ (bool);

        virtual void
        post_tEquipment ();

        // Parser construction API.
        //
        void
        virtual_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::xml_schema::boolean_pskel& /* virtual */);

        // Constructor.
        //
        tEquipment_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* virtual__parser_;
      };

      class tAbstractConductingEquipment_pskel: public virtual ::IEC61850::SCL::Validation::tEquipment_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Terminal ();

        virtual void
        SubEquipment ();

        virtual void
        post_tAbstractConductingEquipment ();

        // Parser construction API.
        //
        void
        Terminal_parser (::IEC61850::SCL::Validation::tTerminal_pskel&);

        void
        SubEquipment_parser (::IEC61850::SCL::Validation::tSubEquipment_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::xml_schema::boolean_pskel& /* virtual */,
                 ::IEC61850::SCL::Validation::tTerminal_pskel& /* Terminal */,
                 ::IEC61850::SCL::Validation::tSubEquipment_pskel& /* SubEquipment */);

        // Constructor.
        //
        tAbstractConductingEquipment_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tTerminal_pskel* Terminal_parser_;
        ::IEC61850::SCL::Validation::tSubEquipment_pskel* SubEquipment_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tAbstractConductingEquipment_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tConductingEquipment_pskel: public virtual ::IEC61850::SCL::Validation::tAbstractConductingEquipment_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        type ();

        virtual void
        post_tConductingEquipment ();

        // Parser construction API.
        //
        void
        type_parser (::IEC61850::SCL::Validation::tCommonConductingEquipmentEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::xml_schema::boolean_pskel& /* virtual */,
                 ::IEC61850::SCL::Validation::tTerminal_pskel& /* Terminal */,
                 ::IEC61850::SCL::Validation::tSubEquipment_pskel& /* SubEquipment */,
                 ::IEC61850::SCL::Validation::tCommonConductingEquipmentEnum_pskel& /* type */);

        // Constructor.
        //
        tConductingEquipment_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tCommonConductingEquipmentEnum_pskel* type_parser_;

        protected:
        struct v_state_attr_
        {
          bool type;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tSubEquipment_pskel: public virtual ::IEC61850::SCL::Validation::tPowerSystemResource_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        phase ();

        virtual void
        virtual_ (bool);

        virtual void
        post_tSubEquipment ();

        // Parser construction API.
        //
        void
        phase_parser (::IEC61850::SCL::Validation::tPhaseEnum_pskel&);

        void
        virtual_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tPhaseEnum_pskel& /* phase */,
                 ::xml_schema::boolean_pskel& /* virtual */);

        // Constructor.
        //
        tSubEquipment_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tPhaseEnum_pskel* phase_parser_;
        ::xml_schema::boolean_pskel* virtual__parser_;
      };

      class tPowerTransformer_pskel: public virtual ::IEC61850::SCL::Validation::tEquipment_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        TransformerWinding ();

        virtual void
        type ();

        virtual void
        post_tPowerTransformer ();

        // Parser construction API.
        //
        void
        TransformerWinding_parser (::IEC61850::SCL::Validation::tTransformerWinding_pskel&);

        void
        type_parser (::IEC61850::SCL::Validation::tPowerTransformerEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::xml_schema::boolean_pskel& /* virtual */,
                 ::IEC61850::SCL::Validation::tTransformerWinding_pskel& /* TransformerWinding */,
                 ::IEC61850::SCL::Validation::tPowerTransformerEnum_pskel& /* type */);

        // Constructor.
        //
        tPowerTransformer_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tTransformerWinding_pskel* TransformerWinding_parser_;
        ::IEC61850::SCL::Validation::tPowerTransformerEnum_pskel* type_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tPowerTransformer_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool type;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tTransformerWinding_pskel: public virtual ::IEC61850::SCL::Validation::tAbstractConductingEquipment_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        TapChanger ();

        virtual void
        type ();

        virtual void
        post_tTransformerWinding ();

        // Parser construction API.
        //
        void
        TapChanger_parser (::IEC61850::SCL::Validation::tTapChanger_pskel&);

        void
        type_parser (::IEC61850::SCL::Validation::tTransformerWindingEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::xml_schema::boolean_pskel& /* virtual */,
                 ::IEC61850::SCL::Validation::tTerminal_pskel& /* Terminal */,
                 ::IEC61850::SCL::Validation::tSubEquipment_pskel& /* SubEquipment */,
                 ::IEC61850::SCL::Validation::tTapChanger_pskel& /* TapChanger */,
                 ::IEC61850::SCL::Validation::tTransformerWindingEnum_pskel& /* type */);

        // Constructor.
        //
        tTransformerWinding_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tTapChanger_pskel* TapChanger_parser_;
        ::IEC61850::SCL::Validation::tTransformerWindingEnum_pskel* type_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tTransformerWinding_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool type;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tTapChanger_pskel: public virtual ::IEC61850::SCL::Validation::tPowerSystemResource_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        type (const ::std::string&);

        virtual void
        virtual_ (bool);

        virtual void
        post_tTapChanger ();

        // Parser construction API.
        //
        void
        type_parser (::xml_schema::name_pskel&);

        void
        virtual_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::xml_schema::name_pskel& /* type */,
                 ::xml_schema::boolean_pskel& /* virtual */);

        // Constructor.
        //
        tTapChanger_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::name_pskel* type_parser_;
        ::xml_schema::boolean_pskel* virtual__parser_;

        protected:
        struct v_state_attr_
        {
          bool type;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tGeneralEquipment_pskel: public virtual ::IEC61850::SCL::Validation::tEquipment_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        type ();

        virtual void
        post_tGeneralEquipment ();

        // Parser construction API.
        //
        void
        type_parser (::IEC61850::SCL::Validation::tGeneralEquipmentEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::xml_schema::boolean_pskel& /* virtual */,
                 ::IEC61850::SCL::Validation::tGeneralEquipmentEnum_pskel& /* type */);

        // Constructor.
        //
        tGeneralEquipment_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tGeneralEquipmentEnum_pskel* type_parser_;

        protected:
        struct v_state_attr_
        {
          bool type;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tSubstation_pskel: public virtual ::IEC61850::SCL::Validation::tEquipmentContainer_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        VoltageLevel ();

        virtual void
        Function ();

        virtual void
        post_tSubstation ();

        // Parser construction API.
        //
        void
        VoltageLevel_parser (::IEC61850::SCL::Validation::tVoltageLevel_pskel&);

        void
        Function_parser (::IEC61850::SCL::Validation::tFunction_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tPowerTransformer_pskel& /* PowerTransformer */,
                 ::IEC61850::SCL::Validation::tGeneralEquipment_pskel& /* GeneralEquipment */,
                 ::IEC61850::SCL::Validation::tVoltageLevel_pskel& /* VoltageLevel */,
                 ::IEC61850::SCL::Validation::tFunction_pskel& /* Function */);

        // Constructor.
        //
        tSubstation_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tVoltageLevel_pskel* VoltageLevel_parser_;
        ::IEC61850::SCL::Validation::tFunction_pskel* Function_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tSubstation_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tVoltageLevel_pskel: public virtual ::IEC61850::SCL::Validation::tEquipmentContainer_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Voltage ();

        virtual void
        Bay ();

        virtual void
        Function ();

        virtual void
        post_tVoltageLevel ();

        // Parser construction API.
        //
        void
        Voltage_parser (::IEC61850::SCL::Validation::tVoltage_pskel&);

        void
        Bay_parser (::IEC61850::SCL::Validation::tBay_pskel&);

        void
        Function_parser (::IEC61850::SCL::Validation::tFunction_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tPowerTransformer_pskel& /* PowerTransformer */,
                 ::IEC61850::SCL::Validation::tGeneralEquipment_pskel& /* GeneralEquipment */,
                 ::IEC61850::SCL::Validation::tVoltage_pskel& /* Voltage */,
                 ::IEC61850::SCL::Validation::tBay_pskel& /* Bay */,
                 ::IEC61850::SCL::Validation::tFunction_pskel& /* Function */);

        // Constructor.
        //
        tVoltageLevel_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tVoltage_pskel* Voltage_parser_;
        ::IEC61850::SCL::Validation::tBay_pskel* Bay_parser_;
        ::IEC61850::SCL::Validation::tFunction_pskel* Function_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tVoltageLevel_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tBay_pskel: public virtual ::IEC61850::SCL::Validation::tEquipmentContainer_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        ConductingEquipment ();

        virtual void
        ConnectivityNode ();

        virtual void
        Function ();

        virtual void
        post_tBay ();

        // Parser construction API.
        //
        void
        ConductingEquipment_parser (::IEC61850::SCL::Validation::tConductingEquipment_pskel&);

        void
        ConnectivityNode_parser (::IEC61850::SCL::Validation::tConnectivityNode_pskel&);

        void
        Function_parser (::IEC61850::SCL::Validation::tFunction_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tPowerTransformer_pskel& /* PowerTransformer */,
                 ::IEC61850::SCL::Validation::tGeneralEquipment_pskel& /* GeneralEquipment */,
                 ::IEC61850::SCL::Validation::tConductingEquipment_pskel& /* ConductingEquipment */,
                 ::IEC61850::SCL::Validation::tConnectivityNode_pskel& /* ConnectivityNode */,
                 ::IEC61850::SCL::Validation::tFunction_pskel& /* Function */);

        // Constructor.
        //
        tBay_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tConductingEquipment_pskel* ConductingEquipment_parser_;
        ::IEC61850::SCL::Validation::tConnectivityNode_pskel* ConnectivityNode_parser_;
        ::IEC61850::SCL::Validation::tFunction_pskel* Function_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tBay_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tLNode_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        lnInst ();

        virtual void
        lnClass ();

        virtual void
        iedName ();

        virtual void
        ldInst ();

        virtual void
        prefix ();

        virtual void
        lnType ();

        virtual void
        post_tLNode ();

        // Parser construction API.
        //
        void
        lnInst_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        iedName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        ldInst_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        prefix_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnType_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* lnInst */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* iedName */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* ldInst */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* prefix */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* lnType */);

        // Constructor.
        //
        tLNode_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tAnyName_pskel* lnInst_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* iedName_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* ldInst_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* prefix_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* lnType_parser_;

        protected:
        struct v_state_attr_
        {
          bool lnClass;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tFunction_pskel: public virtual ::IEC61850::SCL::Validation::tPowerSystemResource_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        SubFunction ();

        virtual void
        GeneralEquipment ();

        virtual void
        post_tFunction ();

        // Parser construction API.
        //
        void
        SubFunction_parser (::IEC61850::SCL::Validation::tSubFunction_pskel&);

        void
        GeneralEquipment_parser (::IEC61850::SCL::Validation::tGeneralEquipment_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tSubFunction_pskel& /* SubFunction */,
                 ::IEC61850::SCL::Validation::tGeneralEquipment_pskel& /* GeneralEquipment */);

        // Constructor.
        //
        tFunction_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tSubFunction_pskel* SubFunction_parser_;
        ::IEC61850::SCL::Validation::tGeneralEquipment_pskel* GeneralEquipment_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tFunction_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tSubFunction_pskel: public virtual ::IEC61850::SCL::Validation::tPowerSystemResource_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        GeneralEquipment ();

        virtual void
        post_tSubFunction ();

        // Parser construction API.
        //
        void
        GeneralEquipment_parser (::IEC61850::SCL::Validation::tGeneralEquipment_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tGeneralEquipment_pskel& /* GeneralEquipment */);

        // Constructor.
        //
        tSubFunction_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tGeneralEquipment_pskel* GeneralEquipment_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tSubFunction_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tConnectivityNode_pskel: public virtual ::IEC61850::SCL::Validation::tLNodeContainer_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        pathName ();

        virtual void
        post_tConnectivityNode ();

        // Parser construction API.
        //
        void
        pathName_parser (::IEC61850::SCL::Validation::tRef_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tLNode_pskel& /* LNode */,
                 ::IEC61850::SCL::Validation::tRef_pskel& /* pathName */);

        // Constructor.
        //
        tConnectivityNode_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tRef_pskel* pathName_parser_;

        protected:
        struct v_state_attr_
        {
          bool pathName;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tTerminal_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        name ();

        virtual void
        connectivityNode ();

        virtual void
        substationName ();

        virtual void
        voltageLevelName ();

        virtual void
        bayName ();

        virtual void
        cNodeName ();

        virtual void
        post_tTerminal ();

        // Parser construction API.
        //
        void
        name_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        connectivityNode_parser (::IEC61850::SCL::Validation::tRef_pskel&);

        void
        substationName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        voltageLevelName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        bayName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        cNodeName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* name */,
                 ::IEC61850::SCL::Validation::tRef_pskel& /* connectivityNode */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* substationName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* voltageLevelName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* bayName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* cNodeName */);

        // Constructor.
        //
        tTerminal_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tAnyName_pskel* name_parser_;
        ::IEC61850::SCL::Validation::tRef_pskel* connectivityNode_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* substationName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* voltageLevelName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* bayName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* cNodeName_parser_;

        protected:
        struct v_state_attr_
        {
          bool connectivityNode;
          bool substationName;
          bool voltageLevelName;
          bool bayName;
          bool cNodeName;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCL_SUBSTATION_PSKEL_H
