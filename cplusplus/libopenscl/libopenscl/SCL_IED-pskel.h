// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCL_IED_PSKEL_H
#define SCL_IED_PSKEL_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tIED_pskel;
      class tServices_pskel;
      class tAccessPoint_pskel;
      class tServer_pskel;
      class tLDevice_pskel;
      class tAccessControl_pskel;
      class tAssociation_pskel;
      class tAnyLN_pskel;
      class tLN_pskel;
      class tLN0_pskel;
      class tDataSet_pskel;
      class tFCDA_pskel;
      class tFCCB_pskel;
      class tControl_pskel;
      class tControlWithTriggerOpt_pskel;
      class tTrgOps_pskel;
      class tReportControl_pskel;
      class tRptEnabled_pskel;
      class tClientLN_pskel;
      class tLogControl_pskel;
      class tInputs_pskel;
      class tExtRef_pskel;
      class tLog_pskel;
      class tControlWithIEDName_pskel;
      class tGSEControl_pskel;
      class tSampledValueControl_pskel;
      class tSettingControl_pskel;
      class tSCLControl_pskel;
      class tDOI_pskel;
      class tSDI_pskel;
      class tDAI_pskel;
      class tServiceYesNo_pskel;
      class tServiceWithMax_pskel;
      class tServiceWithMaxAndMaxAttributes_pskel;
      class tServiceWithMaxAndModify_pskel;
      class tServiceWithMaxAndMaxAttributesAndModify_pskel;
      class tClientServices_pskel;
      class tServiceSettings_pskel;
      class tReportSettings_pskel;
      class tLogSettings_pskel;
      class tGSESettings_pskel;
      class tSMVSettings_pskel;
      class tConfLNs_pskel;
      class SettingGroups_pskel;
      class Authentication_pskel;
      class LN0_pskel;
      class OptFields_pskel;
      class SmvOpts_pskel;
      class SmpRate_pskel;
    }
  }
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

#include "SCL_BaseTypes-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      class tIED_pskel: public virtual ::IEC61850::SCL::Validation::tNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Services ();

        virtual void
        AccessPoint ();

        virtual void
        type (const ::std::string&);

        virtual void
        manufacturer (const ::std::string&);

        virtual void
        configVersion (const ::std::string&);

        virtual void
        post_tIED ();

        // Parser construction API.
        //
        void
        Services_parser (::IEC61850::SCL::Validation::tServices_pskel&);

        void
        AccessPoint_parser (::IEC61850::SCL::Validation::tAccessPoint_pskel&);

        void
        type_parser (::xml_schema::normalized_string_pskel&);

        void
        manufacturer_parser (::xml_schema::normalized_string_pskel&);

        void
        configVersion_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tServices_pskel& /* Services */,
                 ::IEC61850::SCL::Validation::tAccessPoint_pskel& /* AccessPoint */,
                 ::xml_schema::normalized_string_pskel& /* type */,
                 ::xml_schema::normalized_string_pskel& /* manufacturer */,
                 ::xml_schema::normalized_string_pskel& /* configVersion */);

        // Constructor.
        //
        tIED_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tServices_pskel* Services_parser_;
        ::IEC61850::SCL::Validation::tAccessPoint_pskel* AccessPoint_parser_;
        ::xml_schema::normalized_string_pskel* type_parser_;
        ::xml_schema::normalized_string_pskel* manufacturer_parser_;
        ::xml_schema::normalized_string_pskel* configVersion_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tIED_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tServices_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        DynAssociation ();

        virtual void
        SettingGroups ();

        virtual void
        GetDirectory ();

        virtual void
        GetDataObjectDefinition ();

        virtual void
        DataObjectDirectory ();

        virtual void
        GetDataSetValue ();

        virtual void
        SetDataSetValue ();

        virtual void
        DataSetDirectory ();

        virtual void
        ConfDataSet ();

        virtual void
        DynDataSet ();

        virtual void
        ReadWrite ();

        virtual void
        TimerActivatedControl ();

        virtual void
        ConfReportControl ();

        virtual void
        GetCBValues ();

        virtual void
        ConfLogControl ();

        virtual void
        ReportSettings ();

        virtual void
        LogSettings ();

        virtual void
        GSESettings ();

        virtual void
        SMVSettings ();

        virtual void
        GSEDir ();

        virtual void
        GOOSE ();

        virtual void
        GSSE ();

        virtual void
        FileHandling ();

        virtual void
        ConfLNs ();

        virtual void
        ClientServices ();

        virtual void
        post_tServices ();

        // Parser construction API.
        //
        void
        DynAssociation_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        SettingGroups_parser (::IEC61850::SCL::Validation::SettingGroups_pskel&);

        void
        GetDirectory_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        GetDataObjectDefinition_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        DataObjectDirectory_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        GetDataSetValue_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        SetDataSetValue_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        DataSetDirectory_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        ConfDataSet_parser (::IEC61850::SCL::Validation::tServiceWithMaxAndMaxAttributesAndModify_pskel&);

        void
        DynDataSet_parser (::IEC61850::SCL::Validation::tServiceWithMaxAndMaxAttributes_pskel&);

        void
        ReadWrite_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        TimerActivatedControl_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        ConfReportControl_parser (::IEC61850::SCL::Validation::tServiceWithMax_pskel&);

        void
        GetCBValues_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        ConfLogControl_parser (::IEC61850::SCL::Validation::tServiceWithMax_pskel&);

        void
        ReportSettings_parser (::IEC61850::SCL::Validation::tReportSettings_pskel&);

        void
        LogSettings_parser (::IEC61850::SCL::Validation::tLogSettings_pskel&);

        void
        GSESettings_parser (::IEC61850::SCL::Validation::tGSESettings_pskel&);

        void
        SMVSettings_parser (::IEC61850::SCL::Validation::tSMVSettings_pskel&);

        void
        GSEDir_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        GOOSE_parser (::IEC61850::SCL::Validation::tServiceWithMax_pskel&);

        void
        GSSE_parser (::IEC61850::SCL::Validation::tServiceWithMax_pskel&);

        void
        FileHandling_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        ConfLNs_parser (::IEC61850::SCL::Validation::tConfLNs_pskel&);

        void
        ClientServices_parser (::IEC61850::SCL::Validation::tClientServices_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* DynAssociation */,
                 ::IEC61850::SCL::Validation::SettingGroups_pskel& /* SettingGroups */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* GetDirectory */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* GetDataObjectDefinition */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* DataObjectDirectory */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* GetDataSetValue */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* SetDataSetValue */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* DataSetDirectory */,
                 ::IEC61850::SCL::Validation::tServiceWithMaxAndMaxAttributesAndModify_pskel& /* ConfDataSet */,
                 ::IEC61850::SCL::Validation::tServiceWithMaxAndMaxAttributes_pskel& /* DynDataSet */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* ReadWrite */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* TimerActivatedControl */,
                 ::IEC61850::SCL::Validation::tServiceWithMax_pskel& /* ConfReportControl */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* GetCBValues */,
                 ::IEC61850::SCL::Validation::tServiceWithMax_pskel& /* ConfLogControl */,
                 ::IEC61850::SCL::Validation::tReportSettings_pskel& /* ReportSettings */,
                 ::IEC61850::SCL::Validation::tLogSettings_pskel& /* LogSettings */,
                 ::IEC61850::SCL::Validation::tGSESettings_pskel& /* GSESettings */,
                 ::IEC61850::SCL::Validation::tSMVSettings_pskel& /* SMVSettings */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* GSEDir */,
                 ::IEC61850::SCL::Validation::tServiceWithMax_pskel& /* GOOSE */,
                 ::IEC61850::SCL::Validation::tServiceWithMax_pskel& /* GSSE */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* FileHandling */,
                 ::IEC61850::SCL::Validation::tConfLNs_pskel& /* ConfLNs */,
                 ::IEC61850::SCL::Validation::tClientServices_pskel& /* ClientServices */);

        // Constructor.
        //
        tServices_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* DynAssociation_parser_;
        ::IEC61850::SCL::Validation::SettingGroups_pskel* SettingGroups_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* GetDirectory_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* GetDataObjectDefinition_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* DataObjectDirectory_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* GetDataSetValue_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* SetDataSetValue_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* DataSetDirectory_parser_;
        ::IEC61850::SCL::Validation::tServiceWithMaxAndMaxAttributesAndModify_pskel* ConfDataSet_parser_;
        ::IEC61850::SCL::Validation::tServiceWithMaxAndMaxAttributes_pskel* DynDataSet_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* ReadWrite_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* TimerActivatedControl_parser_;
        ::IEC61850::SCL::Validation::tServiceWithMax_pskel* ConfReportControl_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* GetCBValues_parser_;
        ::IEC61850::SCL::Validation::tServiceWithMax_pskel* ConfLogControl_parser_;
        ::IEC61850::SCL::Validation::tReportSettings_pskel* ReportSettings_parser_;
        ::IEC61850::SCL::Validation::tLogSettings_pskel* LogSettings_parser_;
        ::IEC61850::SCL::Validation::tGSESettings_pskel* GSESettings_parser_;
        ::IEC61850::SCL::Validation::tSMVSettings_pskel* SMVSettings_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* GSEDir_parser_;
        ::IEC61850::SCL::Validation::tServiceWithMax_pskel* GOOSE_parser_;
        ::IEC61850::SCL::Validation::tServiceWithMax_pskel* GSSE_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* FileHandling_parser_;
        ::IEC61850::SCL::Validation::tConfLNs_pskel* ConfLNs_parser_;
        ::IEC61850::SCL::Validation::tClientServices_pskel* ClientServices_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tServices_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        all_0 (unsigned long& state,
               unsigned char* count,
               const ::xml_schema::ro_string& ns,
               const ::xml_schema::ro_string& n,
               const ::xml_schema::ro_string* t,
               bool start);

        unsigned char v_all_first_[25UL];
        ::xsd::cxx::parser::validating::all_stack v_all_count_;
      };

      class tAccessPoint_pskel: public virtual ::IEC61850::SCL::Validation::tNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Server ();

        virtual void
        LN ();

        virtual void
        router (bool);

        virtual void
        clock (bool);

        virtual void
        post_tAccessPoint ();

        // Parser construction API.
        //
        void
        Server_parser (::IEC61850::SCL::Validation::tServer_pskel&);

        void
        LN_parser (::IEC61850::SCL::Validation::tLN_pskel&);

        void
        router_parser (::xml_schema::boolean_pskel&);

        void
        clock_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tServer_pskel& /* Server */,
                 ::IEC61850::SCL::Validation::tLN_pskel& /* LN */,
                 ::xml_schema::boolean_pskel& /* router */,
                 ::xml_schema::boolean_pskel& /* clock */);

        // Constructor.
        //
        tAccessPoint_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tServer_pskel* Server_parser_;
        ::IEC61850::SCL::Validation::tLN_pskel* LN_parser_;
        ::xml_schema::boolean_pskel* router_parser_;
        ::xml_schema::boolean_pskel* clock_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tAccessPoint_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        choice_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
      };

      class tServer_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Authentication ();

        virtual void
        LDevice ();

        virtual void
        Association ();

        virtual void
        timeout (unsigned int);

        virtual void
        post_tServer ();

        // Parser construction API.
        //
        void
        Authentication_parser (::IEC61850::SCL::Validation::Authentication_pskel&);

        void
        LDevice_parser (::IEC61850::SCL::Validation::tLDevice_pskel&);

        void
        Association_parser (::IEC61850::SCL::Validation::tAssociation_pskel&);

        void
        timeout_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::Authentication_pskel& /* Authentication */,
                 ::IEC61850::SCL::Validation::tLDevice_pskel& /* LDevice */,
                 ::IEC61850::SCL::Validation::tAssociation_pskel& /* Association */,
                 ::xml_schema::unsigned_int_pskel& /* timeout */);

        // Constructor.
        //
        tServer_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::Authentication_pskel* Authentication_parser_;
        ::IEC61850::SCL::Validation::tLDevice_pskel* LDevice_parser_;
        ::IEC61850::SCL::Validation::tAssociation_pskel* Association_parser_;
        ::xml_schema::unsigned_int_pskel* timeout_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tServer_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tLDevice_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        LN0 ();

        virtual void
        LN ();

        virtual void
        AccessControl ();

        virtual void
        inst ();

        virtual void
        ldName ();

        virtual void
        post_tLDevice ();

        // Parser construction API.
        //
        void
        LN0_parser (::IEC61850::SCL::Validation::LN0_pskel&);

        void
        LN_parser (::IEC61850::SCL::Validation::tLN_pskel&);

        void
        AccessControl_parser (::IEC61850::SCL::Validation::tAccessControl_pskel&);

        void
        inst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        ldName_parser (::IEC61850::SCL::Validation::tRestrLdName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::LN0_pskel& /* LN0 */,
                 ::IEC61850::SCL::Validation::tLN_pskel& /* LN */,
                 ::IEC61850::SCL::Validation::tAccessControl_pskel& /* AccessControl */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* inst */,
                 ::IEC61850::SCL::Validation::tRestrLdName_pskel& /* ldName */);

        // Constructor.
        //
        tLDevice_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::LN0_pskel* LN0_parser_;
        ::IEC61850::SCL::Validation::tLN_pskel* LN_parser_;
        ::IEC61850::SCL::Validation::tAccessControl_pskel* AccessControl_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* inst_parser_;
        ::IEC61850::SCL::Validation::tRestrLdName_pskel* ldName_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tLDevice_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool inst;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tAccessControl_pskel: public virtual ::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tAccessControl ();

        virtual bool
        _characters_impl (const ::xml_schema::ro_string&);
      };

      class tAssociation_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        kind ();

        virtual void
        associationID ();

        virtual void
        iedName ();

        virtual void
        ldInst ();

        virtual void
        prefix ();

        virtual void
        lnClass ();

        virtual void
        lnInst ();

        virtual void
        post_tAssociation ();

        // Parser construction API.
        //
        void
        kind_parser (::IEC61850::SCL::Validation::tAssociationKindEnum_pskel&);

        void
        associationID_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        iedName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        ldInst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        prefix_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        lnInst_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tAssociationKindEnum_pskel& /* kind */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* associationID */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* iedName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* ldInst */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* prefix */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* lnInst */);

        // Constructor.
        //
        tAssociation_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tAssociationKindEnum_pskel* kind_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* associationID_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* iedName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* ldInst_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* prefix_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* lnInst_parser_;

        protected:
        struct v_state_attr_
        {
          bool kind;
          bool iedName;
          bool ldInst;
          bool lnClass;
          bool lnInst;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tAnyLN_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        DataSet ();

        virtual void
        ReportControl ();

        virtual void
        LogControl ();

        virtual void
        DOI ();

        virtual void
        Inputs ();

        virtual void
        lnType ();

        virtual void
        post_tAnyLN ();

        // Parser construction API.
        //
        void
        DataSet_parser (::IEC61850::SCL::Validation::tDataSet_pskel&);

        void
        ReportControl_parser (::IEC61850::SCL::Validation::tReportControl_pskel&);

        void
        LogControl_parser (::IEC61850::SCL::Validation::tLogControl_pskel&);

        void
        DOI_parser (::IEC61850::SCL::Validation::tDOI_pskel&);

        void
        Inputs_parser (::IEC61850::SCL::Validation::tInputs_pskel&);

        void
        lnType_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tDataSet_pskel& /* DataSet */,
                 ::IEC61850::SCL::Validation::tReportControl_pskel& /* ReportControl */,
                 ::IEC61850::SCL::Validation::tLogControl_pskel& /* LogControl */,
                 ::IEC61850::SCL::Validation::tDOI_pskel& /* DOI */,
                 ::IEC61850::SCL::Validation::tInputs_pskel& /* Inputs */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* lnType */);

        // Constructor.
        //
        tAnyLN_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tDataSet_pskel* DataSet_parser_;
        ::IEC61850::SCL::Validation::tReportControl_pskel* ReportControl_parser_;
        ::IEC61850::SCL::Validation::tLogControl_pskel* LogControl_parser_;
        ::IEC61850::SCL::Validation::tDOI_pskel* DOI_parser_;
        ::IEC61850::SCL::Validation::tInputs_pskel* Inputs_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* lnType_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tAnyLN_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool lnType;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tLN_pskel: public virtual ::IEC61850::SCL::Validation::tAnyLN_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        lnClass ();

        virtual void
        inst (unsigned int);

        virtual void
        prefix ();

        virtual void
        post_tLN ();

        // Parser construction API.
        //
        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        inst_parser (::xml_schema::unsigned_int_pskel&);

        void
        prefix_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tDataSet_pskel& /* DataSet */,
                 ::IEC61850::SCL::Validation::tReportControl_pskel& /* ReportControl */,
                 ::IEC61850::SCL::Validation::tLogControl_pskel& /* LogControl */,
                 ::IEC61850::SCL::Validation::tDOI_pskel& /* DOI */,
                 ::IEC61850::SCL::Validation::tInputs_pskel& /* Inputs */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* lnType */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::xml_schema::unsigned_int_pskel& /* inst */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* prefix */);

        // Constructor.
        //
        tLN_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::xml_schema::unsigned_int_pskel* inst_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* prefix_parser_;

        protected:
        struct v_state_attr_
        {
          bool lnClass;
          bool inst;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tLN0_pskel: public virtual ::IEC61850::SCL::Validation::tAnyLN_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        GSEControl ();

        virtual void
        SampledValueControl ();

        virtual void
        SettingControl ();

        virtual void
        SCLControl ();

        virtual void
        Log ();

        virtual void
        lnClass ();

        virtual void
        inst (const ::std::string&);

        virtual void
        post_tLN0 ();

        // Parser construction API.
        //
        void
        GSEControl_parser (::IEC61850::SCL::Validation::tGSEControl_pskel&);

        void
        SampledValueControl_parser (::IEC61850::SCL::Validation::tSampledValueControl_pskel&);

        void
        SettingControl_parser (::IEC61850::SCL::Validation::tSettingControl_pskel&);

        void
        SCLControl_parser (::IEC61850::SCL::Validation::tSCLControl_pskel&);

        void
        Log_parser (::IEC61850::SCL::Validation::tLog_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        inst_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tDataSet_pskel& /* DataSet */,
                 ::IEC61850::SCL::Validation::tReportControl_pskel& /* ReportControl */,
                 ::IEC61850::SCL::Validation::tLogControl_pskel& /* LogControl */,
                 ::IEC61850::SCL::Validation::tDOI_pskel& /* DOI */,
                 ::IEC61850::SCL::Validation::tInputs_pskel& /* Inputs */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* lnType */,
                 ::IEC61850::SCL::Validation::tGSEControl_pskel& /* GSEControl */,
                 ::IEC61850::SCL::Validation::tSampledValueControl_pskel& /* SampledValueControl */,
                 ::IEC61850::SCL::Validation::tSettingControl_pskel& /* SettingControl */,
                 ::IEC61850::SCL::Validation::tSCLControl_pskel& /* SCLControl */,
                 ::IEC61850::SCL::Validation::tLog_pskel& /* Log */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::xml_schema::normalized_string_pskel& /* inst */);

        // Constructor.
        //
        tLN0_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tGSEControl_pskel* GSEControl_parser_;
        ::IEC61850::SCL::Validation::tSampledValueControl_pskel* SampledValueControl_parser_;
        ::IEC61850::SCL::Validation::tSettingControl_pskel* SettingControl_parser_;
        ::IEC61850::SCL::Validation::tSCLControl_pskel* SCLControl_parser_;
        ::IEC61850::SCL::Validation::tLog_pskel* Log_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::xml_schema::normalized_string_pskel* inst_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tLN0_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool lnClass;
          bool inst;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDataSet_pskel: public virtual ::IEC61850::SCL::Validation::tNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        FCDA ();

        virtual void
        FCCB ();

        virtual void
        post_tDataSet ();

        // Parser construction API.
        //
        void
        FCDA_parser (::IEC61850::SCL::Validation::tFCDA_pskel&);

        void
        FCCB_parser (::IEC61850::SCL::Validation::tFCCB_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tFCDA_pskel& /* FCDA */,
                 ::IEC61850::SCL::Validation::tFCCB_pskel& /* FCCB */);

        // Constructor.
        //
        tDataSet_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tFCDA_pskel* FCDA_parser_;
        ::IEC61850::SCL::Validation::tFCCB_pskel* FCCB_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tDataSet_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        choice_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
      };

      class tFCDA_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        ldInst ();

        virtual void
        prefix ();

        virtual void
        lnClass ();

        virtual void
        lnInst ();

        virtual void
        doName ();

        virtual void
        daName ();

        virtual void
        fc ();

        virtual void
        post_tFCDA ();

        // Parser construction API.
        //
        void
        ldInst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        prefix_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        lnInst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        doName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        daName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        fc_parser (::IEC61850::SCL::Validation::tFCEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tName_pskel& /* ldInst */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* prefix */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* lnInst */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* doName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* daName */,
                 ::IEC61850::SCL::Validation::tFCEnum_pskel& /* fc */);

        // Constructor.
        //
        tFCDA_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* ldInst_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* prefix_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* lnInst_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* doName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* daName_parser_;
        ::IEC61850::SCL::Validation::tFCEnum_pskel* fc_parser_;

        protected:
        struct v_state_attr_
        {
          bool fc;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tFCCB_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        ldInst ();

        virtual void
        prefix ();

        virtual void
        lnClass ();

        virtual void
        lnInst ();

        virtual void
        cbName ();

        virtual void
        daName ();

        virtual void
        fc ();

        virtual void
        post_tFCCB ();

        // Parser construction API.
        //
        void
        ldInst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        prefix_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        lnInst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        cbName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        daName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        fc_parser (::IEC61850::SCL::Validation::tServiceFCEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tName_pskel& /* ldInst */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* prefix */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* lnInst */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* cbName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* daName */,
                 ::IEC61850::SCL::Validation::tServiceFCEnum_pskel& /* fc */);

        // Constructor.
        //
        tFCCB_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* ldInst_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* prefix_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* lnInst_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* cbName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* daName_parser_;
        ::IEC61850::SCL::Validation::tServiceFCEnum_pskel* fc_parser_;

        protected:
        struct v_state_attr_
        {
          bool ldInst;
          bool lnClass;
          bool cbName;
          bool fc;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tControl_pskel: public virtual ::IEC61850::SCL::Validation::tNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        datSet ();

        virtual void
        post_tControl ();

        // Parser construction API.
        //
        void
        datSet_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* datSet */);

        // Constructor.
        //
        tControl_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* datSet_parser_;
      };

      class tControlWithTriggerOpt_pskel: public virtual ::IEC61850::SCL::Validation::tControl_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        TrgOps ();

        virtual void
        intgPd (unsigned int);

        virtual void
        post_tControlWithTriggerOpt ();

        // Parser construction API.
        //
        void
        TrgOps_parser (::IEC61850::SCL::Validation::tTrgOps_pskel&);

        void
        intgPd_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tTrgOps_pskel& /* TrgOps */,
                 ::xml_schema::unsigned_int_pskel& /* intgPd */);

        // Constructor.
        //
        tControlWithTriggerOpt_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tTrgOps_pskel* TrgOps_parser_;
        ::xml_schema::unsigned_int_pskel* intgPd_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tControlWithTriggerOpt_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tTrgOps_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        dchg (bool);

        virtual void
        qchg (bool);

        virtual void
        dupd (bool);

        virtual void
        period (bool);

        virtual void
        post_tTrgOps ();

        // Parser construction API.
        //
        void
        dchg_parser (::xml_schema::boolean_pskel&);

        void
        qchg_parser (::xml_schema::boolean_pskel&);

        void
        dupd_parser (::xml_schema::boolean_pskel&);

        void
        period_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::boolean_pskel& /* dchg */,
                 ::xml_schema::boolean_pskel& /* qchg */,
                 ::xml_schema::boolean_pskel& /* dupd */,
                 ::xml_schema::boolean_pskel& /* period */);

        // Constructor.
        //
        tTrgOps_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* dchg_parser_;
        ::xml_schema::boolean_pskel* qchg_parser_;
        ::xml_schema::boolean_pskel* dupd_parser_;
        ::xml_schema::boolean_pskel* period_parser_;
      };

      class tReportControl_pskel: public virtual ::IEC61850::SCL::Validation::tControlWithTriggerOpt_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        OptFields ();

        virtual void
        RptEnabled ();

        virtual void
        rptID ();

        virtual void
        confRev (unsigned int);

        virtual void
        buffered (bool);

        virtual void
        bufTime (unsigned int);

        virtual void
        post_tReportControl ();

        // Parser construction API.
        //
        void
        OptFields_parser (::IEC61850::SCL::Validation::OptFields_pskel&);

        void
        RptEnabled_parser (::IEC61850::SCL::Validation::tRptEnabled_pskel&);

        void
        rptID_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        confRev_parser (::xml_schema::unsigned_int_pskel&);

        void
        buffered_parser (::xml_schema::boolean_pskel&);

        void
        bufTime_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tTrgOps_pskel& /* TrgOps */,
                 ::xml_schema::unsigned_int_pskel& /* intgPd */,
                 ::IEC61850::SCL::Validation::OptFields_pskel& /* OptFields */,
                 ::IEC61850::SCL::Validation::tRptEnabled_pskel& /* RptEnabled */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* rptID */,
                 ::xml_schema::unsigned_int_pskel& /* confRev */,
                 ::xml_schema::boolean_pskel& /* buffered */,
                 ::xml_schema::unsigned_int_pskel& /* bufTime */);

        // Constructor.
        //
        tReportControl_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::OptFields_pskel* OptFields_parser_;
        ::IEC61850::SCL::Validation::tRptEnabled_pskel* RptEnabled_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* rptID_parser_;
        ::xml_schema::unsigned_int_pskel* confRev_parser_;
        ::xml_schema::boolean_pskel* buffered_parser_;
        ::xml_schema::unsigned_int_pskel* bufTime_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tReportControl_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool confRev;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tRptEnabled_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        ClientLN ();

        virtual void
        max (unsigned int);

        virtual void
        post_tRptEnabled ();

        // Parser construction API.
        //
        void
        ClientLN_parser (::IEC61850::SCL::Validation::tClientLN_pskel&);

        void
        max_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tClientLN_pskel& /* ClientLN */,
                 ::xml_schema::unsigned_int_pskel& /* max */);

        // Constructor.
        //
        tRptEnabled_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tClientLN_pskel* ClientLN_parser_;
        ::xml_schema::unsigned_int_pskel* max_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tRptEnabled_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tClientLN_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        iedName ();

        virtual void
        ldInst ();

        virtual void
        prefix ();

        virtual void
        lnClass ();

        virtual void
        lnInst ();

        virtual void
        post_tClientLN ();

        // Parser construction API.
        //
        void
        iedName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        ldInst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        prefix_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        lnInst_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tName_pskel& /* iedName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* ldInst */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* prefix */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* lnInst */);

        // Constructor.
        //
        tClientLN_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* iedName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* ldInst_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* prefix_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* lnInst_parser_;

        protected:
        struct v_state_attr_
        {
          bool iedName;
          bool ldInst;
          bool lnClass;
          bool lnInst;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tLogControl_pskel: public virtual ::IEC61850::SCL::Validation::tControlWithTriggerOpt_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        logName ();

        virtual void
        logEna (bool);

        virtual void
        reasonCode (bool);

        virtual void
        post_tLogControl ();

        // Parser construction API.
        //
        void
        logName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        logEna_parser (::xml_schema::boolean_pskel&);

        void
        reasonCode_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tTrgOps_pskel& /* TrgOps */,
                 ::xml_schema::unsigned_int_pskel& /* intgPd */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* logName */,
                 ::xml_schema::boolean_pskel& /* logEna */,
                 ::xml_schema::boolean_pskel& /* reasonCode */);

        // Constructor.
        //
        tLogControl_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* logName_parser_;
        ::xml_schema::boolean_pskel* logEna_parser_;
        ::xml_schema::boolean_pskel* reasonCode_parser_;

        protected:
        struct v_state_attr_
        {
          bool logName;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tInputs_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        ExtRef ();

        virtual void
        post_tInputs ();

        // Parser construction API.
        //
        void
        ExtRef_parser (::IEC61850::SCL::Validation::tExtRef_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tExtRef_pskel& /* ExtRef */);

        // Constructor.
        //
        tInputs_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tExtRef_pskel* ExtRef_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tInputs_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tExtRef_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        iedName ();

        virtual void
        ldInst ();

        virtual void
        prefix ();

        virtual void
        lnClass ();

        virtual void
        lnInst ();

        virtual void
        doName ();

        virtual void
        daName ();

        virtual void
        intAddr (const ::std::string&);

        virtual void
        post_tExtRef ();

        // Parser construction API.
        //
        void
        iedName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        ldInst_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        prefix_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        lnClass_parser (::IEC61850::SCL::Validation::tLNClassEnum_pskel&);

        void
        lnInst_parser (::IEC61850::SCL::Validation::tAnyName_pskel&);

        void
        doName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        daName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        intAddr_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tName_pskel& /* iedName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* ldInst */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* prefix */,
                 ::IEC61850::SCL::Validation::tLNClassEnum_pskel& /* lnClass */,
                 ::IEC61850::SCL::Validation::tAnyName_pskel& /* lnInst */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* doName */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* daName */,
                 ::xml_schema::normalized_string_pskel& /* intAddr */);

        // Constructor.
        //
        tExtRef_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* iedName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* ldInst_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* prefix_parser_;
        ::IEC61850::SCL::Validation::tLNClassEnum_pskel* lnClass_parser_;
        ::IEC61850::SCL::Validation::tAnyName_pskel* lnInst_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* doName_parser_;
        ::IEC61850::SCL::Validation::tName_pskel* daName_parser_;
        ::xml_schema::normalized_string_pskel* intAddr_parser_;

        protected:
        struct v_state_attr_
        {
          bool iedName;
          bool ldInst;
          bool lnClass;
          bool lnInst;
          bool doName;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tLog_pskel: public virtual ::IEC61850::SCL::Validation::tAnyContentFromOtherNamespace_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tLog ();

        virtual bool
        _characters_impl (const ::xml_schema::ro_string&);
      };

      class tControlWithIEDName_pskel: public virtual ::IEC61850::SCL::Validation::tControl_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        IEDName ();

        virtual void
        confRev (unsigned int);

        virtual void
        post_tControlWithIEDName ();

        // Parser construction API.
        //
        void
        IEDName_parser (::IEC61850::SCL::Validation::tName_pskel&);

        void
        confRev_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* IEDName */,
                 ::xml_schema::unsigned_int_pskel& /* confRev */);

        // Constructor.
        //
        tControlWithIEDName_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tName_pskel* IEDName_parser_;
        ::xml_schema::unsigned_int_pskel* confRev_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tControlWithIEDName_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tGSEControl_pskel: public virtual ::IEC61850::SCL::Validation::tControlWithIEDName_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        type ();

        virtual void
        appID (const ::std::string&);

        virtual void
        post_tGSEControl ();

        // Parser construction API.
        //
        void
        type_parser (::IEC61850::SCL::Validation::tGSEControlTypeEnum_pskel&);

        void
        appID_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* IEDName */,
                 ::xml_schema::unsigned_int_pskel& /* confRev */,
                 ::IEC61850::SCL::Validation::tGSEControlTypeEnum_pskel& /* type */,
                 ::xml_schema::normalized_string_pskel& /* appID */);

        // Constructor.
        //
        tGSEControl_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tGSEControlTypeEnum_pskel* type_parser_;
        ::xml_schema::normalized_string_pskel* appID_parser_;

        protected:
        struct v_state_attr_
        {
          bool appID;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tSampledValueControl_pskel: public virtual ::IEC61850::SCL::Validation::tControlWithIEDName_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        SmvOpts ();

        virtual void
        smvID (const ::std::string&);

        virtual void
        multicast (bool);

        virtual void
        smpRate (unsigned int);

        virtual void
        nofASDU (unsigned int);

        virtual void
        post_tSampledValueControl ();

        // Parser construction API.
        //
        void
        SmvOpts_parser (::IEC61850::SCL::Validation::SmvOpts_pskel&);

        void
        smvID_parser (::xml_schema::normalized_string_pskel&);

        void
        multicast_parser (::xml_schema::boolean_pskel&);

        void
        smpRate_parser (::xml_schema::unsigned_int_pskel&);

        void
        nofASDU_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tName_pskel& /* IEDName */,
                 ::xml_schema::unsigned_int_pskel& /* confRev */,
                 ::IEC61850::SCL::Validation::SmvOpts_pskel& /* SmvOpts */,
                 ::xml_schema::normalized_string_pskel& /* smvID */,
                 ::xml_schema::boolean_pskel& /* multicast */,
                 ::xml_schema::unsigned_int_pskel& /* smpRate */,
                 ::xml_schema::unsigned_int_pskel& /* nofASDU */);

        // Constructor.
        //
        tSampledValueControl_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::SmvOpts_pskel* SmvOpts_parser_;
        ::xml_schema::normalized_string_pskel* smvID_parser_;
        ::xml_schema::boolean_pskel* multicast_parser_;
        ::xml_schema::unsigned_int_pskel* smpRate_parser_;
        ::xml_schema::unsigned_int_pskel* nofASDU_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tSampledValueControl_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool smvID;
          bool smpRate;
          bool nofASDU;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tSettingControl_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        numOfSGs (unsigned int);

        virtual void
        actSG (unsigned int);

        virtual void
        post_tSettingControl ();

        // Parser construction API.
        //
        void
        numOfSGs_parser (::xml_schema::unsigned_int_pskel&);

        void
        actSG_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::xml_schema::unsigned_int_pskel& /* numOfSGs */,
                 ::xml_schema::unsigned_int_pskel& /* actSG */);

        // Constructor.
        //
        tSettingControl_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::unsigned_int_pskel* numOfSGs_parser_;
        ::xml_schema::unsigned_int_pskel* actSG_parser_;

        protected:
        struct v_state_attr_
        {
          bool numOfSGs;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tSCLControl_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tSCLControl ();
      };

      class tDOI_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        SDI ();

        virtual void
        DAI ();

        virtual void
        name ();

        virtual void
        ix (unsigned int);

        virtual void
        accessControl (const ::std::string&);

        virtual void
        post_tDOI ();

        // Parser construction API.
        //
        void
        SDI_parser (::IEC61850::SCL::Validation::tSDI_pskel&);

        void
        DAI_parser (::IEC61850::SCL::Validation::tDAI_pskel&);

        void
        name_parser (::IEC61850::SCL::Validation::tRestrName1stU_pskel&);

        void
        ix_parser (::xml_schema::unsigned_int_pskel&);

        void
        accessControl_parser (::xml_schema::normalized_string_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tSDI_pskel& /* SDI */,
                 ::IEC61850::SCL::Validation::tDAI_pskel& /* DAI */,
                 ::IEC61850::SCL::Validation::tRestrName1stU_pskel& /* name */,
                 ::xml_schema::unsigned_int_pskel& /* ix */,
                 ::xml_schema::normalized_string_pskel& /* accessControl */);

        // Constructor.
        //
        tDOI_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tSDI_pskel* SDI_parser_;
        ::IEC61850::SCL::Validation::tDAI_pskel* DAI_parser_;
        ::IEC61850::SCL::Validation::tRestrName1stU_pskel* name_parser_;
        ::xml_schema::unsigned_int_pskel* ix_parser_;
        ::xml_schema::normalized_string_pskel* accessControl_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tDOI_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        choice_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);

        protected:
        struct v_state_attr_
        {
          bool name;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tSDI_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        SDI ();

        virtual void
        DAI ();

        virtual void
        name ();

        virtual void
        ix (unsigned int);

        virtual void
        post_tSDI ();

        // Parser construction API.
        //
        void
        SDI_parser (::IEC61850::SCL::Validation::tSDI_pskel&);

        void
        DAI_parser (::IEC61850::SCL::Validation::tDAI_pskel&);

        void
        name_parser (::IEC61850::SCL::Validation::tAttributeNameEnum_pskel&);

        void
        ix_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tSDI_pskel& /* SDI */,
                 ::IEC61850::SCL::Validation::tDAI_pskel& /* DAI */,
                 ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel& /* name */,
                 ::xml_schema::unsigned_int_pskel& /* ix */);

        // Constructor.
        //
        tSDI_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tSDI_pskel* SDI_parser_;
        ::IEC61850::SCL::Validation::tDAI_pskel* DAI_parser_;
        ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel* name_parser_;
        ::xml_schema::unsigned_int_pskel* ix_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tSDI_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        choice_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);

        protected:
        struct v_state_attr_
        {
          bool name;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tDAI_pskel: public virtual ::IEC61850::SCL::Validation::tUnNaming_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        Val ();

        virtual void
        name ();

        virtual void
        sAddr (const ::std::string&);

        virtual void
        valKind ();

        virtual void
        ix (unsigned int);

        virtual void
        post_tDAI ();

        // Parser construction API.
        //
        void
        Val_parser (::IEC61850::SCL::Validation::tVal_pskel&);

        void
        name_parser (::IEC61850::SCL::Validation::tAttributeNameEnum_pskel&);

        void
        sAddr_parser (::xml_schema::normalized_string_pskel&);

        void
        valKind_parser (::IEC61850::SCL::Validation::tValKindEnum_pskel&);

        void
        ix_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tText_pskel& /* Text */,
                 ::IEC61850::SCL::Validation::tPrivate_pskel& /* Private */,
                 ::xml_schema::normalized_string_pskel& /* desc */,
                 ::IEC61850::SCL::Validation::tVal_pskel& /* Val */,
                 ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel& /* name */,
                 ::xml_schema::normalized_string_pskel& /* sAddr */,
                 ::IEC61850::SCL::Validation::tValKindEnum_pskel& /* valKind */,
                 ::xml_schema::unsigned_int_pskel& /* ix */);

        // Constructor.
        //
        tDAI_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tVal_pskel* Val_parser_;
        ::IEC61850::SCL::Validation::tAttributeNameEnum_pskel* name_parser_;
        ::xml_schema::normalized_string_pskel* sAddr_parser_;
        ::IEC61850::SCL::Validation::tValKindEnum_pskel* valKind_parser_;
        ::xml_schema::unsigned_int_pskel* ix_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tDAI_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);

        protected:
        struct v_state_attr_
        {
          bool name;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tServiceYesNo_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_tServiceYesNo ();
      };

      class tServiceWithMax_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        max (unsigned int);

        virtual void
        post_tServiceWithMax ();

        // Parser construction API.
        //
        void
        max_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::xml_schema::unsigned_int_pskel& /* max */);

        // Constructor.
        //
        tServiceWithMax_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::unsigned_int_pskel* max_parser_;

        protected:
        struct v_state_attr_
        {
          bool max;
        };

        v_state_attr_ v_state_attr_first_;
        ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

        virtual void
        _pre_a_validate ();

        virtual void
        _post_a_validate ();
      };

      class tServiceWithMaxAndMaxAttributes_pskel: public virtual ::IEC61850::SCL::Validation::tServiceWithMax_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        maxAttributes (unsigned int);

        virtual void
        post_tServiceWithMaxAndMaxAttributes ();

        // Parser construction API.
        //
        void
        maxAttributes_parser (::xml_schema::unsigned_int_pskel&);

        void
        parsers (::xml_schema::unsigned_int_pskel& /* max */,
                 ::xml_schema::unsigned_int_pskel& /* maxAttributes */);

        // Constructor.
        //
        tServiceWithMaxAndMaxAttributes_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::unsigned_int_pskel* maxAttributes_parser_;
      };

      class tServiceWithMaxAndModify_pskel: public virtual ::IEC61850::SCL::Validation::tServiceWithMax_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        modify (bool);

        virtual void
        post_tServiceWithMaxAndModify ();

        // Parser construction API.
        //
        void
        modify_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::unsigned_int_pskel& /* max */,
                 ::xml_schema::boolean_pskel& /* modify */);

        // Constructor.
        //
        tServiceWithMaxAndModify_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* modify_parser_;
      };

      class tServiceWithMaxAndMaxAttributesAndModify_pskel: public virtual ::IEC61850::SCL::Validation::tServiceWithMaxAndMaxAttributes_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        modify (bool);

        virtual void
        post_tServiceWithMaxAndMaxAttributesAndModify ();

        // Parser construction API.
        //
        void
        modify_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::unsigned_int_pskel& /* max */,
                 ::xml_schema::unsigned_int_pskel& /* maxAttributes */,
                 ::xml_schema::boolean_pskel& /* modify */);

        // Constructor.
        //
        tServiceWithMaxAndMaxAttributesAndModify_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* modify_parser_;
      };

      class tClientServices_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        goose (bool);

        virtual void
        gsse (bool);

        virtual void
        bufReport (bool);

        virtual void
        unbufReport (bool);

        virtual void
        readLog (bool);

        virtual void
        post_tClientServices ();

        // Parser construction API.
        //
        void
        goose_parser (::xml_schema::boolean_pskel&);

        void
        gsse_parser (::xml_schema::boolean_pskel&);

        void
        bufReport_parser (::xml_schema::boolean_pskel&);

        void
        unbufReport_parser (::xml_schema::boolean_pskel&);

        void
        readLog_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::boolean_pskel& /* goose */,
                 ::xml_schema::boolean_pskel& /* gsse */,
                 ::xml_schema::boolean_pskel& /* bufReport */,
                 ::xml_schema::boolean_pskel& /* unbufReport */,
                 ::xml_schema::boolean_pskel& /* readLog */);

        // Constructor.
        //
        tClientServices_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* goose_parser_;
        ::xml_schema::boolean_pskel* gsse_parser_;
        ::xml_schema::boolean_pskel* bufReport_parser_;
        ::xml_schema::boolean_pskel* unbufReport_parser_;
        ::xml_schema::boolean_pskel* readLog_parser_;
      };

      class tServiceSettings_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        cbName ();

        virtual void
        datSet ();

        virtual void
        post_tServiceSettings ();

        // Parser construction API.
        //
        void
        cbName_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        datSet_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* cbName */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* datSet */);

        // Constructor.
        //
        tServiceSettings_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* cbName_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* datSet_parser_;
      };

      class tReportSettings_pskel: public virtual ::IEC61850::SCL::Validation::tServiceSettings_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        rptID ();

        virtual void
        optFields ();

        virtual void
        bufTime ();

        virtual void
        trgOps ();

        virtual void
        intgPd ();

        virtual void
        post_tReportSettings ();

        // Parser construction API.
        //
        void
        rptID_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        optFields_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        bufTime_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        trgOps_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        intgPd_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* cbName */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* rptID */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* optFields */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* bufTime */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* trgOps */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* intgPd */);

        // Constructor.
        //
        tReportSettings_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* rptID_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* optFields_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* bufTime_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* trgOps_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* intgPd_parser_;
      };

      class tLogSettings_pskel: public virtual ::IEC61850::SCL::Validation::tServiceSettings_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        logEna ();

        virtual void
        trgOps ();

        virtual void
        intgPd ();

        virtual void
        post_tLogSettings ();

        // Parser construction API.
        //
        void
        logEna_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        trgOps_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        intgPd_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* cbName */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* logEna */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* trgOps */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* intgPd */);

        // Constructor.
        //
        tLogSettings_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* logEna_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* trgOps_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* intgPd_parser_;
      };

      class tGSESettings_pskel: public virtual ::IEC61850::SCL::Validation::tServiceSettings_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        appID ();

        virtual void
        dataLabel ();

        virtual void
        post_tGSESettings ();

        // Parser construction API.
        //
        void
        appID_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        dataLabel_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* cbName */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* appID */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* dataLabel */);

        // Constructor.
        //
        tGSESettings_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* appID_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* dataLabel_parser_;
      };

      class tSMVSettings_pskel: public virtual ::IEC61850::SCL::Validation::tServiceSettings_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        SmpRate ();

        virtual void
        svID ();

        virtual void
        optFields ();

        virtual void
        smpRate ();

        virtual void
        post_tSMVSettings ();

        // Parser construction API.
        //
        void
        SmpRate_parser (::IEC61850::SCL::Validation::SmpRate_pskel&);

        void
        svID_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        optFields_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        smpRate_parser (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* cbName */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* datSet */,
                 ::IEC61850::SCL::Validation::SmpRate_pskel& /* SmpRate */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* svID */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* optFields */,
                 ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel& /* smpRate */);

        // Constructor.
        //
        tSMVSettings_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::IEC61850::SCL::Validation::SmpRate_pskel* SmpRate_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* svID_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* optFields_parser_;
        ::IEC61850::SCL::Validation::tServiceSettingsEnum_pskel* smpRate_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::tSMVSettings_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        sequence_0 (unsigned long& state,
                    unsigned long& count,
                    const ::xml_schema::ro_string& ns,
                    const ::xml_schema::ro_string& n,
                    const ::xml_schema::ro_string* t,
                    bool start);
      };

      class tConfLNs_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        fixPrefix (bool);

        virtual void
        fixLnInst (bool);

        virtual void
        post_tConfLNs ();

        // Parser construction API.
        //
        void
        fixPrefix_parser (::xml_schema::boolean_pskel&);

        void
        fixLnInst_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::boolean_pskel& /* fixPrefix */,
                 ::xml_schema::boolean_pskel& /* fixLnInst */);

        // Constructor.
        //
        tConfLNs_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* fixPrefix_parser_;
        ::xml_schema::boolean_pskel* fixLnInst_parser_;
      };

      class SettingGroups_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        SGEdit ();

        virtual void
        ConfSG ();

        virtual void
        post_SettingGroups ();

        // Parser construction API.
        //
        void
        SGEdit_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        ConfSG_parser (::IEC61850::SCL::Validation::tServiceYesNo_pskel&);

        void
        parsers (::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* SGEdit */,
                 ::IEC61850::SCL::Validation::tServiceYesNo_pskel& /* ConfSG */);

        // Constructor.
        //
        SettingGroups_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _start_element_impl (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string*);

        virtual bool
        _end_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&);

        protected:
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* SGEdit_parser_;
        ::IEC61850::SCL::Validation::tServiceYesNo_pskel* ConfSG_parser_;

        protected:
        struct v_state_descr_
        {
          void (::IEC61850::SCL::Validation::SettingGroups_pskel::*func) (
            unsigned long&,
            unsigned long&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string&,
            const ::xml_schema::ro_string*,
            bool);
          unsigned long state;
          unsigned long count;
        };

        struct v_state_
        {
          v_state_descr_ data[2UL];
          unsigned long size;
        };

        v_state_ v_state_first_;
        ::xsd::cxx::parser::pod_stack v_state_stack_;

        virtual void
        _pre_e_validate ();

        virtual void
        _post_e_validate ();

        void
        all_0 (unsigned long& state,
               unsigned char* count,
               const ::xml_schema::ro_string& ns,
               const ::xml_schema::ro_string& n,
               const ::xml_schema::ro_string* t,
               bool start);

        unsigned char v_all_first_[2UL];
        ::xsd::cxx::parser::validating::all_stack v_all_count_;
      };

      class Authentication_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        none (bool);

        virtual void
        password (bool);

        virtual void
        weak (bool);

        virtual void
        strong (bool);

        virtual void
        certificate (bool);

        virtual void
        post_Authentication ();

        // Parser construction API.
        //
        void
        none_parser (::xml_schema::boolean_pskel&);

        void
        password_parser (::xml_schema::boolean_pskel&);

        void
        weak_parser (::xml_schema::boolean_pskel&);

        void
        strong_parser (::xml_schema::boolean_pskel&);

        void
        certificate_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::boolean_pskel& /* none */,
                 ::xml_schema::boolean_pskel& /* password */,
                 ::xml_schema::boolean_pskel& /* weak */,
                 ::xml_schema::boolean_pskel& /* strong */,
                 ::xml_schema::boolean_pskel& /* certificate */);

        // Constructor.
        //
        Authentication_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* none_parser_;
        ::xml_schema::boolean_pskel* password_parser_;
        ::xml_schema::boolean_pskel* weak_parser_;
        ::xml_schema::boolean_pskel* strong_parser_;
        ::xml_schema::boolean_pskel* certificate_parser_;
      };

      class LN0_pskel: public virtual ::IEC61850::SCL::Validation::tLN0_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_LN0 ();
      };

      class OptFields_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        seqNum (bool);

        virtual void
        timeStamp (bool);

        virtual void
        dataSet (bool);

        virtual void
        reasonCode (bool);

        virtual void
        dataRef (bool);

        virtual void
        entryID (bool);

        virtual void
        configRef (bool);

        virtual void
        post_OptFields ();

        // Parser construction API.
        //
        void
        seqNum_parser (::xml_schema::boolean_pskel&);

        void
        timeStamp_parser (::xml_schema::boolean_pskel&);

        void
        dataSet_parser (::xml_schema::boolean_pskel&);

        void
        reasonCode_parser (::xml_schema::boolean_pskel&);

        void
        dataRef_parser (::xml_schema::boolean_pskel&);

        void
        entryID_parser (::xml_schema::boolean_pskel&);

        void
        configRef_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::boolean_pskel& /* seqNum */,
                 ::xml_schema::boolean_pskel& /* timeStamp */,
                 ::xml_schema::boolean_pskel& /* dataSet */,
                 ::xml_schema::boolean_pskel& /* reasonCode */,
                 ::xml_schema::boolean_pskel& /* dataRef */,
                 ::xml_schema::boolean_pskel& /* entryID */,
                 ::xml_schema::boolean_pskel& /* configRef */);

        // Constructor.
        //
        OptFields_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* seqNum_parser_;
        ::xml_schema::boolean_pskel* timeStamp_parser_;
        ::xml_schema::boolean_pskel* dataSet_parser_;
        ::xml_schema::boolean_pskel* reasonCode_parser_;
        ::xml_schema::boolean_pskel* dataRef_parser_;
        ::xml_schema::boolean_pskel* entryID_parser_;
        ::xml_schema::boolean_pskel* configRef_parser_;
      };

      class SmvOpts_pskel: public ::xml_schema::complex_content
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        refreshTime (bool);

        virtual void
        sampleSynchronized (bool);

        virtual void
        sampleRate (bool);

        virtual void
        dataSet (bool);

        virtual void
        security (bool);

        virtual void
        post_SmvOpts ();

        // Parser construction API.
        //
        void
        refreshTime_parser (::xml_schema::boolean_pskel&);

        void
        sampleSynchronized_parser (::xml_schema::boolean_pskel&);

        void
        sampleRate_parser (::xml_schema::boolean_pskel&);

        void
        dataSet_parser (::xml_schema::boolean_pskel&);

        void
        security_parser (::xml_schema::boolean_pskel&);

        void
        parsers (::xml_schema::boolean_pskel& /* refreshTime */,
                 ::xml_schema::boolean_pskel& /* sampleSynchronized */,
                 ::xml_schema::boolean_pskel& /* sampleRate */,
                 ::xml_schema::boolean_pskel& /* dataSet */,
                 ::xml_schema::boolean_pskel& /* security */);

        // Constructor.
        //
        SmvOpts_pskel ();

        // Implementation.
        //
        protected:
        virtual bool
        _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&,
                                   const ::xml_schema::ro_string&);


        protected:
        ::xml_schema::boolean_pskel* refreshTime_parser_;
        ::xml_schema::boolean_pskel* sampleSynchronized_parser_;
        ::xml_schema::boolean_pskel* sampleRate_parser_;
        ::xml_schema::boolean_pskel* dataSet_parser_;
        ::xml_schema::boolean_pskel* security_parser_;
      };

      class SmpRate_pskel: public virtual ::xml_schema::decimal_pskel
      {
        public:
        // Parser callbacks. Override them in your implementation.
        //
        // virtual void
        // pre ();

        virtual void
        post_SmpRate ();
      };
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCL_IED_PSKEL_H
