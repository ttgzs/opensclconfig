// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "SCL_Communication-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // tControlBlock_pskel
      //

      void tControlBlock_pskel::
      Address_parser (::IEC61850::SCL::Validation::tAddress_pskel& p)
      {
        this->Address_parser_ = &p;
      }

      void tControlBlock_pskel::
      ldInst_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->ldInst_parser_ = &p;
      }

      void tControlBlock_pskel::
      cbName_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->cbName_parser_ = &p;
      }

      void tControlBlock_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tAddress_pskel& Address,
               ::IEC61850::SCL::Validation::tName_pskel& ldInst,
               ::IEC61850::SCL::Validation::tName_pskel& cbName)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
        this->Address_parser_ = &Address;
        this->ldInst_parser_ = &ldInst;
        this->cbName_parser_ = &cbName;
      }

      tControlBlock_pskel::
      tControlBlock_pskel ()
      : Address_parser_ (0),
        ldInst_parser_ (0),
        cbName_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tCommunication_pskel
      //

      void tCommunication_pskel::
      SubNetwork_parser (::IEC61850::SCL::Validation::tSubNetwork_pskel& p)
      {
        this->SubNetwork_parser_ = &p;
      }

      void tCommunication_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tSubNetwork_pskel& SubNetwork)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
        this->SubNetwork_parser_ = &SubNetwork;
      }

      tCommunication_pskel::
      tCommunication_pskel ()
      : SubNetwork_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tSubNetwork_pskel
      //

      void tSubNetwork_pskel::
      BitRate_parser (::IEC61850::SCL::Validation::tBitRateInMbPerSec_pskel& p)
      {
        this->BitRate_parser_ = &p;
      }

      void tSubNetwork_pskel::
      ConnectedAP_parser (::IEC61850::SCL::Validation::tConnectedAP_pskel& p)
      {
        this->ConnectedAP_parser_ = &p;
      }

      void tSubNetwork_pskel::
      type_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->type_parser_ = &p;
      }

      void tSubNetwork_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tName_pskel& name,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tBitRateInMbPerSec_pskel& BitRate,
               ::IEC61850::SCL::Validation::tConnectedAP_pskel& ConnectedAP,
               ::xml_schema::normalized_string_pskel& type)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->name_parser_ = &name;
        this->desc_parser_ = &desc;
        this->BitRate_parser_ = &BitRate;
        this->ConnectedAP_parser_ = &ConnectedAP;
        this->type_parser_ = &type;
      }

      tSubNetwork_pskel::
      tSubNetwork_pskel ()
      : BitRate_parser_ (0),
        ConnectedAP_parser_ (0),
        type_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tConnectedAP_pskel
      //

      void tConnectedAP_pskel::
      Address_parser (::IEC61850::SCL::Validation::tAddress_pskel& p)
      {
        this->Address_parser_ = &p;
      }

      void tConnectedAP_pskel::
      GSE_parser (::IEC61850::SCL::Validation::tGSE_pskel& p)
      {
        this->GSE_parser_ = &p;
      }

      void tConnectedAP_pskel::
      SMV_parser (::IEC61850::SCL::Validation::tSMV_pskel& p)
      {
        this->SMV_parser_ = &p;
      }

      void tConnectedAP_pskel::
      PhysConn_parser (::IEC61850::SCL::Validation::tPhysConn_pskel& p)
      {
        this->PhysConn_parser_ = &p;
      }

      void tConnectedAP_pskel::
      iedName_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->iedName_parser_ = &p;
      }

      void tConnectedAP_pskel::
      apName_parser (::IEC61850::SCL::Validation::tName_pskel& p)
      {
        this->apName_parser_ = &p;
      }

      void tConnectedAP_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tAddress_pskel& Address,
               ::IEC61850::SCL::Validation::tGSE_pskel& GSE,
               ::IEC61850::SCL::Validation::tSMV_pskel& SMV,
               ::IEC61850::SCL::Validation::tPhysConn_pskel& PhysConn,
               ::IEC61850::SCL::Validation::tName_pskel& iedName,
               ::IEC61850::SCL::Validation::tName_pskel& apName)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
        this->Address_parser_ = &Address;
        this->GSE_parser_ = &GSE;
        this->SMV_parser_ = &SMV;
        this->PhysConn_parser_ = &PhysConn;
        this->iedName_parser_ = &iedName;
        this->apName_parser_ = &apName;
      }

      tConnectedAP_pskel::
      tConnectedAP_pskel ()
      : Address_parser_ (0),
        GSE_parser_ (0),
        SMV_parser_ (0),
        PhysConn_parser_ (0),
        iedName_parser_ (0),
        apName_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tAddress_pskel
      //

      void tAddress_pskel::
      P_parser (::IEC61850::SCL::Validation::tP_pskel& p)
      {
        this->P_parser_ = &p;
      }

      void tAddress_pskel::
      parsers (::IEC61850::SCL::Validation::tP_pskel& P)
      {
        this->P_parser_ = &P;
      }

      tAddress_pskel::
      tAddress_pskel ()
      : P_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tGSE_pskel
      //

      void tGSE_pskel::
      MinTime_parser (::IEC61850::SCL::Validation::tDurationInMilliSec_pskel& p)
      {
        this->MinTime_parser_ = &p;
      }

      void tGSE_pskel::
      MaxTime_parser (::IEC61850::SCL::Validation::tDurationInMilliSec_pskel& p)
      {
        this->MaxTime_parser_ = &p;
      }

      void tGSE_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::xml_schema::normalized_string_pskel& desc,
               ::IEC61850::SCL::Validation::tAddress_pskel& Address,
               ::IEC61850::SCL::Validation::tName_pskel& ldInst,
               ::IEC61850::SCL::Validation::tName_pskel& cbName,
               ::IEC61850::SCL::Validation::tDurationInMilliSec_pskel& MinTime,
               ::IEC61850::SCL::Validation::tDurationInMilliSec_pskel& MaxTime)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->desc_parser_ = &desc;
        this->Address_parser_ = &Address;
        this->ldInst_parser_ = &ldInst;
        this->cbName_parser_ = &cbName;
        this->MinTime_parser_ = &MinTime;
        this->MaxTime_parser_ = &MaxTime;
      }

      tGSE_pskel::
      tGSE_pskel ()
      : MinTime_parser_ (0),
        MaxTime_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }

      // tPhysConn_pskel
      //

      void tPhysConn_pskel::
      P_parser (::IEC61850::SCL::Validation::tP_pskel& p)
      {
        this->P_parser_ = &p;
      }

      void tPhysConn_pskel::
      type_parser (::xml_schema::normalized_string_pskel& p)
      {
        this->type_parser_ = &p;
      }

      void tPhysConn_pskel::
      parsers (::IEC61850::SCL::Validation::tP_pskel& P,
               ::xml_schema::normalized_string_pskel& type)
      {
        this->P_parser_ = &P;
        this->type_parser_ = &type;
      }

      tPhysConn_pskel::
      tPhysConn_pskel ()
      : P_parser_ (0),
        type_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_pskel
      //

      void tP_pskel::
      type_parser (::IEC61850::SCL::Validation::tPTypeEnum_pskel& p)
      {
        this->type_parser_ = &p;
      }

      void tP_pskel::
      parsers (::IEC61850::SCL::Validation::tPTypeEnum_pskel& type)
      {
        this->type_parser_ = &type;
      }

      tP_pskel::
      tP_pskel ()
      : type_parser_ (0),
        v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_IP_pskel
      //

      tP_IP_pskel::
      tP_IP_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_IP_SUBNET_pskel
      //

      tP_IP_SUBNET_pskel::
      tP_IP_SUBNET_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_IP_GATEWAY_pskel
      //

      tP_IP_GATEWAY_pskel::
      tP_IP_GATEWAY_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_NSAP_pskel
      //

      tP_OSI_NSAP_pskel::
      tP_OSI_NSAP_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_TSEL_pskel
      //

      tP_OSI_TSEL_pskel::
      tP_OSI_TSEL_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_SSEL_pskel
      //

      tP_OSI_SSEL_pskel::
      tP_OSI_SSEL_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_PSEL_pskel
      //

      tP_OSI_PSEL_pskel::
      tP_OSI_PSEL_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_AP_Title_pskel
      //

      tP_OSI_AP_Title_pskel::
      tP_OSI_AP_Title_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_AP_Invoke_pskel
      //

      tP_OSI_AP_Invoke_pskel::
      tP_OSI_AP_Invoke_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_AE_Qualifier_pskel
      //

      tP_OSI_AE_Qualifier_pskel::
      tP_OSI_AE_Qualifier_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_OSI_AE_Invoke_pskel
      //

      tP_OSI_AE_Invoke_pskel::
      tP_OSI_AE_Invoke_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_MAC_Address_pskel
      //

      tP_MAC_Address_pskel::
      tP_MAC_Address_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_APPID_pskel
      //

      tP_APPID_pskel::
      tP_APPID_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_VLAN_PRIORITY_pskel
      //

      tP_VLAN_PRIORITY_pskel::
      tP_VLAN_PRIORITY_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }

      // tP_VLAN_ID_pskel
      //

      tP_VLAN_ID_pskel::
      tP_VLAN_ID_pskel ()
      : v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
      {
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // tControlBlock_pskel
      //

      void tControlBlock_pskel::
      Address ()
      {
      }

      void tControlBlock_pskel::
      ldInst ()
      {
      }

      void tControlBlock_pskel::
      cbName ()
      {
      }

      void tControlBlock_pskel::
      post_tControlBlock ()
      {
        post_tUnNaming ();
      }

      // tCommunication_pskel
      //

      void tCommunication_pskel::
      SubNetwork ()
      {
      }

      void tCommunication_pskel::
      post_tCommunication ()
      {
        post_tUnNaming ();
      }

      // tSubNetwork_pskel
      //

      void tSubNetwork_pskel::
      BitRate ()
      {
      }

      void tSubNetwork_pskel::
      ConnectedAP ()
      {
      }

      void tSubNetwork_pskel::
      type (const ::std::string&)
      {
      }

      void tSubNetwork_pskel::
      post_tSubNetwork ()
      {
        post_tNaming ();
      }

      // tConnectedAP_pskel
      //

      void tConnectedAP_pskel::
      Address ()
      {
      }

      void tConnectedAP_pskel::
      GSE ()
      {
      }

      void tConnectedAP_pskel::
      SMV ()
      {
      }

      void tConnectedAP_pskel::
      PhysConn ()
      {
      }

      void tConnectedAP_pskel::
      iedName ()
      {
      }

      void tConnectedAP_pskel::
      apName ()
      {
      }

      void tConnectedAP_pskel::
      post_tConnectedAP ()
      {
        post_tUnNaming ();
      }

      // tAddress_pskel
      //

      void tAddress_pskel::
      P ()
      {
      }

      void tAddress_pskel::
      post_tAddress ()
      {
      }

      // tGSE_pskel
      //

      void tGSE_pskel::
      MinTime ()
      {
      }

      void tGSE_pskel::
      MaxTime ()
      {
      }

      void tGSE_pskel::
      post_tGSE ()
      {
        post_tControlBlock ();
      }

      // tSMV_pskel
      //

      void tSMV_pskel::
      post_tSMV ()
      {
        post_tControlBlock ();
      }

      // tPhysConn_pskel
      //

      void tPhysConn_pskel::
      P ()
      {
      }

      void tPhysConn_pskel::
      type (const ::std::string&)
      {
      }

      void tPhysConn_pskel::
      post_tPhysConn ()
      {
      }

      // tP_pskel
      //

      void tP_pskel::
      type ()
      {
      }

      void tP_pskel::
      post_tP ()
      {
        post_tPAddr ();
      }

      // tP_IP_pskel
      //

      void tP_IP_pskel::
      post_tP_IP ()
      {
        post_tP ();
      }

      // tP_IP_SUBNET_pskel
      //

      void tP_IP_SUBNET_pskel::
      post_tP_IP_SUBNET ()
      {
        post_tP ();
      }

      // tP_IP_GATEWAY_pskel
      //

      void tP_IP_GATEWAY_pskel::
      post_tP_IP_GATEWAY ()
      {
        post_tP ();
      }

      // tP_OSI_NSAP_pskel
      //

      void tP_OSI_NSAP_pskel::
      post_tP_OSI_NSAP ()
      {
        post_tP ();
      }

      // tP_OSI_TSEL_pskel
      //

      void tP_OSI_TSEL_pskel::
      post_tP_OSI_TSEL ()
      {
        post_tP ();
      }

      // tP_OSI_SSEL_pskel
      //

      void tP_OSI_SSEL_pskel::
      post_tP_OSI_SSEL ()
      {
        post_tP ();
      }

      // tP_OSI_PSEL_pskel
      //

      void tP_OSI_PSEL_pskel::
      post_tP_OSI_PSEL ()
      {
        post_tP ();
      }

      // tP_OSI_AP_Title_pskel
      //

      void tP_OSI_AP_Title_pskel::
      post_tP_OSI_AP_Title ()
      {
        post_tP ();
      }

      // tP_OSI_AP_Invoke_pskel
      //

      void tP_OSI_AP_Invoke_pskel::
      post_tP_OSI_AP_Invoke ()
      {
        post_tP ();
      }

      // tP_OSI_AE_Qualifier_pskel
      //

      void tP_OSI_AE_Qualifier_pskel::
      post_tP_OSI_AE_Qualifier ()
      {
        post_tP ();
      }

      // tP_OSI_AE_Invoke_pskel
      //

      void tP_OSI_AE_Invoke_pskel::
      post_tP_OSI_AE_Invoke ()
      {
        post_tP ();
      }

      // tP_MAC_Address_pskel
      //

      void tP_MAC_Address_pskel::
      post_tP_MAC_Address ()
      {
        post_tP ();
      }

      // tP_APPID_pskel
      //

      void tP_APPID_pskel::
      post_tP_APPID ()
      {
        post_tP ();
      }

      // tP_VLAN_PRIORITY_pskel
      //

      void tP_VLAN_PRIORITY_pskel::
      post_tP_VLAN_PRIORITY ()
      {
        post_tP ();
      }

      // tP_VLAN_ID_pskel
      //

      void tP_VLAN_ID_pskel::
      post_tP_VLAN_ID ()
      {
        post_tP ();
      }
    }
  }
}

#include <cassert>

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Element validation and dispatch functions for tControlBlock_pskel.
      //
      bool tControlBlock_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tUnNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "Address" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tControlBlock_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tControlBlock_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tUnNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tControlBlock_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_e_validate ();
      }

      void tControlBlock_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tUnNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tControlBlock_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "Address" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Address_parser_;

                if (this->Address_parser_)
                  this->Address_parser_->pre ();
              }
              else
              {
                if (this->Address_parser_)
                {
                  this->Address_parser_->post_tAddress ();
                  this->Address ();
                }

                count = 0;
                state = ~0UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tCommunication_pskel.
      //
      bool tCommunication_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tUnNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "SubNetwork" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tCommunication_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "SubNetwork",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tCommunication_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tUnNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tCommunication_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_e_validate ();
      }

      void tCommunication_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tUnNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "SubNetwork");

        this->v_state_stack_.pop ();
      }

      void tCommunication_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "SubNetwork" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->SubNetwork_parser_;

                if (this->SubNetwork_parser_)
                  this->SubNetwork_parser_->pre ();
              }
              else
              {
                if (this->SubNetwork_parser_)
                {
                  this->SubNetwork_parser_->post_tSubNetwork ();
                  this->SubNetwork ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "SubNetwork",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tSubNetwork_pskel.
      //
      bool tSubNetwork_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "BitRate" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;
            else if (n == "ConnectedAP" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 1UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tSubNetwork_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "BitRate",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tSubNetwork_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tSubNetwork_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tNaming_pskel::_pre_e_validate ();
      }

      void tSubNetwork_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "BitRate");

        this->v_state_stack_.pop ();
      }

      void tSubNetwork_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "BitRate" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->BitRate_parser_;

                if (this->BitRate_parser_)
                  this->BitRate_parser_->pre ();
              }
              else
              {
                if (this->BitRate_parser_)
                {
                  this->BitRate_parser_->post_tBitRateInMbPerSec ();
                  this->BitRate ();
                }

                count = 0;
                state = 1UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 1UL;
              // Fall through.
            }
          }
          case 1UL:
          {
            if (n == "ConnectedAP" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->ConnectedAP_parser_;

                if (this->ConnectedAP_parser_)
                  this->ConnectedAP_parser_->pre ();
              }
              else
              {
                if (this->ConnectedAP_parser_)
                {
                  this->ConnectedAP_parser_->post_tConnectedAP ();
                  this->ConnectedAP ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "ConnectedAP",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tConnectedAP_pskel.
      //
      bool tConnectedAP_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tUnNaming_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "Address" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;
            else if (n == "GSE" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 1UL;
            else if (n == "SMV" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 2UL;
            else if (n == "PhysConn" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 3UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tConnectedAP_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tConnectedAP_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tUnNaming_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tConnectedAP_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_e_validate ();
      }

      void tConnectedAP_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tUnNaming_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tConnectedAP_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "Address" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Address_parser_;

                if (this->Address_parser_)
                  this->Address_parser_->pre ();
              }
              else
              {
                if (this->Address_parser_)
                {
                  this->Address_parser_->post_tAddress ();
                  this->Address ();
                }

                count = 0;
                state = 1UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 1UL;
              // Fall through.
            }
          }
          case 1UL:
          {
            if (n == "GSE" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->GSE_parser_;

                if (this->GSE_parser_)
                  this->GSE_parser_->pre ();
              }
              else
              {
                if (this->GSE_parser_)
                {
                  this->GSE_parser_->post_tGSE ();
                  this->GSE ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 2UL;
              // Fall through.
            }
          }
          case 2UL:
          {
            if (n == "SMV" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->SMV_parser_;

                if (this->SMV_parser_)
                  this->SMV_parser_->pre ();
              }
              else
              {
                if (this->SMV_parser_)
                {
                  this->SMV_parser_->post_tSMV ();
                  this->SMV ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 3UL;
              // Fall through.
            }
          }
          case 3UL:
          {
            if (n == "PhysConn" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->PhysConn_parser_;

                if (this->PhysConn_parser_)
                  this->PhysConn_parser_->pre ();
              }
              else
              {
                if (this->PhysConn_parser_)
                {
                  this->PhysConn_parser_->post_tPhysConn ();
                  this->PhysConn ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tAddress_pskel.
      //
      bool tAddress_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "P" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tAddress_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "P",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tAddress_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::xml_schema::complex_content::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tAddress_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;
      }

      void tAddress_pskel::
      _post_e_validate ()
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "P");

        this->v_state_stack_.pop ();
      }

      void tAddress_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "P" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->P_parser_;

                if (this->P_parser_)
                  this->P_parser_->pre ();
              }
              else
              {
                if (this->P_parser_)
                {
                  this->P_parser_->post_tP ();
                  this->P ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "P",
                  ns, n);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tGSE_pskel.
      //
      bool tGSE_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tControlBlock_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "MinTime" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;
            else if (n == "MaxTime" &&
                     ns == "http://www.iec.ch/61850/2003/SCL")
              s = 1UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tGSE_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tGSE_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tControlBlock_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tGSE_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tControlBlock_pskel::_pre_e_validate ();
      }

      void tGSE_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tControlBlock_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tGSE_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "MinTime" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->MinTime_parser_;

                if (this->MinTime_parser_)
                  this->MinTime_parser_->pre ();
              }
              else
              {
                if (this->MinTime_parser_)
                {
                  this->MinTime_parser_->post_tDurationInMilliSec ();
                  this->MinTime ();
                }

                count = 0;
                state = 1UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 1UL;
              // Fall through.
            }
          }
          case 1UL:
          {
            if (n == "MaxTime" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->MaxTime_parser_;

                if (this->MaxTime_parser_)
                  this->MaxTime_parser_->pre ();
              }
              else
              {
                if (this->MaxTime_parser_)
                {
                  this->MaxTime_parser_->post_tDurationInMilliSec ();
                  this->MaxTime ();
                }

                count = 0;
                state = ~0UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }

      // Element validation and dispatch functions for tPhysConn_pskel.
      //
      bool tPhysConn_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "P" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &tPhysConn_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool tPhysConn_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::xml_schema::complex_content::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void tPhysConn_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;
      }

      void tPhysConn_pskel::
      _post_e_validate ()
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }


        this->v_state_stack_.pop ();
      }

      void tPhysConn_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "P" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->P_parser_;

                if (this->P_parser_)
                  this->P_parser_->pre ();
              }
              else
              {
                if (this->P_parser_)
                {
                  this->P_parser_->post_tP ();
                  this->P ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Attribute validation and dispatch functions for tControlBlock_pskel.
      //
      bool tControlBlock_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "ldInst" && ns.empty ())
        {
          if (this->ldInst_parser_)
          {
            this->ldInst_parser_->pre ();
            this->ldInst_parser_->_pre_impl ();
            this->ldInst_parser_->_characters (s);
            this->ldInst_parser_->_post_impl ();
            this->ldInst_parser_->post_tName ();
            this->ldInst ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->ldInst = true;
          return true;
        }

        if (n == "cbName" && ns.empty ())
        {
          if (this->cbName_parser_)
          {
            this->cbName_parser_->pre ();
            this->cbName_parser_->_pre_impl ();
            this->cbName_parser_->_characters (s);
            this->cbName_parser_->_post_impl ();
            this->cbName_parser_->post_tName ();
            this->cbName ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->cbName = true;
          return true;
        }

        return this->::IEC61850::SCL::Validation::tUnNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tControlBlock_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.ldInst = false;
        as.cbName = false;
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_a_validate ();
      }

      void tControlBlock_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.ldInst)
          this->_expected_attribute (
            "", "ldInst");
        if (!as.cbName)
          this->_expected_attribute (
            "", "cbName");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tSubNetwork_pskel.
      //
      bool tSubNetwork_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            const ::std::string& tmp (this->type_parser_->post_normalized_string ());
            this->type (tmp);
          }

          return true;
        }

        return this->::IEC61850::SCL::Validation::tNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      // Attribute validation and dispatch functions for tConnectedAP_pskel.
      //
      bool tConnectedAP_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "iedName" && ns.empty ())
        {
          if (this->iedName_parser_)
          {
            this->iedName_parser_->pre ();
            this->iedName_parser_->_pre_impl ();
            this->iedName_parser_->_characters (s);
            this->iedName_parser_->_post_impl ();
            this->iedName_parser_->post_tName ();
            this->iedName ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->iedName = true;
          return true;
        }

        if (n == "apName" && ns.empty ())
        {
          if (this->apName_parser_)
          {
            this->apName_parser_->pre ();
            this->apName_parser_->_pre_impl ();
            this->apName_parser_->_characters (s);
            this->apName_parser_->_post_impl ();
            this->apName_parser_->post_tName ();
            this->apName ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->apName = true;
          return true;
        }

        return this->::IEC61850::SCL::Validation::tUnNaming_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tConnectedAP_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.iedName = false;
        as.apName = false;
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_pre_a_validate ();
      }

      void tConnectedAP_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tUnNaming_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.iedName)
          this->_expected_attribute (
            "", "iedName");
        if (!as.apName)
          this->_expected_attribute (
            "", "apName");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tPhysConn_pskel.
      //
      bool tPhysConn_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            const ::std::string& tmp (this->type_parser_->post_normalized_string ());
            this->type (tmp);
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tPhysConn_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tPhysConn_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_pskel.
      //
      bool tP_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return this->::IEC61850::SCL::Validation::tPAddr_pskel::_attribute_impl_phase_one (ns, n, s);
      }

      void tP_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
        this->::IEC61850::SCL::Validation::tPAddr_pskel::_pre_a_validate ();
      }

      void tP_pskel::
      _post_a_validate ()
      {
        this->::IEC61850::SCL::Validation::tPAddr_pskel::_post_a_validate ();

        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_IP_pskel.
      //
      bool tP_IP_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_IP_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_IP_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_IP_SUBNET_pskel.
      //
      bool tP_IP_SUBNET_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_IP_SUBNET_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_IP_SUBNET_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_IP_GATEWAY_pskel.
      //
      bool tP_IP_GATEWAY_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_IP_GATEWAY_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_IP_GATEWAY_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_NSAP_pskel.
      //
      bool tP_OSI_NSAP_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_NSAP_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_NSAP_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_TSEL_pskel.
      //
      bool tP_OSI_TSEL_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_TSEL_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_TSEL_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_SSEL_pskel.
      //
      bool tP_OSI_SSEL_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_SSEL_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_SSEL_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_PSEL_pskel.
      //
      bool tP_OSI_PSEL_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_PSEL_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_PSEL_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_AP_Title_pskel.
      //
      bool tP_OSI_AP_Title_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_AP_Title_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_AP_Title_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_AP_Invoke_pskel.
      //
      bool tP_OSI_AP_Invoke_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_AP_Invoke_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_AP_Invoke_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_AE_Qualifier_pskel.
      //
      bool tP_OSI_AE_Qualifier_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_AE_Qualifier_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_AE_Qualifier_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_OSI_AE_Invoke_pskel.
      //
      bool tP_OSI_AE_Invoke_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_OSI_AE_Invoke_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_OSI_AE_Invoke_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_MAC_Address_pskel.
      //
      bool tP_MAC_Address_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_MAC_Address_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_MAC_Address_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_APPID_pskel.
      //
      bool tP_APPID_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_APPID_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_APPID_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_VLAN_PRIORITY_pskel.
      //
      bool tP_VLAN_PRIORITY_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_VLAN_PRIORITY_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_VLAN_PRIORITY_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }

      // Attribute validation and dispatch functions for tP_VLAN_ID_pskel.
      //
      bool tP_VLAN_ID_pskel::
      _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                                 const ::xml_schema::ro_string& n,
                                 const ::xml_schema::ro_string& s)
      {
        if (n == "type" && ns.empty ())
        {
          if (this->type_parser_)
          {
            this->type_parser_->pre ();
            this->type_parser_->_pre_impl ();
            this->type_parser_->_characters (s);
            this->type_parser_->_post_impl ();
            this->type_parser_->post_tPTypeEnum ();
            this->type ();
          }

          static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
          return true;
        }

        return false;
      }

      void tP_VLAN_ID_pskel::
      _pre_a_validate ()
      {
        this->v_state_attr_stack_.push ();
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        as.type = false;
      }

      void tP_VLAN_ID_pskel::
      _post_a_validate ()
      {
        v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

        if (!as.type)
          this->_expected_attribute (
            "", "type");

        this->v_state_attr_stack_.pop ();
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

