// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "SCL-pskel.h"

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // SCL_pskel
      //

      void SCL_pskel::
      Header_parser (::IEC61850::SCL::Validation::tHeader_pskel& p)
      {
        this->Header_parser_ = &p;
      }

      void SCL_pskel::
      Substation_parser (::IEC61850::SCL::Validation::tSubstation_pskel& p)
      {
        this->Substation_parser_ = &p;
      }

      void SCL_pskel::
      Communication_parser (::IEC61850::SCL::Validation::tCommunication_pskel& p)
      {
        this->Communication_parser_ = &p;
      }

      void SCL_pskel::
      IED_parser (::IEC61850::SCL::Validation::tIED_pskel& p)
      {
        this->IED_parser_ = &p;
      }

      void SCL_pskel::
      DataTypeTemplates_parser (::IEC61850::SCL::Validation::tDataTypeTemplates_pskel& p)
      {
        this->DataTypeTemplates_parser_ = &p;
      }

      void SCL_pskel::
      parsers (::IEC61850::SCL::Validation::tText_pskel& Text,
               ::IEC61850::SCL::Validation::tPrivate_pskel& Private,
               ::IEC61850::SCL::Validation::tHeader_pskel& Header,
               ::IEC61850::SCL::Validation::tSubstation_pskel& Substation,
               ::IEC61850::SCL::Validation::tCommunication_pskel& Communication,
               ::IEC61850::SCL::Validation::tIED_pskel& IED,
               ::IEC61850::SCL::Validation::tDataTypeTemplates_pskel& DataTypeTemplates)
      {
        this->Text_parser_ = &Text;
        this->Private_parser_ = &Private;
        this->Header_parser_ = &Header;
        this->Substation_parser_ = &Substation;
        this->Communication_parser_ = &Communication;
        this->IED_parser_ = &IED;
        this->DataTypeTemplates_parser_ = &DataTypeTemplates;
      }

      SCL_pskel::
      SCL_pskel ()
      : Header_parser_ (0),
        Substation_parser_ (0),
        Communication_parser_ (0),
        IED_parser_ (0),
        DataTypeTemplates_parser_ (0),
        v_state_stack_ (sizeof (v_state_), &v_state_first_)
      {
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // SCL_pskel
      //

      void SCL_pskel::
      Header ()
      {
      }

      void SCL_pskel::
      Substation ()
      {
      }

      void SCL_pskel::
      Communication ()
      {
      }

      void SCL_pskel::
      IED ()
      {
      }

      void SCL_pskel::
      DataTypeTemplates ()
      {
      }

      void SCL_pskel::
      post_SCL ()
      {
        post_tBaseElement ();
      }
    }
  }
}

#include <cassert>

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
      // Element validation and dispatch functions for SCL_pskel.
      //
      bool SCL_pskel::
      _start_element_impl (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string* t)
      {
        XSD_UNUSED (t);

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        if (vd->func == 0 && vd->state == 0)
        {
          if (this->::IEC61850::SCL::Validation::tBaseElement_pskel::_start_element_impl (ns, n, t))
            return true;
          else
            vd->state = 1;
        }

        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

          vd = vs.data + (vs.size - 1);

          if (vd->state == ~0UL)
            vd = vs.data + (--vs.size - 1);
          else
            break;
        }

        if (vd->func == 0)
        {
          if (vd->state != ~0UL)
          {
            unsigned long s = ~0UL;

            if (n == "Header" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
              s = 0UL;

            if (s != ~0UL)
            {
              vd->count++;
              vd->state = ~0UL;

              vd = vs.data + vs.size++;
              vd->func = &SCL_pskel::sequence_0;
              vd->state = s;
              vd->count = 0;

              this->sequence_0 (vd->state, vd->count, ns, n, t, true);
            }
            else
            {
              if (vd->count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "Header",
                  ns, n);
              return false;
            }
          }
          else
            return false;
        }

        return true;
      }

      bool SCL_pskel::
      _end_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n)
      {
        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size - 1];

        if (vd.func == 0 && vd.state == 0)
        {
          if (!::IEC61850::SCL::Validation::tBaseElement_pskel::_end_element_impl (ns, n))
            assert (false);
          return true;
        }

        assert (vd.func != 0);
        (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

        if (vd.state == ~0UL)
          vs.size--;

        return true;
      }

      void SCL_pskel::
      _pre_e_validate ()
      {
        this->v_state_stack_.push ();
        static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_& vd = vs.data[vs.size++];

        vd.func = 0;
        vd.state = 0;
        vd.count = 0;

        ::IEC61850::SCL::Validation::tBaseElement_pskel::_pre_e_validate ();
      }

      void SCL_pskel::
      _post_e_validate ()
      {
        ::IEC61850::SCL::Validation::tBaseElement_pskel::_post_e_validate ();

        v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
        v_state_descr_* vd = vs.data + (vs.size - 1);

        ::xml_schema::ro_string empty;
        while (vd->func != 0)
        {
          (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
          assert (vd->state == ~0UL);
          vd = vs.data + (--vs.size - 1);
        }

        if (vd->count < 1UL)
          this->_expected_element (
            "http://www.iec.ch/61850/2003/SCL", "Header");

        this->v_state_stack_.pop ();
      }

      void SCL_pskel::
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start)
      {
        XSD_UNUSED (t);

        switch (state)
        {
          case 0UL:
          {
            if (n == "Header" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Header_parser_;

                if (this->Header_parser_)
                  this->Header_parser_->pre ();
              }
              else
              {
                if (this->Header_parser_)
                {
                  this->Header_parser_->post_tHeader ();
                  this->Header ();
                }

                count = 0;
                state = 1UL;
              }

              break;
            }
            else
            {
              assert (start);
              if (count < 1UL)
                this->_expected_element (
                  "http://www.iec.ch/61850/2003/SCL", "Header",
                  ns, n);
              count = 0;
              state = 1UL;
              // Fall through.
            }
          }
          case 1UL:
          {
            if (n == "Substation" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Substation_parser_;

                if (this->Substation_parser_)
                  this->Substation_parser_->pre ();
              }
              else
              {
                if (this->Substation_parser_)
                {
                  this->Substation_parser_->post_tSubstation ();
                  this->Substation ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 2UL;
              // Fall through.
            }
          }
          case 2UL:
          {
            if (n == "Communication" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->Communication_parser_;

                if (this->Communication_parser_)
                  this->Communication_parser_->pre ();
              }
              else
              {
                if (this->Communication_parser_)
                {
                  this->Communication_parser_->post_tCommunication ();
                  this->Communication ();
                }

                count = 0;
                state = 3UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 3UL;
              // Fall through.
            }
          }
          case 3UL:
          {
            if (n == "IED" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->IED_parser_;

                if (this->IED_parser_)
                  this->IED_parser_->pre ();
              }
              else
              {
                if (this->IED_parser_)
                {
                  this->IED_parser_->post_tIED ();
                  this->IED ();
                }

                count++;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = 4UL;
              // Fall through.
            }
          }
          case 4UL:
          {
            if (n == "DataTypeTemplates" &&
                ns == "http://www.iec.ch/61850/2003/SCL")
            {
              if (start)
              {
                this->::xml_schema::complex_content::context_.top ().parser_ = this->DataTypeTemplates_parser_;

                if (this->DataTypeTemplates_parser_)
                  this->DataTypeTemplates_parser_->pre ();
              }
              else
              {
                if (this->DataTypeTemplates_parser_)
                {
                  this->DataTypeTemplates_parser_->post_tDataTypeTemplates ();
                  this->DataTypeTemplates ();
                }

                count = 0;
                state = ~0UL;
              }

              break;
            }
            else
            {
              assert (start);
              count = 0;
              state = ~0UL;
              // Fall through.
            }
          }
          case ~0UL:
            break;
        }
      }
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
    }
  }
}

namespace IEC61850
{
  namespace SCL
  {
    namespace Validation
    {
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

